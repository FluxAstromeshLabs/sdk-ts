import * as ethwallet from '@ethereumjs/wallet'
import * as ethutil from '@ethereumjs/util'
import { sha256 } from "ethereum-cryptography/sha256.js";
import { createAddress } from '@tendermint/sig';
import { NodeHttpTransport } from '@improbable-eng/grpc-web-node-http-transport';

import * as evmtypes from '../../../../chain/flux/evm/v1beta1/tx'
import * as txtypes from '../../../../chain/cosmos/tx/v1beta1/tx'
import * as txservice from '../../../../chain/cosmos/tx/v1beta1/service'
import * as authservice from '../../../../chain/cosmos/auth/v1beta1/query'
import * as secp256k1 from '../../../../chain/cosmos/crypto/secp256k1/keys'
import * as signingtypes from '../../../../chain/cosmos/tx/signing/v1beta1/signing'
import * as anytypes from '../../../../chain/google/protobuf/any'

function compressPublicKey(uncompressedPublicKey: Buffer): Buffer {
  const xCoord = uncompressedPublicKey.slice(0,32);
  const yCoord = uncompressedPublicKey.slice(32,64);
  const yParityByte = yCoord[31] % 2 == 0 ? Buffer.from([2]) : Buffer.from([3])
  return Buffer.concat([yParityByte, xCoord])
}

const main = async () => {
  // init client
  const host = 'http://localhost:10337';
  const cc = new txservice.GrpcWebImpl(host, {
    transport: NodeHttpTransport(),
  })
  const txClient = new txservice.ServiceClientImpl(cc)
  const authClient = new authservice.QueryClientImpl(cc)

  // init user3
  const wallet = ethwallet.Wallet.fromPrivateKey(Uint8Array.from(Buffer.from("39a4c898dda351d54875d5ebb3e1c451189116faa556c3c04adc860dd1000608", 'hex')))
  const senderPrivKey: secp256k1.PrivKey = {key: wallet.getPrivateKey()}
  const senderPubkey: secp256k1.PubKey = {key: compressPublicKey(Buffer.from(wallet.getPublicKey()))}
  const senderPubkeyAny: anytypes.Any = {
    type_url: '/' + secp256k1.PubKey.$type,
    value: secp256k1.PubKey.encode(senderPubkey).finish()
  }
  const senderAddr = createAddress(senderPubkey.key, 'lux')

  // fetch account num, seq
  const senderInfo = await authClient.AccountInfo({address: senderAddr})
  const accNum = senderInfo.info!.account_number!
  const accSeq = senderInfo.info!.sequence!

  // init msg
  let bytecode = '608060405234801562000010575f80fd5b506040518060400160405280600581526020017f6f776e65720000000000000000000000000000000000000000000000000000008152505f6040516200005690620000d1565b908152602001604051809103902090816200007291906200034b565b506200042f565b5f81905092915050565b7f64656661756c74000000000000000000000000000000000000000000000000005f82015250565b5f620000b960078362000079565b9150620000c68262000083565b600782019050919050565b5f620000dd82620000ab565b9150819050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200016357607f821691505b6020821081036200017957620001786200011e565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620001dd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001a0565b620001e98683620001a0565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620002336200022d620002278462000201565b6200020a565b62000201565b9050919050565b5f819050919050565b6200024e8362000213565b620002666200025d826200023a565b848454620001ac565b825550505050565b5f90565b6200027c6200026e565b6200028981848462000243565b505050565b5b81811015620002b057620002a45f8262000272565b6001810190506200028f565b5050565b601f821115620002ff57620002c9816200017f565b620002d48462000191565b81016020851015620002e4578190505b620002fc620002f38562000191565b8301826200028e565b50505b505050565b5f82821c905092915050565b5f620003215f198460080262000304565b1980831691505092915050565b5f6200033b838362000310565b9150826002028217905092915050565b6200035682620000e7565b67ffffffffffffffff811115620003725762000371620000f1565b5b6200037e82546200014b565b6200038b828285620002b4565b5f60209050601f831160018114620003c1575f8415620003ac578287015190505b620003b885826200032e565b86555062000427565b601f198416620003d1866200017f565b5f5b82811015620003fa57848901518255600182019150602085019450602081019050620003d3565b868310156200041a578489015162000416601f89168262000310565b8355505b6001600288020188555050505b505050505050565b6108b5806200043d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063693ec85e14610043578063809bfab814610073578063e942b516146100a3575b5f80fd5b61005d600480360381019061005891906103de565b6100bf565b60405161006a919061049f565b60405180910390f35b61008d600480360381019061008891906103de565b61016c565b60405161009a919061049f565b60405180910390f35b6100bd60048036038101906100b891906104bf565b61021e565b005b60605f826040516100d0919061056f565b908152602001604051809103902080546100e9906105b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610115906105b2565b80156101605780601f1061013757610100808354040283529160200191610160565b820191905f5260205f20905b81548152906001019060200180831161014357829003601f168201915b50505050509050919050565b5f818051602081018201805184825260208301602085012081835280955050505050505f91509050805461019f906105b2565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906105b2565b80156102165780601f106101ed57610100808354040283529160200191610216565b820191905f5260205f20905b8154815290600101906020018083116101f957829003601f168201915b505050505081565b805f8360405161022e919061056f565b908152602001604051809103902090816102489190610788565b505f670de0b6b3a764000090507f248dd4076d0a389d795107efafd558ce7f31ae37b441ccb9a599c60868f480d5816040516102849190610866565b60405180910390a1505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102f0826102aa565b810181811067ffffffffffffffff8211171561030f5761030e6102ba565b5b80604052505050565b5f610321610291565b905061032d82826102e7565b919050565b5f67ffffffffffffffff82111561034c5761034b6102ba565b5b610355826102aa565b9050602081019050919050565b828183375f83830152505050565b5f61038261037d84610332565b610318565b90508281526020810184848401111561039e5761039d6102a6565b5b6103a9848285610362565b509392505050565b5f82601f8301126103c5576103c46102a2565b5b81356103d5848260208601610370565b91505092915050565b5f602082840312156103f3576103f261029a565b5b5f82013567ffffffffffffffff8111156104105761040f61029e565b5b61041c848285016103b1565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561045c578082015181840152602081019050610441565b5f8484015250505050565b5f61047182610425565b61047b818561042f565b935061048b81856020860161043f565b610494816102aa565b840191505092915050565b5f6020820190508181035f8301526104b78184610467565b905092915050565b5f80604083850312156104d5576104d461029a565b5b5f83013567ffffffffffffffff8111156104f2576104f161029e565b5b6104fe858286016103b1565b925050602083013567ffffffffffffffff81111561051f5761051e61029e565b5b61052b858286016103b1565b9150509250929050565b5f81905092915050565b5f61054982610425565b6105538185610535565b935061056381856020860161043f565b80840191505092915050565b5f61057a828461053f565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105c957607f821691505b6020821081036105dc576105db610585565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261063e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610603565b6106488683610603565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61068c61068761068284610660565b610669565b610660565b9050919050565b5f819050919050565b6106a583610672565b6106b96106b182610693565b84845461060f565b825550505050565b5f90565b6106cd6106c1565b6106d881848461069c565b505050565b5b818110156106fb576106f05f826106c5565b6001810190506106de565b5050565b601f82111561074057610711816105e2565b61071a846105f4565b81016020851015610729578190505b61073d610735856105f4565b8301826106dd565b50505b505050565b5f82821c905092915050565b5f6107605f1984600802610745565b1980831691505092915050565b5f6107788383610751565b9150826002028217905092915050565b61079182610425565b67ffffffffffffffff8111156107aa576107a96102ba565b5b6107b482546105b2565b6107bf8282856106ff565b5f60209050601f8311600181146107f0575f84156107de578287015190505b6107e8858261076d565b86555061084f565b601f1984166107fe866105e2565b5f5b8281101561082557848901518255600182019150602085019450602081019050610800565b86831015610842578489015161083e601f891682610751565b8355505b6001600288020188555050505b505050505050565b61086081610660565b82525050565b5f6020820190506108795f830184610857565b9291505056fea2646970667358221220dd552e402c5a1f07b3112c1365e47cf9a70b994d02831d182da994de0831518264736f6c63430008180033'
  const msg: evmtypes.MsgDeployContract = {
    sender: senderAddr,
    bytecode: Buffer.from(bytecode, 'hex'),
    calldata: null,
    input_amount: null,
  }

  const msgAny: anytypes.Any = {
    type_url: `/${evmtypes.MsgDeployContract.$type}`,
    value: evmtypes.MsgDeployContract.encode(msg).finish(),
  }

  // prep tx data
  const txBody: txtypes.TxBody = {
    messages: [msgAny],
    memo: '',
    timeout_height: "30000",
    extension_options: [],
    non_critical_extension_options: []
  }

  const authInfo: txtypes.AuthInfo = {
    signer_infos: [
      {
        public_key: senderPubkeyAny,
        mode_info: {
          single: {
            mode: signingtypes.SignMode.SIGN_MODE_DIRECT,
          },
        },
        sequence: accSeq,
      },
    ],
    fee: {
      amount: [
        {denom: "lux", amount: "100000000000000"}
      ],
      gas_limit: "200000",
      payer: "",
      granter: ""
    },
    tip: undefined,
  }

  const signDoc: txtypes.SignDoc = {
    body_bytes: txtypes.TxBody.encode(txBody).finish(),
    auth_info_bytes: txtypes.AuthInfo.encode(authInfo).finish(),
    chain_id: 'flux-1',
    account_number: accNum,
  }
  const signBytes = txtypes.SignDoc.encode(signDoc).finish()

  // build tx
  const msgHash = Buffer.from(sha256(signBytes))
  const sigParts = ethutil.ecsign(msgHash, Buffer.from(senderPrivKey.key))
  const sig = Uint8Array.from(Buffer.concat([sigParts.r, sigParts.s]))

  // broadcast tx
  const txRaw: txtypes.TxRaw = {
    body_bytes: txtypes.TxBody.encode(txBody).finish(),
    auth_info_bytes: txtypes.AuthInfo.encode(authInfo).finish(),
    signatures: [sig],
  }
  const broadcastReq: txservice.BroadcastTxRequest = {
    tx_bytes: txtypes.TxRaw.encode(txRaw).finish(),
    mode: txservice.BroadcastMode.BROADCAST_MODE_SYNC,
  }

  try {
    const res = await txClient.BroadcastTx(broadcastReq)
    console.log("hash:", res.tx_response.txhash)
  } catch (err) {
    console.log(err)
  }
}

main()
