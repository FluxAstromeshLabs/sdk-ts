// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: cometbft/abci/v1/service.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import {
  ApplySnapshotChunkRequest,
  ApplySnapshotChunkResponse,
  CheckTxRequest,
  CheckTxResponse,
  CommitRequest,
  CommitResponse,
  EchoRequest,
  EchoResponse,
  ExtendVoteRequest,
  ExtendVoteResponse,
  FinalizeBlockRequest,
  FinalizeBlockResponse,
  FlushRequest,
  FlushResponse,
  InfoRequest,
  InfoResponse,
  InitChainRequest,
  InitChainResponse,
  ListSnapshotsRequest,
  ListSnapshotsResponse,
  LoadSnapshotChunkRequest,
  LoadSnapshotChunkResponse,
  OfferSnapshotRequest,
  OfferSnapshotResponse,
  PrepareProposalRequest,
  PrepareProposalResponse,
  ProcessProposalRequest,
  ProcessProposalResponse,
  QueryRequest,
  QueryResponse,
  VerifyVoteExtensionRequest,
  VerifyVoteExtensionResponse,
} from "./types";

/** ABCIService is a service for an ABCI application. */
export interface ABCIService {
  /** Echo returns back the same message it is sent. */
  Echo(request: DeepPartial<EchoRequest>, metadata?: grpc.Metadata): Promise<EchoResponse>;
  /** Flush flushes the write buffer. */
  Flush(request: DeepPartial<FlushRequest>, metadata?: grpc.Metadata): Promise<FlushResponse>;
  /** Info returns information about the application state. */
  Info(request: DeepPartial<InfoRequest>, metadata?: grpc.Metadata): Promise<InfoResponse>;
  /** CheckTx validates a transaction. */
  CheckTx(request: DeepPartial<CheckTxRequest>, metadata?: grpc.Metadata): Promise<CheckTxResponse>;
  /** Query queries the application state. */
  Query(request: DeepPartial<QueryRequest>, metadata?: grpc.Metadata): Promise<QueryResponse>;
  /** Commit commits a block of transactions. */
  Commit(request: DeepPartial<CommitRequest>, metadata?: grpc.Metadata): Promise<CommitResponse>;
  /** InitChain initializes the blockchain. */
  InitChain(request: DeepPartial<InitChainRequest>, metadata?: grpc.Metadata): Promise<InitChainResponse>;
  /** ListSnapshots lists all the available snapshots. */
  ListSnapshots(request: DeepPartial<ListSnapshotsRequest>, metadata?: grpc.Metadata): Promise<ListSnapshotsResponse>;
  /** OfferSnapshot sends a snapshot offer. */
  OfferSnapshot(request: DeepPartial<OfferSnapshotRequest>, metadata?: grpc.Metadata): Promise<OfferSnapshotResponse>;
  /** LoadSnapshotChunk returns a chunk of snapshot. */
  LoadSnapshotChunk(
    request: DeepPartial<LoadSnapshotChunkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<LoadSnapshotChunkResponse>;
  /** ApplySnapshotChunk applies a chunk of snapshot. */
  ApplySnapshotChunk(
    request: DeepPartial<ApplySnapshotChunkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ApplySnapshotChunkResponse>;
  /** PrepareProposal returns a proposal for the next block. */
  PrepareProposal(
    request: DeepPartial<PrepareProposalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<PrepareProposalResponse>;
  /** ProcessProposal validates a proposal. */
  ProcessProposal(
    request: DeepPartial<ProcessProposalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ProcessProposalResponse>;
  /** ExtendVote extends a vote with application-injected data (vote extensions). */
  ExtendVote(request: DeepPartial<ExtendVoteRequest>, metadata?: grpc.Metadata): Promise<ExtendVoteResponse>;
  /** VerifyVoteExtension verifies a vote extension. */
  VerifyVoteExtension(
    request: DeepPartial<VerifyVoteExtensionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<VerifyVoteExtensionResponse>;
  /** FinalizeBlock finalizes a block. */
  FinalizeBlock(request: DeepPartial<FinalizeBlockRequest>, metadata?: grpc.Metadata): Promise<FinalizeBlockResponse>;
}

export class ABCIServiceClientImpl implements ABCIService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Echo = this.Echo.bind(this);
    this.Flush = this.Flush.bind(this);
    this.Info = this.Info.bind(this);
    this.CheckTx = this.CheckTx.bind(this);
    this.Query = this.Query.bind(this);
    this.Commit = this.Commit.bind(this);
    this.InitChain = this.InitChain.bind(this);
    this.ListSnapshots = this.ListSnapshots.bind(this);
    this.OfferSnapshot = this.OfferSnapshot.bind(this);
    this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);
    this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);
    this.PrepareProposal = this.PrepareProposal.bind(this);
    this.ProcessProposal = this.ProcessProposal.bind(this);
    this.ExtendVote = this.ExtendVote.bind(this);
    this.VerifyVoteExtension = this.VerifyVoteExtension.bind(this);
    this.FinalizeBlock = this.FinalizeBlock.bind(this);
  }

  Echo(request: DeepPartial<EchoRequest>, metadata?: grpc.Metadata): Promise<EchoResponse> {
    return this.rpc.unary(ABCIServiceEchoDesc, EchoRequest.fromPartial(request), metadata);
  }

  Flush(request: DeepPartial<FlushRequest>, metadata?: grpc.Metadata): Promise<FlushResponse> {
    return this.rpc.unary(ABCIServiceFlushDesc, FlushRequest.fromPartial(request), metadata);
  }

  Info(request: DeepPartial<InfoRequest>, metadata?: grpc.Metadata): Promise<InfoResponse> {
    return this.rpc.unary(ABCIServiceInfoDesc, InfoRequest.fromPartial(request), metadata);
  }

  CheckTx(request: DeepPartial<CheckTxRequest>, metadata?: grpc.Metadata): Promise<CheckTxResponse> {
    return this.rpc.unary(ABCIServiceCheckTxDesc, CheckTxRequest.fromPartial(request), metadata);
  }

  Query(request: DeepPartial<QueryRequest>, metadata?: grpc.Metadata): Promise<QueryResponse> {
    return this.rpc.unary(ABCIServiceQueryDesc, QueryRequest.fromPartial(request), metadata);
  }

  Commit(request: DeepPartial<CommitRequest>, metadata?: grpc.Metadata): Promise<CommitResponse> {
    return this.rpc.unary(ABCIServiceCommitDesc, CommitRequest.fromPartial(request), metadata);
  }

  InitChain(request: DeepPartial<InitChainRequest>, metadata?: grpc.Metadata): Promise<InitChainResponse> {
    return this.rpc.unary(ABCIServiceInitChainDesc, InitChainRequest.fromPartial(request), metadata);
  }

  ListSnapshots(request: DeepPartial<ListSnapshotsRequest>, metadata?: grpc.Metadata): Promise<ListSnapshotsResponse> {
    return this.rpc.unary(ABCIServiceListSnapshotsDesc, ListSnapshotsRequest.fromPartial(request), metadata);
  }

  OfferSnapshot(request: DeepPartial<OfferSnapshotRequest>, metadata?: grpc.Metadata): Promise<OfferSnapshotResponse> {
    return this.rpc.unary(ABCIServiceOfferSnapshotDesc, OfferSnapshotRequest.fromPartial(request), metadata);
  }

  LoadSnapshotChunk(
    request: DeepPartial<LoadSnapshotChunkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<LoadSnapshotChunkResponse> {
    return this.rpc.unary(ABCIServiceLoadSnapshotChunkDesc, LoadSnapshotChunkRequest.fromPartial(request), metadata);
  }

  ApplySnapshotChunk(
    request: DeepPartial<ApplySnapshotChunkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ApplySnapshotChunkResponse> {
    return this.rpc.unary(ABCIServiceApplySnapshotChunkDesc, ApplySnapshotChunkRequest.fromPartial(request), metadata);
  }

  PrepareProposal(
    request: DeepPartial<PrepareProposalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<PrepareProposalResponse> {
    return this.rpc.unary(ABCIServicePrepareProposalDesc, PrepareProposalRequest.fromPartial(request), metadata);
  }

  ProcessProposal(
    request: DeepPartial<ProcessProposalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ProcessProposalResponse> {
    return this.rpc.unary(ABCIServiceProcessProposalDesc, ProcessProposalRequest.fromPartial(request), metadata);
  }

  ExtendVote(request: DeepPartial<ExtendVoteRequest>, metadata?: grpc.Metadata): Promise<ExtendVoteResponse> {
    return this.rpc.unary(ABCIServiceExtendVoteDesc, ExtendVoteRequest.fromPartial(request), metadata);
  }

  VerifyVoteExtension(
    request: DeepPartial<VerifyVoteExtensionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<VerifyVoteExtensionResponse> {
    return this.rpc.unary(
      ABCIServiceVerifyVoteExtensionDesc,
      VerifyVoteExtensionRequest.fromPartial(request),
      metadata,
    );
  }

  FinalizeBlock(request: DeepPartial<FinalizeBlockRequest>, metadata?: grpc.Metadata): Promise<FinalizeBlockResponse> {
    return this.rpc.unary(ABCIServiceFinalizeBlockDesc, FinalizeBlockRequest.fromPartial(request), metadata);
  }
}

export const ABCIServiceDesc = { serviceName: "cometbft.abci.v1.ABCIService" };

export const ABCIServiceEchoDesc: UnaryMethodDefinitionish = {
  methodName: "Echo",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return EchoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = EchoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceFlushDesc: UnaryMethodDefinitionish = {
  methodName: "Flush",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return FlushRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = FlushResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceInfoDesc: UnaryMethodDefinitionish = {
  methodName: "Info",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return InfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = InfoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceCheckTxDesc: UnaryMethodDefinitionish = {
  methodName: "CheckTx",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CheckTxRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CheckTxResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceQueryDesc: UnaryMethodDefinitionish = {
  methodName: "Query",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceCommitDesc: UnaryMethodDefinitionish = {
  methodName: "Commit",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CommitRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CommitResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceInitChainDesc: UnaryMethodDefinitionish = {
  methodName: "InitChain",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return InitChainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = InitChainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceListSnapshotsDesc: UnaryMethodDefinitionish = {
  methodName: "ListSnapshots",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListSnapshotsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListSnapshotsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceOfferSnapshotDesc: UnaryMethodDefinitionish = {
  methodName: "OfferSnapshot",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return OfferSnapshotRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = OfferSnapshotResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceLoadSnapshotChunkDesc: UnaryMethodDefinitionish = {
  methodName: "LoadSnapshotChunk",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return LoadSnapshotChunkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LoadSnapshotChunkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceApplySnapshotChunkDesc: UnaryMethodDefinitionish = {
  methodName: "ApplySnapshotChunk",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ApplySnapshotChunkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ApplySnapshotChunkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServicePrepareProposalDesc: UnaryMethodDefinitionish = {
  methodName: "PrepareProposal",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return PrepareProposalRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = PrepareProposalResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceProcessProposalDesc: UnaryMethodDefinitionish = {
  methodName: "ProcessProposal",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ProcessProposalRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ProcessProposalResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceExtendVoteDesc: UnaryMethodDefinitionish = {
  methodName: "ExtendVote",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ExtendVoteRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ExtendVoteResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceVerifyVoteExtensionDesc: UnaryMethodDefinitionish = {
  methodName: "VerifyVoteExtension",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return VerifyVoteExtensionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = VerifyVoteExtensionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ABCIServiceFinalizeBlockDesc: UnaryMethodDefinitionish = {
  methodName: "FinalizeBlock",
  service: ABCIServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return FinalizeBlockRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = FinalizeBlockResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
