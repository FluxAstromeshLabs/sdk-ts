// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: cometbft/abci/v1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { ProofOps } from "../../crypto/v1/proof";
import { ConsensusParams } from "../../types/v1/params";
import { BlockIDFlag, blockIDFlagFromJSON, blockIDFlagToJSON } from "../../types/v1/validator";

/**
 * Type of the transaction check request.
 *
 * This enumeration is incompatible with the CheckTxType definition in
 * cometbft.abci.v1beta1 and therefore shall not be used in encoding with the same
 * field number.
 */
export enum CheckTxType {
  /** CHECK_TX_TYPE_UNKNOWN - Unknown */
  CHECK_TX_TYPE_UNKNOWN = 0,
  /** CHECK_TX_TYPE_RECHECK - Recheck (2nd, 3rd, etc.) */
  CHECK_TX_TYPE_RECHECK = 1,
  /** CHECK_TX_TYPE_CHECK - Check (1st time) */
  CHECK_TX_TYPE_CHECK = 2,
  UNRECOGNIZED = -1,
}

export function checkTxTypeFromJSON(object: any): CheckTxType {
  switch (object) {
    case 0:
    case "CHECK_TX_TYPE_UNKNOWN":
      return CheckTxType.CHECK_TX_TYPE_UNKNOWN;
    case 1:
    case "CHECK_TX_TYPE_RECHECK":
      return CheckTxType.CHECK_TX_TYPE_RECHECK;
    case 2:
    case "CHECK_TX_TYPE_CHECK":
      return CheckTxType.CHECK_TX_TYPE_CHECK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CheckTxType.UNRECOGNIZED;
  }
}

export function checkTxTypeToJSON(object: CheckTxType): string {
  switch (object) {
    case CheckTxType.CHECK_TX_TYPE_UNKNOWN:
      return "CHECK_TX_TYPE_UNKNOWN";
    case CheckTxType.CHECK_TX_TYPE_RECHECK:
      return "CHECK_TX_TYPE_RECHECK";
    case CheckTxType.CHECK_TX_TYPE_CHECK:
      return "CHECK_TX_TYPE_CHECK";
    case CheckTxType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The result of offering a snapshot. */
export enum OfferSnapshotResult {
  /** OFFER_SNAPSHOT_RESULT_UNKNOWN - Unknown result, abort all snapshot restoration */
  OFFER_SNAPSHOT_RESULT_UNKNOWN = 0,
  /** OFFER_SNAPSHOT_RESULT_ACCEPT - Snapshot accepted, apply chunks */
  OFFER_SNAPSHOT_RESULT_ACCEPT = 1,
  /** OFFER_SNAPSHOT_RESULT_ABORT - Abort all snapshot restoration */
  OFFER_SNAPSHOT_RESULT_ABORT = 2,
  /** OFFER_SNAPSHOT_RESULT_REJECT - Reject this specific snapshot, try others */
  OFFER_SNAPSHOT_RESULT_REJECT = 3,
  /** OFFER_SNAPSHOT_RESULT_REJECT_FORMAT - Reject all snapshots of this format, try others */
  OFFER_SNAPSHOT_RESULT_REJECT_FORMAT = 4,
  /** OFFER_SNAPSHOT_RESULT_REJECT_SENDER - Reject all snapshots from the sender(s), try others */
  OFFER_SNAPSHOT_RESULT_REJECT_SENDER = 5,
  UNRECOGNIZED = -1,
}

export function offerSnapshotResultFromJSON(object: any): OfferSnapshotResult {
  switch (object) {
    case 0:
    case "OFFER_SNAPSHOT_RESULT_UNKNOWN":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_UNKNOWN;
    case 1:
    case "OFFER_SNAPSHOT_RESULT_ACCEPT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ACCEPT;
    case 2:
    case "OFFER_SNAPSHOT_RESULT_ABORT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ABORT;
    case 3:
    case "OFFER_SNAPSHOT_RESULT_REJECT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT;
    case 4:
    case "OFFER_SNAPSHOT_RESULT_REJECT_FORMAT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_FORMAT;
    case 5:
    case "OFFER_SNAPSHOT_RESULT_REJECT_SENDER":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_SENDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfferSnapshotResult.UNRECOGNIZED;
  }
}

export function offerSnapshotResultToJSON(object: OfferSnapshotResult): string {
  switch (object) {
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_UNKNOWN:
      return "OFFER_SNAPSHOT_RESULT_UNKNOWN";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ACCEPT:
      return "OFFER_SNAPSHOT_RESULT_ACCEPT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ABORT:
      return "OFFER_SNAPSHOT_RESULT_ABORT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT:
      return "OFFER_SNAPSHOT_RESULT_REJECT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_FORMAT:
      return "OFFER_SNAPSHOT_RESULT_REJECT_FORMAT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_SENDER:
      return "OFFER_SNAPSHOT_RESULT_REJECT_SENDER";
    case OfferSnapshotResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The result of applying a snapshot chunk. */
export enum ApplySnapshotChunkResult {
  /** APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN - Unknown result, abort all snapshot restoration */
  APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN = 0,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT - Chunk successfully accepted */
  APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT = 1,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_ABORT - Abort all snapshot restoration */
  APPLY_SNAPSHOT_CHUNK_RESULT_ABORT = 2,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_RETRY - Retry chunk (combine with refetch and reject) */
  APPLY_SNAPSHOT_CHUNK_RESULT_RETRY = 3,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
  APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT = 4,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT - Reject this snapshot, try others */
  APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT = 5,
  UNRECOGNIZED = -1,
}

export function applySnapshotChunkResultFromJSON(object: any): ApplySnapshotChunkResult {
  switch (object) {
    case 0:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN;
    case 1:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT;
    case 2:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_ABORT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ABORT;
    case 3:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY;
    case 4:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT;
    case 5:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplySnapshotChunkResult.UNRECOGNIZED;
  }
}

export function applySnapshotChunkResultToJSON(object: ApplySnapshotChunkResult): string {
  switch (object) {
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ABORT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_ABORT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT";
    case ApplySnapshotChunkResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ProcessProposalStatus is the status of the proposal processing. */
export enum ProcessProposalStatus {
  /** PROCESS_PROPOSAL_STATUS_UNKNOWN - Unknown */
  PROCESS_PROPOSAL_STATUS_UNKNOWN = 0,
  /** PROCESS_PROPOSAL_STATUS_ACCEPT - Accepted */
  PROCESS_PROPOSAL_STATUS_ACCEPT = 1,
  /** PROCESS_PROPOSAL_STATUS_REJECT - Rejected */
  PROCESS_PROPOSAL_STATUS_REJECT = 2,
  UNRECOGNIZED = -1,
}

export function processProposalStatusFromJSON(object: any): ProcessProposalStatus {
  switch (object) {
    case 0:
    case "PROCESS_PROPOSAL_STATUS_UNKNOWN":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_UNKNOWN;
    case 1:
    case "PROCESS_PROPOSAL_STATUS_ACCEPT":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_ACCEPT;
    case 2:
    case "PROCESS_PROPOSAL_STATUS_REJECT":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProcessProposalStatus.UNRECOGNIZED;
  }
}

export function processProposalStatusToJSON(object: ProcessProposalStatus): string {
  switch (object) {
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_UNKNOWN:
      return "PROCESS_PROPOSAL_STATUS_UNKNOWN";
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_ACCEPT:
      return "PROCESS_PROPOSAL_STATUS_ACCEPT";
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_REJECT:
      return "PROCESS_PROPOSAL_STATUS_REJECT";
    case ProcessProposalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** VerifyVoteExtensionStatus is the status of the vote extension verification. */
export enum VerifyVoteExtensionStatus {
  /** VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN - Unknown */
  VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN = 0,
  /** VERIFY_VOTE_EXTENSION_STATUS_ACCEPT - Accepted */
  VERIFY_VOTE_EXTENSION_STATUS_ACCEPT = 1,
  /**
   * VERIFY_VOTE_EXTENSION_STATUS_REJECT - Rejecting the vote extension will reject the entire precommit by the sender.
   * Incorrectly implementing this thus has liveness implications as it may affect
   * CometBFT's ability to receive 2/3+ valid votes to finalize the block.
   * Honest nodes should never be rejected.
   */
  VERIFY_VOTE_EXTENSION_STATUS_REJECT = 2,
  UNRECOGNIZED = -1,
}

export function verifyVoteExtensionStatusFromJSON(object: any): VerifyVoteExtensionStatus {
  switch (object) {
    case 0:
    case "VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN;
    case 1:
    case "VERIFY_VOTE_EXTENSION_STATUS_ACCEPT":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_ACCEPT;
    case 2:
    case "VERIFY_VOTE_EXTENSION_STATUS_REJECT":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VerifyVoteExtensionStatus.UNRECOGNIZED;
  }
}

export function verifyVoteExtensionStatusToJSON(object: VerifyVoteExtensionStatus): string {
  switch (object) {
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN:
      return "VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN";
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_ACCEPT:
      return "VERIFY_VOTE_EXTENSION_STATUS_ACCEPT";
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_REJECT:
      return "VERIFY_VOTE_EXTENSION_STATUS_REJECT";
    case VerifyVoteExtensionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The type of misbehavior committed by a validator. */
export enum MisbehaviorType {
  /** MISBEHAVIOR_TYPE_UNKNOWN - Unknown */
  MISBEHAVIOR_TYPE_UNKNOWN = 0,
  /** MISBEHAVIOR_TYPE_DUPLICATE_VOTE - Duplicate vote */
  MISBEHAVIOR_TYPE_DUPLICATE_VOTE = 1,
  /** MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK - Light client attack */
  MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK = 2,
  UNRECOGNIZED = -1,
}

export function misbehaviorTypeFromJSON(object: any): MisbehaviorType {
  switch (object) {
    case 0:
    case "MISBEHAVIOR_TYPE_UNKNOWN":
      return MisbehaviorType.MISBEHAVIOR_TYPE_UNKNOWN;
    case 1:
    case "MISBEHAVIOR_TYPE_DUPLICATE_VOTE":
      return MisbehaviorType.MISBEHAVIOR_TYPE_DUPLICATE_VOTE;
    case 2:
    case "MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK":
      return MisbehaviorType.MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MisbehaviorType.UNRECOGNIZED;
  }
}

export function misbehaviorTypeToJSON(object: MisbehaviorType): string {
  switch (object) {
    case MisbehaviorType.MISBEHAVIOR_TYPE_UNKNOWN:
      return "MISBEHAVIOR_TYPE_UNKNOWN";
    case MisbehaviorType.MISBEHAVIOR_TYPE_DUPLICATE_VOTE:
      return "MISBEHAVIOR_TYPE_DUPLICATE_VOTE";
    case MisbehaviorType.MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK:
      return "MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK";
    case MisbehaviorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request represents a request to the ABCI application. */
export interface Request {
  echo?: EchoRequest | undefined;
  flush?: FlushRequest | undefined;
  info?: InfoRequest | undefined;
  init_chain?: InitChainRequest | undefined;
  query?: QueryRequest | undefined;
  check_tx?: CheckTxRequest | undefined;
  commit?: CommitRequest | undefined;
  list_snapshots?: ListSnapshotsRequest | undefined;
  offer_snapshot?: OfferSnapshotRequest | undefined;
  load_snapshot_chunk?: LoadSnapshotChunkRequest | undefined;
  apply_snapshot_chunk?: ApplySnapshotChunkRequest | undefined;
  prepare_proposal?: PrepareProposalRequest | undefined;
  process_proposal?: ProcessProposalRequest | undefined;
  extend_vote?: ExtendVoteRequest | undefined;
  verify_vote_extension?: VerifyVoteExtensionRequest | undefined;
  finalize_block?: FinalizeBlockRequest | undefined;
}

/** EchoRequest is a request to "echo" the given string. */
export interface EchoRequest {
  message: string;
}

/** FlushRequest is a request to flush the write buffer. */
export interface FlushRequest {
}

/** InfoRequest is a request for the ABCI application version. */
export interface InfoRequest {
  version: string;
  block_version: string;
  p2p_version: string;
  abci_version: string;
}

/** InitChainRequest is a request to initialize the blockchain. */
export interface InitChainRequest {
  time: Date | undefined;
  chain_id: string;
  consensus_params: ConsensusParams | undefined;
  validators: ValidatorUpdate[];
  app_state_bytes: Uint8Array;
  initial_height: string;
}

/** QueryRequest is a request to query the application state. */
export interface QueryRequest {
  data: Uint8Array;
  path: string;
  height: string;
  prove: boolean;
}

/** CheckTxRequest is a request to check that the transaction is valid. */
export interface CheckTxRequest {
  tx: Uint8Array;
  type: CheckTxType;
}

/** CommitRequest is a request to commit the pending application state. */
export interface CommitRequest {
}

/** Request to list available snapshots. */
export interface ListSnapshotsRequest {
}

/** Request offering a snapshot to the application. */
export interface OfferSnapshotRequest {
  /** snapshot offered by peers */
  snapshot:
    | Snapshot
    | undefined;
  /** light client-verified app hash for snapshot height */
  app_hash: Uint8Array;
}

/** Request to load a snapshot chunk. */
export interface LoadSnapshotChunkRequest {
  height: string;
  format: number;
  chunk: number;
}

/** Request to apply a snapshot chunk. */
export interface ApplySnapshotChunkRequest {
  index: number;
  chunk: Uint8Array;
  sender: string;
}

/**
 * PrepareProposalRequest is a request for the ABCI application to prepare a new
 * block proposal.
 */
export interface PrepareProposalRequest {
  /** the modified transactions cannot exceed this size. */
  max_tx_bytes: string;
  /**
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   */
  txs: Uint8Array[];
  local_last_commit: ExtendedCommitInfo | undefined;
  misbehavior: Misbehavior[];
  height: string;
  time: Date | undefined;
  next_validators_hash: Uint8Array;
  /** address of the public key of the validator proposing the block. */
  proposer_address: Uint8Array;
}

/**
 * ProcessProposalRequest is a request for the ABCI application to process a proposal
 * received from another validator.
 */
export interface ProcessProposalRequest {
  txs: Uint8Array[];
  proposed_last_commit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  /** Merkle root hash of the fields of the proposed block. */
  hash: Uint8Array;
  height: string;
  time: Date | undefined;
  next_validators_hash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposer_address: Uint8Array;
}

/** ExtendVoteRequest extends a precommit vote with application-injected data. */
export interface ExtendVoteRequest {
  /** the hash of the block that this vote may be referring to */
  hash: Uint8Array;
  /** the height of the extended vote */
  height: string;
  /** info of the block that this vote may be referring to */
  time: Date | undefined;
  txs: Uint8Array[];
  proposed_last_commit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  next_validators_hash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposer_address: Uint8Array;
}

/**
 * VerifyVoteExtensionRequest is a request for the application to verify a vote extension
 * produced by a different validator.
 */
export interface VerifyVoteExtensionRequest {
  /** the hash of the block that this received vote corresponds to */
  hash: Uint8Array;
  /** the validator that signed the vote extension */
  validator_address: Uint8Array;
  height: string;
  vote_extension: Uint8Array;
}

/** FinalizeBlockRequest is a request to finalize the block. */
export interface FinalizeBlockRequest {
  txs: Uint8Array[];
  decided_last_commit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  /** Merkle root hash of the fields of the decided block. */
  hash: Uint8Array;
  height: string;
  time: Date | undefined;
  next_validators_hash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposer_address: Uint8Array;
  /** If the node is syncing/replaying blocks - target height. If not, syncing_to == height. */
  syncing_to_height: string;
}

/** Response represents a response from the ABCI application. */
export interface Response {
  exception?: ExceptionResponse | undefined;
  echo?: EchoResponse | undefined;
  flush?: FlushResponse | undefined;
  info?: InfoResponse | undefined;
  init_chain?: InitChainResponse | undefined;
  query?: QueryResponse | undefined;
  check_tx?: CheckTxResponse | undefined;
  commit?: CommitResponse | undefined;
  list_snapshots?: ListSnapshotsResponse | undefined;
  offer_snapshot?: OfferSnapshotResponse | undefined;
  load_snapshot_chunk?: LoadSnapshotChunkResponse | undefined;
  apply_snapshot_chunk?: ApplySnapshotChunkResponse | undefined;
  prepare_proposal?: PrepareProposalResponse | undefined;
  process_proposal?: ProcessProposalResponse | undefined;
  extend_vote?: ExtendVoteResponse | undefined;
  verify_vote_extension?: VerifyVoteExtensionResponse | undefined;
  finalize_block?: FinalizeBlockResponse | undefined;
}

/** nondeterministic */
export interface ExceptionResponse {
  error: string;
}

/** EchoResponse indicates that the connection is still alive. */
export interface EchoResponse {
  message: string;
}

/** FlushResponse indicates that the write buffer was flushed. */
export interface FlushResponse {
}

/** InfoResponse contains the ABCI application version information. */
export interface InfoResponse {
  data: string;
  version: string;
  app_version: string;
  last_block_height: string;
  last_block_app_hash: Uint8Array;
  lane_priorities: { [key: string]: number };
  default_lane: string;
}

export interface InfoResponse_LanePrioritiesEntry {
  key: string;
  value: number;
}

/**
 * InitChainResponse contains the ABCI application's hash and updates to the
 * validator set and/or the consensus params, if any.
 */
export interface InitChainResponse {
  consensus_params: ConsensusParams | undefined;
  validators: ValidatorUpdate[];
  app_hash: Uint8Array;
}

/** QueryResponse contains the ABCI application data along with a proof. */
export interface QueryResponse {
  code: number;
  /** bytes data = 2; // use "value" instead. */
  log: string;
  /** nondeterministic */
  info: string;
  index: string;
  key: Uint8Array;
  value: Uint8Array;
  proof_ops: ProofOps | undefined;
  height: string;
  codespace: string;
}

/**
 * CheckTxResponse shows if the transaction was deemed valid by the ABCI
 * application.
 */
export interface CheckTxResponse {
  code: number;
  data: Uint8Array;
  /** nondeterministic */
  log: string;
  /** nondeterministic */
  info: string;
  gas_wanted: string;
  gas_used: string;
  /** nondeterministic */
  events: Event[];
  codespace: string;
  lane_id: string;
}

/** CommitResponse indicates how much blocks should CometBFT retain. */
export interface CommitResponse {
  retain_height: string;
}

/** ListSnapshotsResponse contains the list of snapshots. */
export interface ListSnapshotsResponse {
  snapshots: Snapshot[];
}

/**
 * OfferSnapshotResponse indicates the ABCI application decision whenever to
 * provide a snapshot to the requester or not.
 */
export interface OfferSnapshotResponse {
  result: OfferSnapshotResult;
}

/** LoadSnapshotChunkResponse returns a snapshot's chunk. */
export interface LoadSnapshotChunkResponse {
  chunk: Uint8Array;
}

/** ApplySnapshotChunkResponse returns a result of applying the specified chunk. */
export interface ApplySnapshotChunkResponse {
  result: ApplySnapshotChunkResult;
  /** Chunks to refetch and reapply */
  refetch_chunks: number[];
  /** Chunk senders to reject and ban */
  reject_senders: string[];
}

/** PrepareProposalResponse contains a list of transactions, which will form a block. */
export interface PrepareProposalResponse {
  txs: Uint8Array[];
}

/**
 * ProcessProposalResponse indicates the ABCI application's decision whenever
 * the given proposal should be accepted or not.
 */
export interface ProcessProposalResponse {
  status: ProcessProposalStatus;
}

/**
 * ExtendVoteResponse contains the vote extension that the application would like to
 * attach to its next precommit vote.
 */
export interface ExtendVoteResponse {
  vote_extension: Uint8Array;
}

/**
 * VerifyVoteExtensionResponse indicates the ABCI application's decision
 * whenever the vote extension should be accepted or not.
 */
export interface VerifyVoteExtensionResponse {
  status: VerifyVoteExtensionStatus;
}

/** FinalizeBlockResponse contains the result of executing the block. */
export interface FinalizeBlockResponse {
  /** set of block events emitted as part of executing the block */
  events: Event[];
  /**
   * the result of executing each transaction including the events
   * the particular transaction emitted. This should match the order
   * of the transactions delivered in the block itself
   */
  tx_results: ExecTxResult[];
  /** a list of updates to the validator set. These will reflect the validator set at current height + 2. */
  validator_updates: ValidatorUpdate[];
  /** updates to the consensus params, if any. */
  consensus_param_updates:
    | ConsensusParams
    | undefined;
  /**
   * app_hash is the hash of the applications' state which is used to confirm
   * that execution of the transactions was deterministic.
   * It is up to the application to decide which algorithm to use.
   */
  app_hash: Uint8Array;
  /**
   * delay between the time when this block is committed and the next height is started.
   * previously `timeout_commit` in config.toml
   */
  next_block_delay: Duration | undefined;
}

/** CommitInfo contains votes for the particular round. */
export interface CommitInfo {
  round: number;
  votes: VoteInfo[];
}

/**
 * ExtendedCommitInfo is similar to CommitInfo except that it is only used in
 * the PrepareProposal request such that Tendermint can provide vote extensions
 * to the application.
 */
export interface ExtendedCommitInfo {
  /** The round at which the block proposer decided in the previous height. */
  round: number;
  /**
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   */
  votes: ExtendedVoteInfo[];
}

/**
 * Event allows application developers to attach additional information to
 * ResponseFinalizeBlock and ResponseCheckTx.
 * Up to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,
 * and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 */
export interface Event {
  type: string;
  attributes: EventAttribute[];
}

/** EventAttribute is a single key-value pair, associated with an event. */
export interface EventAttribute {
  key: string;
  value: string;
  /** nondeterministic */
  index: boolean;
}

/**
 * ExecTxResult contains results of executing one individual transaction.
 *
 * * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 */
export interface ExecTxResult {
  code: number;
  data: Uint8Array;
  /** nondeterministic */
  log: string;
  /** nondeterministic */
  info: string;
  gas_wanted: string;
  gas_used: string;
  /** nondeterministic */
  events: Event[];
  codespace: string;
}

/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 */
export interface TxResult {
  height: string;
  index: number;
  tx: Uint8Array;
  result: ExecTxResult | undefined;
}

/** Validator in the validator set. */
export interface Validator {
  /** The first 20 bytes of SHA256(public key) */
  address: Uint8Array;
  /** PubKey pub_key = 2 [(gogoproto.nullable)=false]; */
  power: string;
}

/** ValidatorUpdate is a singular update to a validator set. */
export interface ValidatorUpdate {
  power: string;
  pub_key_bytes: Uint8Array;
  pub_key_type: string;
}

/** VoteInfo contains the information about the vote. */
export interface VoteInfo {
  validator: Validator | undefined;
  block_id_flag: BlockIDFlag;
}

/** ExtendedVoteInfo extends VoteInfo with the vote extensions (non-deterministic). */
export interface ExtendedVoteInfo {
  /** The validator that sent the vote. */
  validator:
    | Validator
    | undefined;
  /** Non-deterministic extension provided by the sending validator's application. */
  vote_extension: Uint8Array;
  /** Vote extension signature created by CometBFT */
  extension_signature: Uint8Array;
  /** block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all */
  block_id_flag: BlockIDFlag;
}

/** Misbehavior is a type of misbehavior committed by a validator. */
export interface Misbehavior {
  type: MisbehaviorType;
  /** The offending validator */
  validator:
    | Validator
    | undefined;
  /** The height when the offense occurred */
  height: string;
  /** The corresponding time where the offense occurred */
  time:
    | Date
    | undefined;
  /**
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   */
  total_voting_power: string;
}

/** Snapshot of the ABCI application state. */
export interface Snapshot {
  /** The height at which the snapshot was taken */
  height: string;
  /** The application-specific snapshot format */
  format: number;
  /** Number of chunks in the snapshot */
  chunks: number;
  /** Arbitrary snapshot hash, equal only if identical */
  hash: Uint8Array;
  /** Arbitrary application metadata */
  metadata: Uint8Array;
}

function createBaseRequest(): Request {
  return {
    echo: undefined,
    flush: undefined,
    info: undefined,
    init_chain: undefined,
    query: undefined,
    check_tx: undefined,
    commit: undefined,
    list_snapshots: undefined,
    offer_snapshot: undefined,
    load_snapshot_chunk: undefined,
    apply_snapshot_chunk: undefined,
    prepare_proposal: undefined,
    process_proposal: undefined,
    extend_vote: undefined,
    verify_vote_extension: undefined,
    finalize_block: undefined,
  };
}

export const Request = {
  $type: "cometbft.abci.v1.Request" as const,

  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.echo !== undefined) {
      EchoRequest.encode(message.echo, writer.uint32(10).fork()).ldelim();
    }
    if (message.flush !== undefined) {
      FlushRequest.encode(message.flush, writer.uint32(18).fork()).ldelim();
    }
    if (message.info !== undefined) {
      InfoRequest.encode(message.info, writer.uint32(26).fork()).ldelim();
    }
    if (message.init_chain !== undefined) {
      InitChainRequest.encode(message.init_chain, writer.uint32(42).fork()).ldelim();
    }
    if (message.query !== undefined) {
      QueryRequest.encode(message.query, writer.uint32(50).fork()).ldelim();
    }
    if (message.check_tx !== undefined) {
      CheckTxRequest.encode(message.check_tx, writer.uint32(66).fork()).ldelim();
    }
    if (message.commit !== undefined) {
      CommitRequest.encode(message.commit, writer.uint32(90).fork()).ldelim();
    }
    if (message.list_snapshots !== undefined) {
      ListSnapshotsRequest.encode(message.list_snapshots, writer.uint32(98).fork()).ldelim();
    }
    if (message.offer_snapshot !== undefined) {
      OfferSnapshotRequest.encode(message.offer_snapshot, writer.uint32(106).fork()).ldelim();
    }
    if (message.load_snapshot_chunk !== undefined) {
      LoadSnapshotChunkRequest.encode(message.load_snapshot_chunk, writer.uint32(114).fork()).ldelim();
    }
    if (message.apply_snapshot_chunk !== undefined) {
      ApplySnapshotChunkRequest.encode(message.apply_snapshot_chunk, writer.uint32(122).fork()).ldelim();
    }
    if (message.prepare_proposal !== undefined) {
      PrepareProposalRequest.encode(message.prepare_proposal, writer.uint32(130).fork()).ldelim();
    }
    if (message.process_proposal !== undefined) {
      ProcessProposalRequest.encode(message.process_proposal, writer.uint32(138).fork()).ldelim();
    }
    if (message.extend_vote !== undefined) {
      ExtendVoteRequest.encode(message.extend_vote, writer.uint32(146).fork()).ldelim();
    }
    if (message.verify_vote_extension !== undefined) {
      VerifyVoteExtensionRequest.encode(message.verify_vote_extension, writer.uint32(154).fork()).ldelim();
    }
    if (message.finalize_block !== undefined) {
      FinalizeBlockRequest.encode(message.finalize_block, writer.uint32(162).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.echo = EchoRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flush = FlushRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.info = InfoRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.init_chain = InitChainRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.query = QueryRequest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.check_tx = CheckTxRequest.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.commit = CommitRequest.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.list_snapshots = ListSnapshotsRequest.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.offer_snapshot = OfferSnapshotRequest.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.load_snapshot_chunk = LoadSnapshotChunkRequest.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.apply_snapshot_chunk = ApplySnapshotChunkRequest.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.prepare_proposal = PrepareProposalRequest.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.process_proposal = ProcessProposalRequest.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.extend_vote = ExtendVoteRequest.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.verify_vote_extension = VerifyVoteExtensionRequest.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.finalize_block = FinalizeBlockRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      echo: isSet(object.echo) ? EchoRequest.fromJSON(object.echo) : undefined,
      flush: isSet(object.flush) ? FlushRequest.fromJSON(object.flush) : undefined,
      info: isSet(object.info) ? InfoRequest.fromJSON(object.info) : undefined,
      init_chain: isSet(object.init_chain) ? InitChainRequest.fromJSON(object.init_chain) : undefined,
      query: isSet(object.query) ? QueryRequest.fromJSON(object.query) : undefined,
      check_tx: isSet(object.check_tx) ? CheckTxRequest.fromJSON(object.check_tx) : undefined,
      commit: isSet(object.commit) ? CommitRequest.fromJSON(object.commit) : undefined,
      list_snapshots: isSet(object.list_snapshots) ? ListSnapshotsRequest.fromJSON(object.list_snapshots) : undefined,
      offer_snapshot: isSet(object.offer_snapshot) ? OfferSnapshotRequest.fromJSON(object.offer_snapshot) : undefined,
      load_snapshot_chunk: isSet(object.load_snapshot_chunk)
        ? LoadSnapshotChunkRequest.fromJSON(object.load_snapshot_chunk)
        : undefined,
      apply_snapshot_chunk: isSet(object.apply_snapshot_chunk)
        ? ApplySnapshotChunkRequest.fromJSON(object.apply_snapshot_chunk)
        : undefined,
      prepare_proposal: isSet(object.prepare_proposal)
        ? PrepareProposalRequest.fromJSON(object.prepare_proposal)
        : undefined,
      process_proposal: isSet(object.process_proposal)
        ? ProcessProposalRequest.fromJSON(object.process_proposal)
        : undefined,
      extend_vote: isSet(object.extend_vote) ? ExtendVoteRequest.fromJSON(object.extend_vote) : undefined,
      verify_vote_extension: isSet(object.verify_vote_extension)
        ? VerifyVoteExtensionRequest.fromJSON(object.verify_vote_extension)
        : undefined,
      finalize_block: isSet(object.finalize_block) ? FinalizeBlockRequest.fromJSON(object.finalize_block) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.echo !== undefined) {
      obj.echo = EchoRequest.toJSON(message.echo);
    }
    if (message.flush !== undefined) {
      obj.flush = FlushRequest.toJSON(message.flush);
    }
    if (message.info !== undefined) {
      obj.info = InfoRequest.toJSON(message.info);
    }
    if (message.init_chain !== undefined) {
      obj.init_chain = InitChainRequest.toJSON(message.init_chain);
    }
    if (message.query !== undefined) {
      obj.query = QueryRequest.toJSON(message.query);
    }
    if (message.check_tx !== undefined) {
      obj.check_tx = CheckTxRequest.toJSON(message.check_tx);
    }
    if (message.commit !== undefined) {
      obj.commit = CommitRequest.toJSON(message.commit);
    }
    if (message.list_snapshots !== undefined) {
      obj.list_snapshots = ListSnapshotsRequest.toJSON(message.list_snapshots);
    }
    if (message.offer_snapshot !== undefined) {
      obj.offer_snapshot = OfferSnapshotRequest.toJSON(message.offer_snapshot);
    }
    if (message.load_snapshot_chunk !== undefined) {
      obj.load_snapshot_chunk = LoadSnapshotChunkRequest.toJSON(message.load_snapshot_chunk);
    }
    if (message.apply_snapshot_chunk !== undefined) {
      obj.apply_snapshot_chunk = ApplySnapshotChunkRequest.toJSON(message.apply_snapshot_chunk);
    }
    if (message.prepare_proposal !== undefined) {
      obj.prepare_proposal = PrepareProposalRequest.toJSON(message.prepare_proposal);
    }
    if (message.process_proposal !== undefined) {
      obj.process_proposal = ProcessProposalRequest.toJSON(message.process_proposal);
    }
    if (message.extend_vote !== undefined) {
      obj.extend_vote = ExtendVoteRequest.toJSON(message.extend_vote);
    }
    if (message.verify_vote_extension !== undefined) {
      obj.verify_vote_extension = VerifyVoteExtensionRequest.toJSON(message.verify_vote_extension);
    }
    if (message.finalize_block !== undefined) {
      obj.finalize_block = FinalizeBlockRequest.toJSON(message.finalize_block);
    }
    return obj;
  },

  create(base?: DeepPartial<Request>): Request {
    return Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Request>): Request {
    const message = createBaseRequest();
    message.echo = (object.echo !== undefined && object.echo !== null)
      ? EchoRequest.fromPartial(object.echo)
      : undefined;
    message.flush = (object.flush !== undefined && object.flush !== null)
      ? FlushRequest.fromPartial(object.flush)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null)
      ? InfoRequest.fromPartial(object.info)
      : undefined;
    message.init_chain = (object.init_chain !== undefined && object.init_chain !== null)
      ? InitChainRequest.fromPartial(object.init_chain)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null)
      ? QueryRequest.fromPartial(object.query)
      : undefined;
    message.check_tx = (object.check_tx !== undefined && object.check_tx !== null)
      ? CheckTxRequest.fromPartial(object.check_tx)
      : undefined;
    message.commit = (object.commit !== undefined && object.commit !== null)
      ? CommitRequest.fromPartial(object.commit)
      : undefined;
    message.list_snapshots = (object.list_snapshots !== undefined && object.list_snapshots !== null)
      ? ListSnapshotsRequest.fromPartial(object.list_snapshots)
      : undefined;
    message.offer_snapshot = (object.offer_snapshot !== undefined && object.offer_snapshot !== null)
      ? OfferSnapshotRequest.fromPartial(object.offer_snapshot)
      : undefined;
    message.load_snapshot_chunk = (object.load_snapshot_chunk !== undefined && object.load_snapshot_chunk !== null)
      ? LoadSnapshotChunkRequest.fromPartial(object.load_snapshot_chunk)
      : undefined;
    message.apply_snapshot_chunk = (object.apply_snapshot_chunk !== undefined && object.apply_snapshot_chunk !== null)
      ? ApplySnapshotChunkRequest.fromPartial(object.apply_snapshot_chunk)
      : undefined;
    message.prepare_proposal = (object.prepare_proposal !== undefined && object.prepare_proposal !== null)
      ? PrepareProposalRequest.fromPartial(object.prepare_proposal)
      : undefined;
    message.process_proposal = (object.process_proposal !== undefined && object.process_proposal !== null)
      ? ProcessProposalRequest.fromPartial(object.process_proposal)
      : undefined;
    message.extend_vote = (object.extend_vote !== undefined && object.extend_vote !== null)
      ? ExtendVoteRequest.fromPartial(object.extend_vote)
      : undefined;
    message.verify_vote_extension =
      (object.verify_vote_extension !== undefined && object.verify_vote_extension !== null)
        ? VerifyVoteExtensionRequest.fromPartial(object.verify_vote_extension)
        : undefined;
    message.finalize_block = (object.finalize_block !== undefined && object.finalize_block !== null)
      ? FinalizeBlockRequest.fromPartial(object.finalize_block)
      : undefined;
    return message;
  },
};

function createBaseEchoRequest(): EchoRequest {
  return { message: "" };
}

export const EchoRequest = {
  $type: "cometbft.abci.v1.EchoRequest" as const,

  encode(message: EchoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoRequest): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<EchoRequest>): EchoRequest {
    return EchoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EchoRequest>): EchoRequest {
    const message = createBaseEchoRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFlushRequest(): FlushRequest {
  return {};
}

export const FlushRequest = {
  $type: "cometbft.abci.v1.FlushRequest" as const,

  encode(_: FlushRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FlushRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlushRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlushRequest {
    return {};
  },

  toJSON(_: FlushRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FlushRequest>): FlushRequest {
    return FlushRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FlushRequest>): FlushRequest {
    const message = createBaseFlushRequest();
    return message;
  },
};

function createBaseInfoRequest(): InfoRequest {
  return { version: "", block_version: "0", p2p_version: "0", abci_version: "" };
}

export const InfoRequest = {
  $type: "cometbft.abci.v1.InfoRequest" as const,

  encode(message: InfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.block_version !== "0") {
      writer.uint32(16).uint64(message.block_version);
    }
    if (message.p2p_version !== "0") {
      writer.uint32(24).uint64(message.p2p_version);
    }
    if (message.abci_version !== "") {
      writer.uint32(34).string(message.abci_version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InfoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.block_version = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.p2p_version = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.abci_version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoRequest {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      block_version: isSet(object.block_version) ? globalThis.String(object.block_version) : "0",
      p2p_version: isSet(object.p2p_version) ? globalThis.String(object.p2p_version) : "0",
      abci_version: isSet(object.abci_version) ? globalThis.String(object.abci_version) : "",
    };
  },

  toJSON(message: InfoRequest): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.block_version !== undefined) {
      obj.block_version = message.block_version;
    }
    if (message.p2p_version !== undefined) {
      obj.p2p_version = message.p2p_version;
    }
    if (message.abci_version !== undefined) {
      obj.abci_version = message.abci_version;
    }
    return obj;
  },

  create(base?: DeepPartial<InfoRequest>): InfoRequest {
    return InfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InfoRequest>): InfoRequest {
    const message = createBaseInfoRequest();
    message.version = object.version ?? "";
    message.block_version = object.block_version ?? "0";
    message.p2p_version = object.p2p_version ?? "0";
    message.abci_version = object.abci_version ?? "";
    return message;
  },
};

function createBaseInitChainRequest(): InitChainRequest {
  return {
    time: undefined,
    chain_id: "",
    consensus_params: undefined,
    validators: [],
    app_state_bytes: new Uint8Array(0),
    initial_height: "0",
  };
}

export const InitChainRequest = {
  $type: "cometbft.abci.v1.InitChainRequest" as const,

  encode(message: InitChainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();
    }
    if (message.chain_id !== "") {
      writer.uint32(18).string(message.chain_id);
    }
    if (message.consensus_params !== undefined) {
      ConsensusParams.encode(message.consensus_params, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.app_state_bytes.length !== 0) {
      writer.uint32(42).bytes(message.app_state_bytes);
    }
    if (message.initial_height !== "0") {
      writer.uint32(48).int64(message.initial_height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitChainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.consensus_params = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.app_state_bytes = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.initial_height = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitChainRequest {
    return {
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      chain_id: isSet(object.chain_id) ? globalThis.String(object.chain_id) : "",
      consensus_params: isSet(object.consensus_params) ? ConsensusParams.fromJSON(object.consensus_params) : undefined,
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      app_state_bytes: isSet(object.app_state_bytes) ? bytesFromBase64(object.app_state_bytes) : new Uint8Array(0),
      initial_height: isSet(object.initial_height) ? globalThis.String(object.initial_height) : "0",
    };
  },

  toJSON(message: InitChainRequest): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.chain_id !== undefined) {
      obj.chain_id = message.chain_id;
    }
    if (message.consensus_params !== undefined) {
      obj.consensus_params = ConsensusParams.toJSON(message.consensus_params);
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.app_state_bytes !== undefined) {
      obj.app_state_bytes = base64FromBytes(message.app_state_bytes);
    }
    if (message.initial_height !== undefined) {
      obj.initial_height = message.initial_height;
    }
    return obj;
  },

  create(base?: DeepPartial<InitChainRequest>): InitChainRequest {
    return InitChainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitChainRequest>): InitChainRequest {
    const message = createBaseInitChainRequest();
    message.time = object.time ?? undefined;
    message.chain_id = object.chain_id ?? "";
    message.consensus_params = (object.consensus_params !== undefined && object.consensus_params !== null)
      ? ConsensusParams.fromPartial(object.consensus_params)
      : undefined;
    message.validators = object.validators?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.app_state_bytes = object.app_state_bytes ?? new Uint8Array(0);
    message.initial_height = object.initial_height ?? "0";
    return message;
  },
};

function createBaseQueryRequest(): QueryRequest {
  return { data: new Uint8Array(0), path: "", height: "0", prove: false };
}

export const QueryRequest = {
  $type: "cometbft.abci.v1.QueryRequest" as const,

  encode(message: QueryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.height !== "0") {
      writer.uint32(24).int64(message.height);
    }
    if (message.prove !== false) {
      writer.uint32(32).bool(message.prove);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.prove = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequest {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      prove: isSet(object.prove) ? globalThis.Boolean(object.prove) : false,
    };
  },

  toJSON(message: QueryRequest): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.prove !== undefined) {
      obj.prove = message.prove;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRequest>): QueryRequest {
    return QueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRequest>): QueryRequest {
    const message = createBaseQueryRequest();
    message.data = object.data ?? new Uint8Array(0);
    message.path = object.path ?? "";
    message.height = object.height ?? "0";
    message.prove = object.prove ?? false;
    return message;
  },
};

function createBaseCheckTxRequest(): CheckTxRequest {
  return { tx: new Uint8Array(0), type: 0 };
}

export const CheckTxRequest = {
  $type: "cometbft.abci.v1.CheckTxRequest" as const,

  encode(message: CheckTxRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tx.length !== 0) {
      writer.uint32(10).bytes(message.tx);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CheckTxRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTxRequest {
    return {
      tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0),
      type: isSet(object.type) ? checkTxTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: CheckTxRequest): unknown {
    const obj: any = {};
    if (message.tx !== undefined) {
      obj.tx = base64FromBytes(message.tx);
    }
    if (message.type !== undefined) {
      obj.type = checkTxTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckTxRequest>): CheckTxRequest {
    return CheckTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckTxRequest>): CheckTxRequest {
    const message = createBaseCheckTxRequest();
    message.tx = object.tx ?? new Uint8Array(0);
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseCommitRequest(): CommitRequest {
  return {};
}

export const CommitRequest = {
  $type: "cometbft.abci.v1.CommitRequest" as const,

  encode(_: CommitRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommitRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CommitRequest {
    return {};
  },

  toJSON(_: CommitRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CommitRequest>): CommitRequest {
    return CommitRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CommitRequest>): CommitRequest {
    const message = createBaseCommitRequest();
    return message;
  },
};

function createBaseListSnapshotsRequest(): ListSnapshotsRequest {
  return {};
}

export const ListSnapshotsRequest = {
  $type: "cometbft.abci.v1.ListSnapshotsRequest" as const,

  encode(_: ListSnapshotsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSnapshotsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSnapshotsRequest {
    return {};
  },

  toJSON(_: ListSnapshotsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    return ListSnapshotsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    const message = createBaseListSnapshotsRequest();
    return message;
  },
};

function createBaseOfferSnapshotRequest(): OfferSnapshotRequest {
  return { snapshot: undefined, app_hash: new Uint8Array(0) };
}

export const OfferSnapshotRequest = {
  $type: "cometbft.abci.v1.OfferSnapshotRequest" as const,

  encode(message: OfferSnapshotRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(18).bytes(message.app_hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OfferSnapshotRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfferSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfferSnapshotRequest {
    return {
      snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined,
      app_hash: isSet(object.app_hash) ? bytesFromBase64(object.app_hash) : new Uint8Array(0),
    };
  },

  toJSON(message: OfferSnapshotRequest): unknown {
    const obj: any = {};
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    if (message.app_hash !== undefined) {
      obj.app_hash = base64FromBytes(message.app_hash);
    }
    return obj;
  },

  create(base?: DeepPartial<OfferSnapshotRequest>): OfferSnapshotRequest {
    return OfferSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfferSnapshotRequest>): OfferSnapshotRequest {
    const message = createBaseOfferSnapshotRequest();
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseLoadSnapshotChunkRequest(): LoadSnapshotChunkRequest {
  return { height: "0", format: 0, chunk: 0 };
}

export const LoadSnapshotChunkRequest = {
  $type: "cometbft.abci.v1.LoadSnapshotChunkRequest" as const,

  encode(message: LoadSnapshotChunkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunk !== 0) {
      writer.uint32(24).uint32(message.chunk);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoadSnapshotChunkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadSnapshotChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.format = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.chunk = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadSnapshotChunkRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      format: isSet(object.format) ? globalThis.Number(object.format) : 0,
      chunk: isSet(object.chunk) ? globalThis.Number(object.chunk) : 0,
    };
  },

  toJSON(message: LoadSnapshotChunkRequest): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.format !== undefined) {
      obj.format = Math.round(message.format);
    }
    if (message.chunk !== undefined) {
      obj.chunk = Math.round(message.chunk);
    }
    return obj;
  },

  create(base?: DeepPartial<LoadSnapshotChunkRequest>): LoadSnapshotChunkRequest {
    return LoadSnapshotChunkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoadSnapshotChunkRequest>): LoadSnapshotChunkRequest {
    const message = createBaseLoadSnapshotChunkRequest();
    message.height = object.height ?? "0";
    message.format = object.format ?? 0;
    message.chunk = object.chunk ?? 0;
    return message;
  },
};

function createBaseApplySnapshotChunkRequest(): ApplySnapshotChunkRequest {
  return { index: 0, chunk: new Uint8Array(0), sender: "" };
}

export const ApplySnapshotChunkRequest = {
  $type: "cometbft.abci.v1.ApplySnapshotChunkRequest" as const,

  encode(message: ApplySnapshotChunkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.chunk.length !== 0) {
      writer.uint32(18).bytes(message.chunk);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ApplySnapshotChunkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplySnapshotChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplySnapshotChunkRequest {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: ApplySnapshotChunkRequest): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.chunk !== undefined) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    return obj;
  },

  create(base?: DeepPartial<ApplySnapshotChunkRequest>): ApplySnapshotChunkRequest {
    return ApplySnapshotChunkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplySnapshotChunkRequest>): ApplySnapshotChunkRequest {
    const message = createBaseApplySnapshotChunkRequest();
    message.index = object.index ?? 0;
    message.chunk = object.chunk ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBasePrepareProposalRequest(): PrepareProposalRequest {
  return {
    max_tx_bytes: "0",
    txs: [],
    local_last_commit: undefined,
    misbehavior: [],
    height: "0",
    time: undefined,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0),
  };
}

export const PrepareProposalRequest = {
  $type: "cometbft.abci.v1.PrepareProposalRequest" as const,

  encode(message: PrepareProposalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.max_tx_bytes !== "0") {
      writer.uint32(8).int64(message.max_tx_bytes);
    }
    for (const v of message.txs) {
      writer.uint32(18).bytes(v!);
    }
    if (message.local_last_commit !== undefined) {
      ExtendedCommitInfo.encode(message.local_last_commit, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.height !== "0") {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).ldelim();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrepareProposalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrepareProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.max_tx_bytes = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.local_last_commit = ExtendedCommitInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrepareProposalRequest {
    return {
      max_tx_bytes: isSet(object.max_tx_bytes) ? globalThis.String(object.max_tx_bytes) : "0",
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      local_last_commit: isSet(object.local_last_commit)
        ? ExtendedCommitInfo.fromJSON(object.local_last_commit)
        : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      next_validators_hash: isSet(object.next_validators_hash)
        ? bytesFromBase64(object.next_validators_hash)
        : new Uint8Array(0),
      proposer_address: isSet(object.proposer_address) ? bytesFromBase64(object.proposer_address) : new Uint8Array(0),
    };
  },

  toJSON(message: PrepareProposalRequest): unknown {
    const obj: any = {};
    if (message.max_tx_bytes !== undefined) {
      obj.max_tx_bytes = message.max_tx_bytes;
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.local_last_commit !== undefined) {
      obj.local_last_commit = ExtendedCommitInfo.toJSON(message.local_last_commit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash !== undefined) {
      obj.next_validators_hash = base64FromBytes(message.next_validators_hash);
    }
    if (message.proposer_address !== undefined) {
      obj.proposer_address = base64FromBytes(message.proposer_address);
    }
    return obj;
  },

  create(base?: DeepPartial<PrepareProposalRequest>): PrepareProposalRequest {
    return PrepareProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrepareProposalRequest>): PrepareProposalRequest {
    const message = createBasePrepareProposalRequest();
    message.max_tx_bytes = object.max_tx_bytes ?? "0";
    message.txs = object.txs?.map((e) => e) || [];
    message.local_last_commit = (object.local_last_commit !== undefined && object.local_last_commit !== null)
      ? ExtendedCommitInfo.fromPartial(object.local_last_commit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.height = object.height ?? "0";
    message.time = object.time ?? undefined;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProcessProposalRequest(): ProcessProposalRequest {
  return {
    txs: [],
    proposed_last_commit: undefined,
    misbehavior: [],
    hash: new Uint8Array(0),
    height: "0",
    time: undefined,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0),
  };
}

export const ProcessProposalRequest = {
  $type: "cometbft.abci.v1.ProcessProposalRequest" as const,

  encode(message: ProcessProposalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    if (message.proposed_last_commit !== undefined) {
      CommitInfo.encode(message.proposed_last_commit, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== "0") {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).ldelim();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProcessProposalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.proposed_last_commit = CommitInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessProposalRequest {
    return {
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      proposed_last_commit: isSet(object.proposed_last_commit)
        ? CommitInfo.fromJSON(object.proposed_last_commit)
        : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      next_validators_hash: isSet(object.next_validators_hash)
        ? bytesFromBase64(object.next_validators_hash)
        : new Uint8Array(0),
      proposer_address: isSet(object.proposer_address) ? bytesFromBase64(object.proposer_address) : new Uint8Array(0),
    };
  },

  toJSON(message: ProcessProposalRequest): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.proposed_last_commit !== undefined) {
      obj.proposed_last_commit = CommitInfo.toJSON(message.proposed_last_commit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash !== undefined) {
      obj.next_validators_hash = base64FromBytes(message.next_validators_hash);
    }
    if (message.proposer_address !== undefined) {
      obj.proposer_address = base64FromBytes(message.proposer_address);
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessProposalRequest>): ProcessProposalRequest {
    return ProcessProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessProposalRequest>): ProcessProposalRequest {
    const message = createBaseProcessProposalRequest();
    message.txs = object.txs?.map((e) => e) || [];
    message.proposed_last_commit = (object.proposed_last_commit !== undefined && object.proposed_last_commit !== null)
      ? CommitInfo.fromPartial(object.proposed_last_commit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? "0";
    message.time = object.time ?? undefined;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  },
};

function createBaseExtendVoteRequest(): ExtendVoteRequest {
  return {
    hash: new Uint8Array(0),
    height: "0",
    time: undefined,
    txs: [],
    proposed_last_commit: undefined,
    misbehavior: [],
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0),
  };
}

export const ExtendVoteRequest = {
  $type: "cometbft.abci.v1.ExtendVoteRequest" as const,

  encode(message: ExtendVoteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.height !== "0") {
      writer.uint32(16).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.txs) {
      writer.uint32(34).bytes(v!);
    }
    if (message.proposed_last_commit !== undefined) {
      CommitInfo.encode(message.proposed_last_commit, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExtendVoteRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendVoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proposed_last_commit = CommitInfo.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendVoteRequest {
    return {
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      proposed_last_commit: isSet(object.proposed_last_commit)
        ? CommitInfo.fromJSON(object.proposed_last_commit)
        : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      next_validators_hash: isSet(object.next_validators_hash)
        ? bytesFromBase64(object.next_validators_hash)
        : new Uint8Array(0),
      proposer_address: isSet(object.proposer_address) ? bytesFromBase64(object.proposer_address) : new Uint8Array(0),
    };
  },

  toJSON(message: ExtendVoteRequest): unknown {
    const obj: any = {};
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.proposed_last_commit !== undefined) {
      obj.proposed_last_commit = CommitInfo.toJSON(message.proposed_last_commit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.next_validators_hash !== undefined) {
      obj.next_validators_hash = base64FromBytes(message.next_validators_hash);
    }
    if (message.proposer_address !== undefined) {
      obj.proposer_address = base64FromBytes(message.proposer_address);
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendVoteRequest>): ExtendVoteRequest {
    return ExtendVoteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendVoteRequest>): ExtendVoteRequest {
    const message = createBaseExtendVoteRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? "0";
    message.time = object.time ?? undefined;
    message.txs = object.txs?.map((e) => e) || [];
    message.proposed_last_commit = (object.proposed_last_commit !== undefined && object.proposed_last_commit !== null)
      ? CommitInfo.fromPartial(object.proposed_last_commit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifyVoteExtensionRequest(): VerifyVoteExtensionRequest {
  return {
    hash: new Uint8Array(0),
    validator_address: new Uint8Array(0),
    height: "0",
    vote_extension: new Uint8Array(0),
  };
}

export const VerifyVoteExtensionRequest = {
  $type: "cometbft.abci.v1.VerifyVoteExtensionRequest" as const,

  encode(message: VerifyVoteExtensionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.validator_address.length !== 0) {
      writer.uint32(18).bytes(message.validator_address);
    }
    if (message.height !== "0") {
      writer.uint32(24).int64(message.height);
    }
    if (message.vote_extension.length !== 0) {
      writer.uint32(34).bytes(message.vote_extension);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VerifyVoteExtensionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyVoteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validator_address = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vote_extension = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyVoteExtensionRequest {
    return {
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      validator_address: isSet(object.validator_address)
        ? bytesFromBase64(object.validator_address)
        : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      vote_extension: isSet(object.vote_extension) ? bytesFromBase64(object.vote_extension) : new Uint8Array(0),
    };
  },

  toJSON(message: VerifyVoteExtensionRequest): unknown {
    const obj: any = {};
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.validator_address !== undefined) {
      obj.validator_address = base64FromBytes(message.validator_address);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.vote_extension !== undefined) {
      obj.vote_extension = base64FromBytes(message.vote_extension);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyVoteExtensionRequest>): VerifyVoteExtensionRequest {
    return VerifyVoteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyVoteExtensionRequest>): VerifyVoteExtensionRequest {
    const message = createBaseVerifyVoteExtensionRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    message.validator_address = object.validator_address ?? new Uint8Array(0);
    message.height = object.height ?? "0";
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFinalizeBlockRequest(): FinalizeBlockRequest {
  return {
    txs: [],
    decided_last_commit: undefined,
    misbehavior: [],
    hash: new Uint8Array(0),
    height: "0",
    time: undefined,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0),
    syncing_to_height: "0",
  };
}

export const FinalizeBlockRequest = {
  $type: "cometbft.abci.v1.FinalizeBlockRequest" as const,

  encode(message: FinalizeBlockRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    if (message.decided_last_commit !== undefined) {
      CommitInfo.encode(message.decided_last_commit, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== "0") {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).ldelim();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    if (message.syncing_to_height !== "0") {
      writer.uint32(72).int64(message.syncing_to_height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FinalizeBlockRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalizeBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.decided_last_commit = CommitInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.proposer_address = reader.bytes();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.syncing_to_height = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalizeBlockRequest {
    return {
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      decided_last_commit: isSet(object.decided_last_commit)
        ? CommitInfo.fromJSON(object.decided_last_commit)
        : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      next_validators_hash: isSet(object.next_validators_hash)
        ? bytesFromBase64(object.next_validators_hash)
        : new Uint8Array(0),
      proposer_address: isSet(object.proposer_address) ? bytesFromBase64(object.proposer_address) : new Uint8Array(0),
      syncing_to_height: isSet(object.syncing_to_height) ? globalThis.String(object.syncing_to_height) : "0",
    };
  },

  toJSON(message: FinalizeBlockRequest): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.decided_last_commit !== undefined) {
      obj.decided_last_commit = CommitInfo.toJSON(message.decided_last_commit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash !== undefined) {
      obj.next_validators_hash = base64FromBytes(message.next_validators_hash);
    }
    if (message.proposer_address !== undefined) {
      obj.proposer_address = base64FromBytes(message.proposer_address);
    }
    if (message.syncing_to_height !== undefined) {
      obj.syncing_to_height = message.syncing_to_height;
    }
    return obj;
  },

  create(base?: DeepPartial<FinalizeBlockRequest>): FinalizeBlockRequest {
    return FinalizeBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FinalizeBlockRequest>): FinalizeBlockRequest {
    const message = createBaseFinalizeBlockRequest();
    message.txs = object.txs?.map((e) => e) || [];
    message.decided_last_commit = (object.decided_last_commit !== undefined && object.decided_last_commit !== null)
      ? CommitInfo.fromPartial(object.decided_last_commit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? "0";
    message.time = object.time ?? undefined;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    message.syncing_to_height = object.syncing_to_height ?? "0";
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    exception: undefined,
    echo: undefined,
    flush: undefined,
    info: undefined,
    init_chain: undefined,
    query: undefined,
    check_tx: undefined,
    commit: undefined,
    list_snapshots: undefined,
    offer_snapshot: undefined,
    load_snapshot_chunk: undefined,
    apply_snapshot_chunk: undefined,
    prepare_proposal: undefined,
    process_proposal: undefined,
    extend_vote: undefined,
    verify_vote_extension: undefined,
    finalize_block: undefined,
  };
}

export const Response = {
  $type: "cometbft.abci.v1.Response" as const,

  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.exception !== undefined) {
      ExceptionResponse.encode(message.exception, writer.uint32(10).fork()).ldelim();
    }
    if (message.echo !== undefined) {
      EchoResponse.encode(message.echo, writer.uint32(18).fork()).ldelim();
    }
    if (message.flush !== undefined) {
      FlushResponse.encode(message.flush, writer.uint32(26).fork()).ldelim();
    }
    if (message.info !== undefined) {
      InfoResponse.encode(message.info, writer.uint32(34).fork()).ldelim();
    }
    if (message.init_chain !== undefined) {
      InitChainResponse.encode(message.init_chain, writer.uint32(50).fork()).ldelim();
    }
    if (message.query !== undefined) {
      QueryResponse.encode(message.query, writer.uint32(58).fork()).ldelim();
    }
    if (message.check_tx !== undefined) {
      CheckTxResponse.encode(message.check_tx, writer.uint32(74).fork()).ldelim();
    }
    if (message.commit !== undefined) {
      CommitResponse.encode(message.commit, writer.uint32(98).fork()).ldelim();
    }
    if (message.list_snapshots !== undefined) {
      ListSnapshotsResponse.encode(message.list_snapshots, writer.uint32(106).fork()).ldelim();
    }
    if (message.offer_snapshot !== undefined) {
      OfferSnapshotResponse.encode(message.offer_snapshot, writer.uint32(114).fork()).ldelim();
    }
    if (message.load_snapshot_chunk !== undefined) {
      LoadSnapshotChunkResponse.encode(message.load_snapshot_chunk, writer.uint32(122).fork()).ldelim();
    }
    if (message.apply_snapshot_chunk !== undefined) {
      ApplySnapshotChunkResponse.encode(message.apply_snapshot_chunk, writer.uint32(130).fork()).ldelim();
    }
    if (message.prepare_proposal !== undefined) {
      PrepareProposalResponse.encode(message.prepare_proposal, writer.uint32(138).fork()).ldelim();
    }
    if (message.process_proposal !== undefined) {
      ProcessProposalResponse.encode(message.process_proposal, writer.uint32(146).fork()).ldelim();
    }
    if (message.extend_vote !== undefined) {
      ExtendVoteResponse.encode(message.extend_vote, writer.uint32(154).fork()).ldelim();
    }
    if (message.verify_vote_extension !== undefined) {
      VerifyVoteExtensionResponse.encode(message.verify_vote_extension, writer.uint32(162).fork()).ldelim();
    }
    if (message.finalize_block !== undefined) {
      FinalizeBlockResponse.encode(message.finalize_block, writer.uint32(170).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exception = ExceptionResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.echo = EchoResponse.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.flush = FlushResponse.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = InfoResponse.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.init_chain = InitChainResponse.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.query = QueryResponse.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.check_tx = CheckTxResponse.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.commit = CommitResponse.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.list_snapshots = ListSnapshotsResponse.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.offer_snapshot = OfferSnapshotResponse.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.load_snapshot_chunk = LoadSnapshotChunkResponse.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.apply_snapshot_chunk = ApplySnapshotChunkResponse.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.prepare_proposal = PrepareProposalResponse.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.process_proposal = ProcessProposalResponse.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.extend_vote = ExtendVoteResponse.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.verify_vote_extension = VerifyVoteExtensionResponse.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.finalize_block = FinalizeBlockResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      exception: isSet(object.exception) ? ExceptionResponse.fromJSON(object.exception) : undefined,
      echo: isSet(object.echo) ? EchoResponse.fromJSON(object.echo) : undefined,
      flush: isSet(object.flush) ? FlushResponse.fromJSON(object.flush) : undefined,
      info: isSet(object.info) ? InfoResponse.fromJSON(object.info) : undefined,
      init_chain: isSet(object.init_chain) ? InitChainResponse.fromJSON(object.init_chain) : undefined,
      query: isSet(object.query) ? QueryResponse.fromJSON(object.query) : undefined,
      check_tx: isSet(object.check_tx) ? CheckTxResponse.fromJSON(object.check_tx) : undefined,
      commit: isSet(object.commit) ? CommitResponse.fromJSON(object.commit) : undefined,
      list_snapshots: isSet(object.list_snapshots) ? ListSnapshotsResponse.fromJSON(object.list_snapshots) : undefined,
      offer_snapshot: isSet(object.offer_snapshot) ? OfferSnapshotResponse.fromJSON(object.offer_snapshot) : undefined,
      load_snapshot_chunk: isSet(object.load_snapshot_chunk)
        ? LoadSnapshotChunkResponse.fromJSON(object.load_snapshot_chunk)
        : undefined,
      apply_snapshot_chunk: isSet(object.apply_snapshot_chunk)
        ? ApplySnapshotChunkResponse.fromJSON(object.apply_snapshot_chunk)
        : undefined,
      prepare_proposal: isSet(object.prepare_proposal)
        ? PrepareProposalResponse.fromJSON(object.prepare_proposal)
        : undefined,
      process_proposal: isSet(object.process_proposal)
        ? ProcessProposalResponse.fromJSON(object.process_proposal)
        : undefined,
      extend_vote: isSet(object.extend_vote) ? ExtendVoteResponse.fromJSON(object.extend_vote) : undefined,
      verify_vote_extension: isSet(object.verify_vote_extension)
        ? VerifyVoteExtensionResponse.fromJSON(object.verify_vote_extension)
        : undefined,
      finalize_block: isSet(object.finalize_block) ? FinalizeBlockResponse.fromJSON(object.finalize_block) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.exception !== undefined) {
      obj.exception = ExceptionResponse.toJSON(message.exception);
    }
    if (message.echo !== undefined) {
      obj.echo = EchoResponse.toJSON(message.echo);
    }
    if (message.flush !== undefined) {
      obj.flush = FlushResponse.toJSON(message.flush);
    }
    if (message.info !== undefined) {
      obj.info = InfoResponse.toJSON(message.info);
    }
    if (message.init_chain !== undefined) {
      obj.init_chain = InitChainResponse.toJSON(message.init_chain);
    }
    if (message.query !== undefined) {
      obj.query = QueryResponse.toJSON(message.query);
    }
    if (message.check_tx !== undefined) {
      obj.check_tx = CheckTxResponse.toJSON(message.check_tx);
    }
    if (message.commit !== undefined) {
      obj.commit = CommitResponse.toJSON(message.commit);
    }
    if (message.list_snapshots !== undefined) {
      obj.list_snapshots = ListSnapshotsResponse.toJSON(message.list_snapshots);
    }
    if (message.offer_snapshot !== undefined) {
      obj.offer_snapshot = OfferSnapshotResponse.toJSON(message.offer_snapshot);
    }
    if (message.load_snapshot_chunk !== undefined) {
      obj.load_snapshot_chunk = LoadSnapshotChunkResponse.toJSON(message.load_snapshot_chunk);
    }
    if (message.apply_snapshot_chunk !== undefined) {
      obj.apply_snapshot_chunk = ApplySnapshotChunkResponse.toJSON(message.apply_snapshot_chunk);
    }
    if (message.prepare_proposal !== undefined) {
      obj.prepare_proposal = PrepareProposalResponse.toJSON(message.prepare_proposal);
    }
    if (message.process_proposal !== undefined) {
      obj.process_proposal = ProcessProposalResponse.toJSON(message.process_proposal);
    }
    if (message.extend_vote !== undefined) {
      obj.extend_vote = ExtendVoteResponse.toJSON(message.extend_vote);
    }
    if (message.verify_vote_extension !== undefined) {
      obj.verify_vote_extension = VerifyVoteExtensionResponse.toJSON(message.verify_vote_extension);
    }
    if (message.finalize_block !== undefined) {
      obj.finalize_block = FinalizeBlockResponse.toJSON(message.finalize_block);
    }
    return obj;
  },

  create(base?: DeepPartial<Response>): Response {
    return Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Response>): Response {
    const message = createBaseResponse();
    message.exception = (object.exception !== undefined && object.exception !== null)
      ? ExceptionResponse.fromPartial(object.exception)
      : undefined;
    message.echo = (object.echo !== undefined && object.echo !== null)
      ? EchoResponse.fromPartial(object.echo)
      : undefined;
    message.flush = (object.flush !== undefined && object.flush !== null)
      ? FlushResponse.fromPartial(object.flush)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null)
      ? InfoResponse.fromPartial(object.info)
      : undefined;
    message.init_chain = (object.init_chain !== undefined && object.init_chain !== null)
      ? InitChainResponse.fromPartial(object.init_chain)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null)
      ? QueryResponse.fromPartial(object.query)
      : undefined;
    message.check_tx = (object.check_tx !== undefined && object.check_tx !== null)
      ? CheckTxResponse.fromPartial(object.check_tx)
      : undefined;
    message.commit = (object.commit !== undefined && object.commit !== null)
      ? CommitResponse.fromPartial(object.commit)
      : undefined;
    message.list_snapshots = (object.list_snapshots !== undefined && object.list_snapshots !== null)
      ? ListSnapshotsResponse.fromPartial(object.list_snapshots)
      : undefined;
    message.offer_snapshot = (object.offer_snapshot !== undefined && object.offer_snapshot !== null)
      ? OfferSnapshotResponse.fromPartial(object.offer_snapshot)
      : undefined;
    message.load_snapshot_chunk = (object.load_snapshot_chunk !== undefined && object.load_snapshot_chunk !== null)
      ? LoadSnapshotChunkResponse.fromPartial(object.load_snapshot_chunk)
      : undefined;
    message.apply_snapshot_chunk = (object.apply_snapshot_chunk !== undefined && object.apply_snapshot_chunk !== null)
      ? ApplySnapshotChunkResponse.fromPartial(object.apply_snapshot_chunk)
      : undefined;
    message.prepare_proposal = (object.prepare_proposal !== undefined && object.prepare_proposal !== null)
      ? PrepareProposalResponse.fromPartial(object.prepare_proposal)
      : undefined;
    message.process_proposal = (object.process_proposal !== undefined && object.process_proposal !== null)
      ? ProcessProposalResponse.fromPartial(object.process_proposal)
      : undefined;
    message.extend_vote = (object.extend_vote !== undefined && object.extend_vote !== null)
      ? ExtendVoteResponse.fromPartial(object.extend_vote)
      : undefined;
    message.verify_vote_extension =
      (object.verify_vote_extension !== undefined && object.verify_vote_extension !== null)
        ? VerifyVoteExtensionResponse.fromPartial(object.verify_vote_extension)
        : undefined;
    message.finalize_block = (object.finalize_block !== undefined && object.finalize_block !== null)
      ? FinalizeBlockResponse.fromPartial(object.finalize_block)
      : undefined;
    return message;
  },
};

function createBaseExceptionResponse(): ExceptionResponse {
  return { error: "" };
}

export const ExceptionResponse = {
  $type: "cometbft.abci.v1.ExceptionResponse" as const,

  encode(message: ExceptionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExceptionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExceptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExceptionResponse {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: ExceptionResponse): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<ExceptionResponse>): ExceptionResponse {
    return ExceptionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExceptionResponse>): ExceptionResponse {
    const message = createBaseExceptionResponse();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseEchoResponse(): EchoResponse {
  return { message: "" };
}

export const EchoResponse = {
  $type: "cometbft.abci.v1.EchoResponse" as const,

  encode(message: EchoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<EchoResponse>): EchoResponse {
    return EchoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EchoResponse>): EchoResponse {
    const message = createBaseEchoResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFlushResponse(): FlushResponse {
  return {};
}

export const FlushResponse = {
  $type: "cometbft.abci.v1.FlushResponse" as const,

  encode(_: FlushResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FlushResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlushResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlushResponse {
    return {};
  },

  toJSON(_: FlushResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FlushResponse>): FlushResponse {
    return FlushResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FlushResponse>): FlushResponse {
    const message = createBaseFlushResponse();
    return message;
  },
};

function createBaseInfoResponse(): InfoResponse {
  return {
    data: "",
    version: "",
    app_version: "0",
    last_block_height: "0",
    last_block_app_hash: new Uint8Array(0),
    lane_priorities: {},
    default_lane: "",
  };
}

export const InfoResponse = {
  $type: "cometbft.abci.v1.InfoResponse" as const,

  encode(message: InfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.app_version !== "0") {
      writer.uint32(24).uint64(message.app_version);
    }
    if (message.last_block_height !== "0") {
      writer.uint32(32).int64(message.last_block_height);
    }
    if (message.last_block_app_hash.length !== 0) {
      writer.uint32(42).bytes(message.last_block_app_hash);
    }
    Object.entries(message.lane_priorities).forEach(([key, value]) => {
      InfoResponse_LanePrioritiesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    if (message.default_lane !== "") {
      writer.uint32(58).string(message.default_lane);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.app_version = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.last_block_height = longToString(reader.int64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.last_block_app_hash = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = InfoResponse_LanePrioritiesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.lane_priorities[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.default_lane = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoResponse {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      app_version: isSet(object.app_version) ? globalThis.String(object.app_version) : "0",
      last_block_height: isSet(object.last_block_height) ? globalThis.String(object.last_block_height) : "0",
      last_block_app_hash: isSet(object.last_block_app_hash)
        ? bytesFromBase64(object.last_block_app_hash)
        : new Uint8Array(0),
      lane_priorities: isObject(object.lane_priorities)
        ? Object.entries(object.lane_priorities).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      default_lane: isSet(object.default_lane) ? globalThis.String(object.default_lane) : "",
    };
  },

  toJSON(message: InfoResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.app_version !== undefined) {
      obj.app_version = message.app_version;
    }
    if (message.last_block_height !== undefined) {
      obj.last_block_height = message.last_block_height;
    }
    if (message.last_block_app_hash !== undefined) {
      obj.last_block_app_hash = base64FromBytes(message.last_block_app_hash);
    }
    if (message.lane_priorities) {
      const entries = Object.entries(message.lane_priorities);
      if (entries.length > 0) {
        obj.lane_priorities = {};
        entries.forEach(([k, v]) => {
          obj.lane_priorities[k] = Math.round(v);
        });
      }
    }
    if (message.default_lane !== undefined) {
      obj.default_lane = message.default_lane;
    }
    return obj;
  },

  create(base?: DeepPartial<InfoResponse>): InfoResponse {
    return InfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InfoResponse>): InfoResponse {
    const message = createBaseInfoResponse();
    message.data = object.data ?? "";
    message.version = object.version ?? "";
    message.app_version = object.app_version ?? "0";
    message.last_block_height = object.last_block_height ?? "0";
    message.last_block_app_hash = object.last_block_app_hash ?? new Uint8Array(0);
    message.lane_priorities = Object.entries(object.lane_priorities ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.default_lane = object.default_lane ?? "";
    return message;
  },
};

function createBaseInfoResponse_LanePrioritiesEntry(): InfoResponse_LanePrioritiesEntry {
  return { key: "", value: 0 };
}

export const InfoResponse_LanePrioritiesEntry = {
  $type: "cometbft.abci.v1.InfoResponse.LanePrioritiesEntry" as const,

  encode(message: InfoResponse_LanePrioritiesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InfoResponse_LanePrioritiesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoResponse_LanePrioritiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoResponse_LanePrioritiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: InfoResponse_LanePrioritiesEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<InfoResponse_LanePrioritiesEntry>): InfoResponse_LanePrioritiesEntry {
    return InfoResponse_LanePrioritiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InfoResponse_LanePrioritiesEntry>): InfoResponse_LanePrioritiesEntry {
    const message = createBaseInfoResponse_LanePrioritiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseInitChainResponse(): InitChainResponse {
  return { consensus_params: undefined, validators: [], app_hash: new Uint8Array(0) };
}

export const InitChainResponse = {
  $type: "cometbft.abci.v1.InitChainResponse" as const,

  encode(message: InitChainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consensus_params !== undefined) {
      ConsensusParams.encode(message.consensus_params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(26).bytes(message.app_hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitChainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consensus_params = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitChainResponse {
    return {
      consensus_params: isSet(object.consensus_params) ? ConsensusParams.fromJSON(object.consensus_params) : undefined,
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      app_hash: isSet(object.app_hash) ? bytesFromBase64(object.app_hash) : new Uint8Array(0),
    };
  },

  toJSON(message: InitChainResponse): unknown {
    const obj: any = {};
    if (message.consensus_params !== undefined) {
      obj.consensus_params = ConsensusParams.toJSON(message.consensus_params);
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.app_hash !== undefined) {
      obj.app_hash = base64FromBytes(message.app_hash);
    }
    return obj;
  },

  create(base?: DeepPartial<InitChainResponse>): InitChainResponse {
    return InitChainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitChainResponse>): InitChainResponse {
    const message = createBaseInitChainResponse();
    message.consensus_params = (object.consensus_params !== undefined && object.consensus_params !== null)
      ? ConsensusParams.fromPartial(object.consensus_params)
      : undefined;
    message.validators = object.validators?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryResponse(): QueryResponse {
  return {
    code: 0,
    log: "",
    info: "",
    index: "0",
    key: new Uint8Array(0),
    value: new Uint8Array(0),
    proof_ops: undefined,
    height: "0",
    codespace: "",
  };
}

export const QueryResponse = {
  $type: "cometbft.abci.v1.QueryResponse" as const,

  encode(message: QueryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.index !== "0") {
      writer.uint32(40).int64(message.index);
    }
    if (message.key.length !== 0) {
      writer.uint32(50).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(58).bytes(message.value);
    }
    if (message.proof_ops !== undefined) {
      ProofOps.encode(message.proof_ops, writer.uint32(66).fork()).ldelim();
    }
    if (message.height !== "0") {
      writer.uint32(72).int64(message.height);
    }
    if (message.codespace !== "") {
      writer.uint32(82).string(message.codespace);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.index = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.key = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.value = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.proof_ops = ProofOps.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.codespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "0",
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      proof_ops: isSet(object.proof_ops) ? ProofOps.fromJSON(object.proof_ops) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
    };
  },

  toJSON(message: QueryResponse): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.log !== undefined) {
      obj.log = message.log;
    }
    if (message.info !== undefined) {
      obj.info = message.info;
    }
    if (message.index !== undefined) {
      obj.index = message.index;
    }
    if (message.key !== undefined) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.proof_ops !== undefined) {
      obj.proof_ops = ProofOps.toJSON(message.proof_ops);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.codespace !== undefined) {
      obj.codespace = message.codespace;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryResponse>): QueryResponse {
    return QueryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryResponse>): QueryResponse {
    const message = createBaseQueryResponse();
    message.code = object.code ?? 0;
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.index = object.index ?? "0";
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.proof_ops = (object.proof_ops !== undefined && object.proof_ops !== null)
      ? ProofOps.fromPartial(object.proof_ops)
      : undefined;
    message.height = object.height ?? "0";
    message.codespace = object.codespace ?? "";
    return message;
  },
};

function createBaseCheckTxResponse(): CheckTxResponse {
  return {
    code: 0,
    data: new Uint8Array(0),
    log: "",
    info: "",
    gas_wanted: "0",
    gas_used: "0",
    events: [],
    codespace: "",
    lane_id: "",
  };
}

export const CheckTxResponse = {
  $type: "cometbft.abci.v1.CheckTxResponse" as const,

  encode(message: CheckTxResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gas_wanted !== "0") {
      writer.uint32(40).int64(message.gas_wanted);
    }
    if (message.gas_used !== "0") {
      writer.uint32(48).int64(message.gas_used);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    if (message.lane_id !== "") {
      writer.uint32(98).string(message.lane_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CheckTxResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.gas_wanted = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gas_used = longToString(reader.int64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.codespace = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.lane_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTxResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      gas_wanted: isSet(object.gas_wanted) ? globalThis.String(object.gas_wanted) : "0",
      gas_used: isSet(object.gas_used) ? globalThis.String(object.gas_used) : "0",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
      lane_id: isSet(object.lane_id) ? globalThis.String(object.lane_id) : "",
    };
  },

  toJSON(message: CheckTxResponse): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.log !== undefined) {
      obj.log = message.log;
    }
    if (message.info !== undefined) {
      obj.info = message.info;
    }
    if (message.gas_wanted !== undefined) {
      obj.gas_wanted = message.gas_wanted;
    }
    if (message.gas_used !== undefined) {
      obj.gas_used = message.gas_used;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== undefined) {
      obj.codespace = message.codespace;
    }
    if (message.lane_id !== undefined) {
      obj.lane_id = message.lane_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckTxResponse>): CheckTxResponse {
    return CheckTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckTxResponse>): CheckTxResponse {
    const message = createBaseCheckTxResponse();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gas_wanted = object.gas_wanted ?? "0";
    message.gas_used = object.gas_used ?? "0";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.codespace = object.codespace ?? "";
    message.lane_id = object.lane_id ?? "";
    return message;
  },
};

function createBaseCommitResponse(): CommitResponse {
  return { retain_height: "0" };
}

export const CommitResponse = {
  $type: "cometbft.abci.v1.CommitResponse" as const,

  encode(message: CommitResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.retain_height !== "0") {
      writer.uint32(24).int64(message.retain_height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommitResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.retain_height = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitResponse {
    return { retain_height: isSet(object.retain_height) ? globalThis.String(object.retain_height) : "0" };
  },

  toJSON(message: CommitResponse): unknown {
    const obj: any = {};
    if (message.retain_height !== undefined) {
      obj.retain_height = message.retain_height;
    }
    return obj;
  },

  create(base?: DeepPartial<CommitResponse>): CommitResponse {
    return CommitResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitResponse>): CommitResponse {
    const message = createBaseCommitResponse();
    message.retain_height = object.retain_height ?? "0";
    return message;
  },
};

function createBaseListSnapshotsResponse(): ListSnapshotsResponse {
  return { snapshots: [] };
}

export const ListSnapshotsResponse = {
  $type: "cometbft.abci.v1.ListSnapshotsResponse" as const,

  encode(message: ListSnapshotsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.snapshots) {
      Snapshot.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSnapshotsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsResponse {
    return {
      snapshots: globalThis.Array.isArray(object?.snapshots)
        ? object.snapshots.map((e: any) => Snapshot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSnapshotsResponse): unknown {
    const obj: any = {};
    if (message.snapshots?.length) {
      obj.snapshots = message.snapshots.map((e) => Snapshot.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    return ListSnapshotsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    const message = createBaseListSnapshotsResponse();
    message.snapshots = object.snapshots?.map((e) => Snapshot.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOfferSnapshotResponse(): OfferSnapshotResponse {
  return { result: 0 };
}

export const OfferSnapshotResponse = {
  $type: "cometbft.abci.v1.OfferSnapshotResponse" as const,

  encode(message: OfferSnapshotResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OfferSnapshotResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfferSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfferSnapshotResponse {
    return { result: isSet(object.result) ? offerSnapshotResultFromJSON(object.result) : 0 };
  },

  toJSON(message: OfferSnapshotResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = offerSnapshotResultToJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<OfferSnapshotResponse>): OfferSnapshotResponse {
    return OfferSnapshotResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfferSnapshotResponse>): OfferSnapshotResponse {
    const message = createBaseOfferSnapshotResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseLoadSnapshotChunkResponse(): LoadSnapshotChunkResponse {
  return { chunk: new Uint8Array(0) };
}

export const LoadSnapshotChunkResponse = {
  $type: "cometbft.abci.v1.LoadSnapshotChunkResponse" as const,

  encode(message: LoadSnapshotChunkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chunk.length !== 0) {
      writer.uint32(10).bytes(message.chunk);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoadSnapshotChunkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadSnapshotChunkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadSnapshotChunkResponse {
    return { chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0) };
  },

  toJSON(message: LoadSnapshotChunkResponse): unknown {
    const obj: any = {};
    if (message.chunk !== undefined) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    return obj;
  },

  create(base?: DeepPartial<LoadSnapshotChunkResponse>): LoadSnapshotChunkResponse {
    return LoadSnapshotChunkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoadSnapshotChunkResponse>): LoadSnapshotChunkResponse {
    const message = createBaseLoadSnapshotChunkResponse();
    message.chunk = object.chunk ?? new Uint8Array(0);
    return message;
  },
};

function createBaseApplySnapshotChunkResponse(): ApplySnapshotChunkResponse {
  return { result: 0, refetch_chunks: [], reject_senders: [] };
}

export const ApplySnapshotChunkResponse = {
  $type: "cometbft.abci.v1.ApplySnapshotChunkResponse" as const,

  encode(message: ApplySnapshotChunkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    writer.uint32(18).fork();
    for (const v of message.refetch_chunks) {
      writer.uint32(v);
    }
    writer.ldelim();
    for (const v of message.reject_senders) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ApplySnapshotChunkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplySnapshotChunkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        case 2:
          if (tag === 16) {
            message.refetch_chunks.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.refetch_chunks.push(reader.uint32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reject_senders.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplySnapshotChunkResponse {
    return {
      result: isSet(object.result) ? applySnapshotChunkResultFromJSON(object.result) : 0,
      refetch_chunks: globalThis.Array.isArray(object?.refetch_chunks)
        ? object.refetch_chunks.map((e: any) => globalThis.Number(e))
        : [],
      reject_senders: globalThis.Array.isArray(object?.reject_senders)
        ? object.reject_senders.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ApplySnapshotChunkResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = applySnapshotChunkResultToJSON(message.result);
    }
    if (message.refetch_chunks?.length) {
      obj.refetch_chunks = message.refetch_chunks.map((e) => Math.round(e));
    }
    if (message.reject_senders?.length) {
      obj.reject_senders = message.reject_senders;
    }
    return obj;
  },

  create(base?: DeepPartial<ApplySnapshotChunkResponse>): ApplySnapshotChunkResponse {
    return ApplySnapshotChunkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplySnapshotChunkResponse>): ApplySnapshotChunkResponse {
    const message = createBaseApplySnapshotChunkResponse();
    message.result = object.result ?? 0;
    message.refetch_chunks = object.refetch_chunks?.map((e) => e) || [];
    message.reject_senders = object.reject_senders?.map((e) => e) || [];
    return message;
  },
};

function createBasePrepareProposalResponse(): PrepareProposalResponse {
  return { txs: [] };
}

export const PrepareProposalResponse = {
  $type: "cometbft.abci.v1.PrepareProposalResponse" as const,

  encode(message: PrepareProposalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrepareProposalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrepareProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrepareProposalResponse {
    return { txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [] };
  },

  toJSON(message: PrepareProposalResponse): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PrepareProposalResponse>): PrepareProposalResponse {
    return PrepareProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrepareProposalResponse>): PrepareProposalResponse {
    const message = createBasePrepareProposalResponse();
    message.txs = object.txs?.map((e) => e) || [];
    return message;
  },
};

function createBaseProcessProposalResponse(): ProcessProposalResponse {
  return { status: 0 };
}

export const ProcessProposalResponse = {
  $type: "cometbft.abci.v1.ProcessProposalResponse" as const,

  encode(message: ProcessProposalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProcessProposalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessProposalResponse {
    return { status: isSet(object.status) ? processProposalStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: ProcessProposalResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = processProposalStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessProposalResponse>): ProcessProposalResponse {
    return ProcessProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessProposalResponse>): ProcessProposalResponse {
    const message = createBaseProcessProposalResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseExtendVoteResponse(): ExtendVoteResponse {
  return { vote_extension: new Uint8Array(0) };
}

export const ExtendVoteResponse = {
  $type: "cometbft.abci.v1.ExtendVoteResponse" as const,

  encode(message: ExtendVoteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vote_extension.length !== 0) {
      writer.uint32(10).bytes(message.vote_extension);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExtendVoteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vote_extension = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendVoteResponse {
    return {
      vote_extension: isSet(object.vote_extension) ? bytesFromBase64(object.vote_extension) : new Uint8Array(0),
    };
  },

  toJSON(message: ExtendVoteResponse): unknown {
    const obj: any = {};
    if (message.vote_extension !== undefined) {
      obj.vote_extension = base64FromBytes(message.vote_extension);
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendVoteResponse>): ExtendVoteResponse {
    return ExtendVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendVoteResponse>): ExtendVoteResponse {
    const message = createBaseExtendVoteResponse();
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifyVoteExtensionResponse(): VerifyVoteExtensionResponse {
  return { status: 0 };
}

export const VerifyVoteExtensionResponse = {
  $type: "cometbft.abci.v1.VerifyVoteExtensionResponse" as const,

  encode(message: VerifyVoteExtensionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VerifyVoteExtensionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyVoteExtensionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyVoteExtensionResponse {
    return { status: isSet(object.status) ? verifyVoteExtensionStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: VerifyVoteExtensionResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = verifyVoteExtensionStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyVoteExtensionResponse>): VerifyVoteExtensionResponse {
    return VerifyVoteExtensionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyVoteExtensionResponse>): VerifyVoteExtensionResponse {
    const message = createBaseVerifyVoteExtensionResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFinalizeBlockResponse(): FinalizeBlockResponse {
  return {
    events: [],
    tx_results: [],
    validator_updates: [],
    consensus_param_updates: undefined,
    app_hash: new Uint8Array(0),
    next_block_delay: undefined,
  };
}

export const FinalizeBlockResponse = {
  $type: "cometbft.abci.v1.FinalizeBlockResponse" as const,

  encode(message: FinalizeBlockResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.tx_results) {
      ExecTxResult.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.validator_updates) {
      ValidatorUpdate.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.consensus_param_updates !== undefined) {
      ConsensusParams.encode(message.consensus_param_updates, writer.uint32(34).fork()).ldelim();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(42).bytes(message.app_hash);
    }
    if (message.next_block_delay !== undefined) {
      Duration.encode(message.next_block_delay, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FinalizeBlockResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalizeBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tx_results.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validator_updates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.consensus_param_updates = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.app_hash = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.next_block_delay = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalizeBlockResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      tx_results: globalThis.Array.isArray(object?.tx_results)
        ? object.tx_results.map((e: any) => ExecTxResult.fromJSON(e))
        : [],
      validator_updates: globalThis.Array.isArray(object?.validator_updates)
        ? object.validator_updates.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      consensus_param_updates: isSet(object.consensus_param_updates)
        ? ConsensusParams.fromJSON(object.consensus_param_updates)
        : undefined,
      app_hash: isSet(object.app_hash) ? bytesFromBase64(object.app_hash) : new Uint8Array(0),
      next_block_delay: isSet(object.next_block_delay) ? Duration.fromJSON(object.next_block_delay) : undefined,
    };
  },

  toJSON(message: FinalizeBlockResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.tx_results?.length) {
      obj.tx_results = message.tx_results.map((e) => ExecTxResult.toJSON(e));
    }
    if (message.validator_updates?.length) {
      obj.validator_updates = message.validator_updates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensus_param_updates !== undefined) {
      obj.consensus_param_updates = ConsensusParams.toJSON(message.consensus_param_updates);
    }
    if (message.app_hash !== undefined) {
      obj.app_hash = base64FromBytes(message.app_hash);
    }
    if (message.next_block_delay !== undefined) {
      obj.next_block_delay = Duration.toJSON(message.next_block_delay);
    }
    return obj;
  },

  create(base?: DeepPartial<FinalizeBlockResponse>): FinalizeBlockResponse {
    return FinalizeBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FinalizeBlockResponse>): FinalizeBlockResponse {
    const message = createBaseFinalizeBlockResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.tx_results = object.tx_results?.map((e) => ExecTxResult.fromPartial(e)) || [];
    message.validator_updates = object.validator_updates?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.consensus_param_updates =
      (object.consensus_param_updates !== undefined && object.consensus_param_updates !== null)
        ? ConsensusParams.fromPartial(object.consensus_param_updates)
        : undefined;
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    message.next_block_delay = (object.next_block_delay !== undefined && object.next_block_delay !== null)
      ? Duration.fromPartial(object.next_block_delay)
      : undefined;
    return message;
  },
};

function createBaseCommitInfo(): CommitInfo {
  return { round: 0, votes: [] };
}

export const CommitInfo = {
  $type: "cometbft.abci.v1.CommitInfo" as const,

  encode(message: CommitInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      VoteInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommitInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.round = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.votes.push(VoteInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitInfo {
    return {
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => VoteInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: CommitInfo): unknown {
    const obj: any = {};
    if (message.round !== undefined) {
      obj.round = Math.round(message.round);
    }
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => VoteInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CommitInfo>): CommitInfo {
    return CommitInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitInfo>): CommitInfo {
    const message = createBaseCommitInfo();
    message.round = object.round ?? 0;
    message.votes = object.votes?.map((e) => VoteInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExtendedCommitInfo(): ExtendedCommitInfo {
  return { round: 0, votes: [] };
}

export const ExtendedCommitInfo = {
  $type: "cometbft.abci.v1.ExtendedCommitInfo" as const,

  encode(message: ExtendedCommitInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      ExtendedVoteInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExtendedCommitInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendedCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.round = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.votes.push(ExtendedVoteInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendedCommitInfo {
    return {
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => ExtendedVoteInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ExtendedCommitInfo): unknown {
    const obj: any = {};
    if (message.round !== undefined) {
      obj.round = Math.round(message.round);
    }
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => ExtendedVoteInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendedCommitInfo>): ExtendedCommitInfo {
    return ExtendedCommitInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendedCommitInfo>): ExtendedCommitInfo {
    const message = createBaseExtendedCommitInfo();
    message.round = object.round ?? 0;
    message.votes = object.votes?.map((e) => ExtendedVoteInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEvent(): Event {
  return { type: "", attributes: [] };
}

export const Event = {
  $type: "cometbft.abci.v1.Event" as const,

  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.attributes) {
      EventAttribute.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributes.push(EventAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => EventAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => EventAttribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.type = object.type ?? "";
    message.attributes = object.attributes?.map((e) => EventAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEventAttribute(): EventAttribute {
  return { key: "", value: "", index: false };
}

export const EventAttribute = {
  $type: "cometbft.abci.v1.EventAttribute" as const,

  encode(message: EventAttribute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.index !== false) {
      writer.uint32(24).bool(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAttribute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.index = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttribute {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      index: isSet(object.index) ? globalThis.Boolean(object.index) : false,
    };
  },

  toJSON(message: EventAttribute): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.index !== undefined) {
      obj.index = message.index;
    }
    return obj;
  },

  create(base?: DeepPartial<EventAttribute>): EventAttribute {
    return EventAttribute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventAttribute>): EventAttribute {
    const message = createBaseEventAttribute();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    message.index = object.index ?? false;
    return message;
  },
};

function createBaseExecTxResult(): ExecTxResult {
  return {
    code: 0,
    data: new Uint8Array(0),
    log: "",
    info: "",
    gas_wanted: "0",
    gas_used: "0",
    events: [],
    codespace: "",
  };
}

export const ExecTxResult = {
  $type: "cometbft.abci.v1.ExecTxResult" as const,

  encode(message: ExecTxResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gas_wanted !== "0") {
      writer.uint32(40).int64(message.gas_wanted);
    }
    if (message.gas_used !== "0") {
      writer.uint32(48).int64(message.gas_used);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecTxResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.gas_wanted = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gas_used = longToString(reader.int64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.codespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecTxResult {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      gas_wanted: isSet(object.gas_wanted) ? globalThis.String(object.gas_wanted) : "0",
      gas_used: isSet(object.gas_used) ? globalThis.String(object.gas_used) : "0",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
    };
  },

  toJSON(message: ExecTxResult): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.log !== undefined) {
      obj.log = message.log;
    }
    if (message.info !== undefined) {
      obj.info = message.info;
    }
    if (message.gas_wanted !== undefined) {
      obj.gas_wanted = message.gas_wanted;
    }
    if (message.gas_used !== undefined) {
      obj.gas_used = message.gas_used;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== undefined) {
      obj.codespace = message.codespace;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecTxResult>): ExecTxResult {
    return ExecTxResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecTxResult>): ExecTxResult {
    const message = createBaseExecTxResult();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gas_wanted = object.gas_wanted ?? "0";
    message.gas_used = object.gas_used ?? "0";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.codespace = object.codespace ?? "";
    return message;
  },
};

function createBaseTxResult(): TxResult {
  return { height: "0", index: 0, tx: new Uint8Array(0), result: undefined };
}

export const TxResult = {
  $type: "cometbft.abci.v1.TxResult" as const,

  encode(message: TxResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).int64(message.height);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.tx.length !== 0) {
      writer.uint32(26).bytes(message.tx);
    }
    if (message.result !== undefined) {
      ExecTxResult.encode(message.result, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TxResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.index = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tx = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.result = ExecTxResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxResult {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0),
      result: isSet(object.result) ? ExecTxResult.fromJSON(object.result) : undefined,
    };
  },

  toJSON(message: TxResult): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.tx !== undefined) {
      obj.tx = base64FromBytes(message.tx);
    }
    if (message.result !== undefined) {
      obj.result = ExecTxResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<TxResult>): TxResult {
    return TxResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TxResult>): TxResult {
    const message = createBaseTxResult();
    message.height = object.height ?? "0";
    message.index = object.index ?? 0;
    message.tx = object.tx ?? new Uint8Array(0);
    message.result = (object.result !== undefined && object.result !== null)
      ? ExecTxResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseValidator(): Validator {
  return { address: new Uint8Array(0), power: "0" };
}

export const Validator = {
  $type: "cometbft.abci.v1.Validator" as const,

  encode(message: Validator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.power !== "0") {
      writer.uint32(24).int64(message.power);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Validator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.power = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Validator {
    return {
      address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(0),
      power: isSet(object.power) ? globalThis.String(object.power) : "0",
    };
  },

  toJSON(message: Validator): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.power !== undefined) {
      obj.power = message.power;
    }
    return obj;
  },

  create(base?: DeepPartial<Validator>): Validator {
    return Validator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Validator>): Validator {
    const message = createBaseValidator();
    message.address = object.address ?? new Uint8Array(0);
    message.power = object.power ?? "0";
    return message;
  },
};

function createBaseValidatorUpdate(): ValidatorUpdate {
  return { power: "0", pub_key_bytes: new Uint8Array(0), pub_key_type: "" };
}

export const ValidatorUpdate = {
  $type: "cometbft.abci.v1.ValidatorUpdate" as const,

  encode(message: ValidatorUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.power !== "0") {
      writer.uint32(16).int64(message.power);
    }
    if (message.pub_key_bytes.length !== 0) {
      writer.uint32(26).bytes(message.pub_key_bytes);
    }
    if (message.pub_key_type !== "") {
      writer.uint32(34).string(message.pub_key_type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.power = longToString(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pub_key_bytes = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pub_key_type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorUpdate {
    return {
      power: isSet(object.power) ? globalThis.String(object.power) : "0",
      pub_key_bytes: isSet(object.pub_key_bytes) ? bytesFromBase64(object.pub_key_bytes) : new Uint8Array(0),
      pub_key_type: isSet(object.pub_key_type) ? globalThis.String(object.pub_key_type) : "",
    };
  },

  toJSON(message: ValidatorUpdate): unknown {
    const obj: any = {};
    if (message.power !== undefined) {
      obj.power = message.power;
    }
    if (message.pub_key_bytes !== undefined) {
      obj.pub_key_bytes = base64FromBytes(message.pub_key_bytes);
    }
    if (message.pub_key_type !== undefined) {
      obj.pub_key_type = message.pub_key_type;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorUpdate>): ValidatorUpdate {
    return ValidatorUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorUpdate>): ValidatorUpdate {
    const message = createBaseValidatorUpdate();
    message.power = object.power ?? "0";
    message.pub_key_bytes = object.pub_key_bytes ?? new Uint8Array(0);
    message.pub_key_type = object.pub_key_type ?? "";
    return message;
  },
};

function createBaseVoteInfo(): VoteInfo {
  return { validator: undefined, block_id_flag: 0 };
}

export const VoteInfo = {
  $type: "cometbft.abci.v1.VoteInfo" as const,

  encode(message: VoteInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
    }
    if (message.block_id_flag !== 0) {
      writer.uint32(24).int32(message.block_id_flag);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoteInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.block_id_flag = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteInfo {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      block_id_flag: isSet(object.block_id_flag) ? blockIDFlagFromJSON(object.block_id_flag) : 0,
    };
  },

  toJSON(message: VoteInfo): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.block_id_flag !== undefined) {
      obj.block_id_flag = blockIDFlagToJSON(message.block_id_flag);
    }
    return obj;
  },

  create(base?: DeepPartial<VoteInfo>): VoteInfo {
    return VoteInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VoteInfo>): VoteInfo {
    const message = createBaseVoteInfo();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.block_id_flag = object.block_id_flag ?? 0;
    return message;
  },
};

function createBaseExtendedVoteInfo(): ExtendedVoteInfo {
  return {
    validator: undefined,
    vote_extension: new Uint8Array(0),
    extension_signature: new Uint8Array(0),
    block_id_flag: 0,
  };
}

export const ExtendedVoteInfo = {
  $type: "cometbft.abci.v1.ExtendedVoteInfo" as const,

  encode(message: ExtendedVoteInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
    }
    if (message.vote_extension.length !== 0) {
      writer.uint32(26).bytes(message.vote_extension);
    }
    if (message.extension_signature.length !== 0) {
      writer.uint32(34).bytes(message.extension_signature);
    }
    if (message.block_id_flag !== 0) {
      writer.uint32(40).int32(message.block_id_flag);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExtendedVoteInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendedVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vote_extension = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.extension_signature = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.block_id_flag = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendedVoteInfo {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      vote_extension: isSet(object.vote_extension) ? bytesFromBase64(object.vote_extension) : new Uint8Array(0),
      extension_signature: isSet(object.extension_signature)
        ? bytesFromBase64(object.extension_signature)
        : new Uint8Array(0),
      block_id_flag: isSet(object.block_id_flag) ? blockIDFlagFromJSON(object.block_id_flag) : 0,
    };
  },

  toJSON(message: ExtendedVoteInfo): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.vote_extension !== undefined) {
      obj.vote_extension = base64FromBytes(message.vote_extension);
    }
    if (message.extension_signature !== undefined) {
      obj.extension_signature = base64FromBytes(message.extension_signature);
    }
    if (message.block_id_flag !== undefined) {
      obj.block_id_flag = blockIDFlagToJSON(message.block_id_flag);
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendedVoteInfo>): ExtendedVoteInfo {
    return ExtendedVoteInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendedVoteInfo>): ExtendedVoteInfo {
    const message = createBaseExtendedVoteInfo();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    message.extension_signature = object.extension_signature ?? new Uint8Array(0);
    message.block_id_flag = object.block_id_flag ?? 0;
    return message;
  },
};

function createBaseMisbehavior(): Misbehavior {
  return { type: 0, validator: undefined, height: "0", time: undefined, total_voting_power: "0" };
}

export const Misbehavior = {
  $type: "cometbft.abci.v1.Misbehavior" as const,

  encode(message: Misbehavior, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();
    }
    if (message.height !== "0") {
      writer.uint32(24).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();
    }
    if (message.total_voting_power !== "0") {
      writer.uint32(40).int64(message.total_voting_power);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Misbehavior {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMisbehavior();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.total_voting_power = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Misbehavior {
    return {
      type: isSet(object.type) ? misbehaviorTypeFromJSON(object.type) : 0,
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      total_voting_power: isSet(object.total_voting_power) ? globalThis.String(object.total_voting_power) : "0",
    };
  },

  toJSON(message: Misbehavior): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = misbehaviorTypeToJSON(message.type);
    }
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.total_voting_power !== undefined) {
      obj.total_voting_power = message.total_voting_power;
    }
    return obj;
  },

  create(base?: DeepPartial<Misbehavior>): Misbehavior {
    return Misbehavior.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Misbehavior>): Misbehavior {
    const message = createBaseMisbehavior();
    message.type = object.type ?? 0;
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.height = object.height ?? "0";
    message.time = object.time ?? undefined;
    message.total_voting_power = object.total_voting_power ?? "0";
    return message;
  },
};

function createBaseSnapshot(): Snapshot {
  return { height: "0", format: 0, chunks: 0, hash: new Uint8Array(0), metadata: new Uint8Array(0) };
}

export const Snapshot = {
  $type: "cometbft.abci.v1.Snapshot" as const,

  encode(message: Snapshot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunks !== 0) {
      writer.uint32(24).uint32(message.chunks);
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(42).bytes(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Snapshot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.format = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.chunks = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snapshot {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      format: isSet(object.format) ? globalThis.Number(object.format) : 0,
      chunks: isSet(object.chunks) ? globalThis.Number(object.chunks) : 0,
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
    };
  },

  toJSON(message: Snapshot): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.format !== undefined) {
      obj.format = Math.round(message.format);
    }
    if (message.chunks !== undefined) {
      obj.chunks = Math.round(message.chunks);
    }
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.metadata !== undefined) {
      obj.metadata = base64FromBytes(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<Snapshot>): Snapshot {
    return Snapshot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snapshot>): Snapshot {
    const message = createBaseSnapshot();
    message.height = object.height ?? "0";
    message.format = object.format ?? 0;
    message.chunks = object.chunks ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    message.metadata = object.metadata ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
