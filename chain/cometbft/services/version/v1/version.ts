// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: cometbft/services/version/v1/version.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

/** GetVersionRequest is the request for the ABCI version. */
export interface GetVersionRequest {
}

/** GetVersionResponse contains the ABCI application version info. */
export interface GetVersionResponse {
  /** The semantic version of the node software. */
  node: string;
  /** The version of ABCI used by the node. */
  abci: string;
  /** The version of the P2P protocol. */
  p2p: string;
  /** The version of the block protocol. */
  block: string;
}

function createBaseGetVersionRequest(): GetVersionRequest {
  return {};
}

export const GetVersionRequest = {
  $type: "cometbft.services.version.v1.GetVersionRequest" as const,

  encode(_: GetVersionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetVersionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetVersionRequest {
    return {};
  },

  toJSON(_: GetVersionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetVersionRequest>): GetVersionRequest {
    return GetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetVersionRequest>): GetVersionRequest {
    const message = createBaseGetVersionRequest();
    return message;
  },
};

function createBaseGetVersionResponse(): GetVersionResponse {
  return { node: "", abci: "", p2p: "0", block: "0" };
}

export const GetVersionResponse = {
  $type: "cometbft.services.version.v1.GetVersionResponse" as const,

  encode(message: GetVersionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.node !== "") {
      writer.uint32(10).string(message.node);
    }
    if (message.abci !== "") {
      writer.uint32(18).string(message.abci);
    }
    if (message.p2p !== "0") {
      writer.uint32(24).uint64(message.p2p);
    }
    if (message.block !== "0") {
      writer.uint32(32).uint64(message.block);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetVersionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.node = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.abci = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.p2p = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.block = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionResponse {
    return {
      node: isSet(object.node) ? globalThis.String(object.node) : "",
      abci: isSet(object.abci) ? globalThis.String(object.abci) : "",
      p2p: isSet(object.p2p) ? globalThis.String(object.p2p) : "0",
      block: isSet(object.block) ? globalThis.String(object.block) : "0",
    };
  },

  toJSON(message: GetVersionResponse): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = message.node;
    }
    if (message.abci !== undefined) {
      obj.abci = message.abci;
    }
    if (message.p2p !== undefined) {
      obj.p2p = message.p2p;
    }
    if (message.block !== undefined) {
      obj.block = message.block;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVersionResponse>): GetVersionResponse {
    return GetVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVersionResponse>): GetVersionResponse {
    const message = createBaseGetVersionResponse();
    message.node = object.node ?? "";
    message.abci = object.abci ?? "";
    message.p2p = object.p2p ?? "0";
    message.block = object.block ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
