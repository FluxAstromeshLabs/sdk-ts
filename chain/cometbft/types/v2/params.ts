// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: cometbft/types/v2/params.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
import { Int64Value } from "../../../google/protobuf/wrappers";

/**
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 */
export interface ConsensusParams {
  block: BlockParams | undefined;
  evidence: EvidenceParams | undefined;
  validator: ValidatorParams | undefined;
  version:
    | VersionParams
    | undefined;
  /**
   * Use FeatureParams.vote_extensions_enable_height instead
   *
   * @deprecated
   */
  abci: ABCIParams | undefined;
  synchrony: SynchronyParams | undefined;
  feature: FeatureParams | undefined;
}

/** BlockParams define limits on the block size and gas. */
export interface BlockParams {
  /**
   * Maximum size of a block, in bytes.
   *
   * Must be greater or equal to -1 and cannot be greater than the hard-coded
   * maximum block size, which is 100MB.
   *
   * If set to -1, the limit is the hard-coded maximum block size.
   */
  max_bytes: string;
  /**
   * Maximum gas wanted by transactions included in a block.
   *
   * Must be greater or equal to -1. If set to -1, no limit is enforced.
   */
  max_gas: string;
}

/** EvidenceParams determine the validity of evidences of Byzantine behavior. */
export interface EvidenceParams {
  /**
   * Maximum age of evidence, in blocks.
   *
   * The recommended formula for calculating it is max_age_duration / {average
   * block time}.
   */
  max_age_num_blocks: string;
  /**
   * Maximum age of evidence, in time.
   *
   * The recommended value of is should correspond to the application's
   * "unbonding period" or other similar mechanism for handling
   * Nothing-At-Stake attacks.
   * See: https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed.
   */
  max_age_duration:
    | Duration
    | undefined;
  /**
   * Maximum size in bytes of evidence allowed to be included in a block.
   *
   * It should fall comfortably under the maximum size of a block.
   */
  max_bytes: string;
}

/**
 * ValidatorParams restrict the public key types validators can use.
 *
 * NOTE: uses ABCI public keys naming, not Amino names.
 */
export interface ValidatorParams {
  pub_key_types: string[];
}

/** VersionParams contain the version of specific components of CometBFT. */
export interface VersionParams {
  /**
   * The ABCI application version.
   *
   * It was named app_version in CometBFT 0.34.
   */
  app: string;
}

/**
 * HashedParams is a subset of ConsensusParams.
 *
 * It is hashed into the Header.ConsensusHash.
 */
export interface HashedParams {
  block_max_bytes: string;
  block_max_gas: string;
}

/**
 * SynchronyParams determine the validity of block timestamps.
 *
 * These parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.
 * For more information on the relationship of the synchrony parameters to
 * block timestamps validity, refer to the PBTS specification:
 * https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md
 */
export interface SynchronyParams {
  /**
   * Bound for how skewed a proposer's clock may be from any validator on the
   * network while still producing valid proposals.
   */
  precision:
    | Duration
    | undefined;
  /**
   * Bound for how long a proposal message may take to reach all validators on
   * a network and still be considered valid.
   */
  message_delay: Duration | undefined;
}

/** FeatureParams configure the height from which features of CometBFT are enabled. */
export interface FeatureParams {
  /**
   * Height during which vote extensions will be enabled.
   *
   * A value of 0 means vote extensions are disabled. A value > 0 denotes
   * the height at which vote extensions will be (or have been) enabled.
   *
   * During the specified height, and for all subsequent heights, precommit
   * messages that do not contain valid extension data will be considered
   * invalid. Prior to this height, or when this height is set to 0, vote
   * extensions will not be used or accepted by validators on the network.
   *
   * Once enabled, vote extensions will be created by the application in
   * ExtendVote, validated by the application in VerifyVoteExtension, and
   * used by the application in PrepareProposal, when proposing the next block.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   */
  vote_extensions_enable_height:
    | string
    | undefined;
  /**
   * Height at which Proposer-Based Timestamps (PBTS) will be enabled.
   *
   * A value of 0 means PBTS is disabled. A value > 0 denotes the height at
   * which PBTS will be (or has been) enabled.
   *
   * From the specified height, and for all subsequent heights, the PBTS
   * algorithm will be used to produce and validate block timestamps. Prior to
   * this height, or when this height is set to 0, the legacy BFT Time
   * algorithm is used to produce and validate timestamps.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   */
  pbts_enable_height: string | undefined;
}

/**
 * ABCIParams is deprecated and its contents moved to FeatureParams
 *
 * @deprecated
 */
export interface ABCIParams {
  /**
   * vote_extensions_enable_height has been deprecated.
   * Instead, use FeatureParams.vote_extensions_enable_height.
   */
  vote_extensions_enable_height: string;
}

function createBaseConsensusParams(): ConsensusParams {
  return {
    block: undefined,
    evidence: undefined,
    validator: undefined,
    version: undefined,
    abci: undefined,
    synchrony: undefined,
    feature: undefined,
  };
}

export const ConsensusParams = {
  $type: "cometbft.types.v2.ConsensusParams" as const,

  encode(message: ConsensusParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.block !== undefined) {
      BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();
    }
    if (message.evidence !== undefined) {
      EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();
    }
    if (message.validator !== undefined) {
      ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();
    }
    if (message.version !== undefined) {
      VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();
    }
    if (message.abci !== undefined) {
      ABCIParams.encode(message.abci, writer.uint32(42).fork()).ldelim();
    }
    if (message.synchrony !== undefined) {
      SynchronyParams.encode(message.synchrony, writer.uint32(50).fork()).ldelim();
    }
    if (message.feature !== undefined) {
      FeatureParams.encode(message.feature, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConsensusParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsensusParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.block = BlockParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evidence = EvidenceParams.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validator = ValidatorParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = VersionParams.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.abci = ABCIParams.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.synchrony = SynchronyParams.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.feature = FeatureParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsensusParams {
    return {
      block: isSet(object.block) ? BlockParams.fromJSON(object.block) : undefined,
      evidence: isSet(object.evidence) ? EvidenceParams.fromJSON(object.evidence) : undefined,
      validator: isSet(object.validator) ? ValidatorParams.fromJSON(object.validator) : undefined,
      version: isSet(object.version) ? VersionParams.fromJSON(object.version) : undefined,
      abci: isSet(object.abci) ? ABCIParams.fromJSON(object.abci) : undefined,
      synchrony: isSet(object.synchrony) ? SynchronyParams.fromJSON(object.synchrony) : undefined,
      feature: isSet(object.feature) ? FeatureParams.fromJSON(object.feature) : undefined,
    };
  },

  toJSON(message: ConsensusParams): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = BlockParams.toJSON(message.block);
    }
    if (message.evidence !== undefined) {
      obj.evidence = EvidenceParams.toJSON(message.evidence);
    }
    if (message.validator !== undefined) {
      obj.validator = ValidatorParams.toJSON(message.validator);
    }
    if (message.version !== undefined) {
      obj.version = VersionParams.toJSON(message.version);
    }
    if (message.abci !== undefined) {
      obj.abci = ABCIParams.toJSON(message.abci);
    }
    if (message.synchrony !== undefined) {
      obj.synchrony = SynchronyParams.toJSON(message.synchrony);
    }
    if (message.feature !== undefined) {
      obj.feature = FeatureParams.toJSON(message.feature);
    }
    return obj;
  },

  create(base?: DeepPartial<ConsensusParams>): ConsensusParams {
    return ConsensusParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConsensusParams>): ConsensusParams {
    const message = createBaseConsensusParams();
    message.block = (object.block !== undefined && object.block !== null)
      ? BlockParams.fromPartial(object.block)
      : undefined;
    message.evidence = (object.evidence !== undefined && object.evidence !== null)
      ? EvidenceParams.fromPartial(object.evidence)
      : undefined;
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? ValidatorParams.fromPartial(object.validator)
      : undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? VersionParams.fromPartial(object.version)
      : undefined;
    message.abci = (object.abci !== undefined && object.abci !== null)
      ? ABCIParams.fromPartial(object.abci)
      : undefined;
    message.synchrony = (object.synchrony !== undefined && object.synchrony !== null)
      ? SynchronyParams.fromPartial(object.synchrony)
      : undefined;
    message.feature = (object.feature !== undefined && object.feature !== null)
      ? FeatureParams.fromPartial(object.feature)
      : undefined;
    return message;
  },
};

function createBaseBlockParams(): BlockParams {
  return { max_bytes: "0", max_gas: "0" };
}

export const BlockParams = {
  $type: "cometbft.types.v2.BlockParams" as const,

  encode(message: BlockParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.max_bytes !== "0") {
      writer.uint32(8).int64(message.max_bytes);
    }
    if (message.max_gas !== "0") {
      writer.uint32(16).int64(message.max_gas);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.max_bytes = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.max_gas = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockParams {
    return {
      max_bytes: isSet(object.max_bytes) ? globalThis.String(object.max_bytes) : "0",
      max_gas: isSet(object.max_gas) ? globalThis.String(object.max_gas) : "0",
    };
  },

  toJSON(message: BlockParams): unknown {
    const obj: any = {};
    if (message.max_bytes !== undefined) {
      obj.max_bytes = message.max_bytes;
    }
    if (message.max_gas !== undefined) {
      obj.max_gas = message.max_gas;
    }
    return obj;
  },

  create(base?: DeepPartial<BlockParams>): BlockParams {
    return BlockParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockParams>): BlockParams {
    const message = createBaseBlockParams();
    message.max_bytes = object.max_bytes ?? "0";
    message.max_gas = object.max_gas ?? "0";
    return message;
  },
};

function createBaseEvidenceParams(): EvidenceParams {
  return { max_age_num_blocks: "0", max_age_duration: undefined, max_bytes: "0" };
}

export const EvidenceParams = {
  $type: "cometbft.types.v2.EvidenceParams" as const,

  encode(message: EvidenceParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.max_age_num_blocks !== "0") {
      writer.uint32(8).int64(message.max_age_num_blocks);
    }
    if (message.max_age_duration !== undefined) {
      Duration.encode(message.max_age_duration, writer.uint32(18).fork()).ldelim();
    }
    if (message.max_bytes !== "0") {
      writer.uint32(24).int64(message.max_bytes);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvidenceParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvidenceParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.max_age_num_blocks = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.max_age_duration = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.max_bytes = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvidenceParams {
    return {
      max_age_num_blocks: isSet(object.max_age_num_blocks) ? globalThis.String(object.max_age_num_blocks) : "0",
      max_age_duration: isSet(object.max_age_duration) ? Duration.fromJSON(object.max_age_duration) : undefined,
      max_bytes: isSet(object.max_bytes) ? globalThis.String(object.max_bytes) : "0",
    };
  },

  toJSON(message: EvidenceParams): unknown {
    const obj: any = {};
    if (message.max_age_num_blocks !== undefined) {
      obj.max_age_num_blocks = message.max_age_num_blocks;
    }
    if (message.max_age_duration !== undefined) {
      obj.max_age_duration = Duration.toJSON(message.max_age_duration);
    }
    if (message.max_bytes !== undefined) {
      obj.max_bytes = message.max_bytes;
    }
    return obj;
  },

  create(base?: DeepPartial<EvidenceParams>): EvidenceParams {
    return EvidenceParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvidenceParams>): EvidenceParams {
    const message = createBaseEvidenceParams();
    message.max_age_num_blocks = object.max_age_num_blocks ?? "0";
    message.max_age_duration = (object.max_age_duration !== undefined && object.max_age_duration !== null)
      ? Duration.fromPartial(object.max_age_duration)
      : undefined;
    message.max_bytes = object.max_bytes ?? "0";
    return message;
  },
};

function createBaseValidatorParams(): ValidatorParams {
  return { pub_key_types: [] };
}

export const ValidatorParams = {
  $type: "cometbft.types.v2.ValidatorParams" as const,

  encode(message: ValidatorParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.pub_key_types) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pub_key_types.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorParams {
    return {
      pub_key_types: globalThis.Array.isArray(object?.pub_key_types)
        ? object.pub_key_types.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ValidatorParams): unknown {
    const obj: any = {};
    if (message.pub_key_types?.length) {
      obj.pub_key_types = message.pub_key_types;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorParams>): ValidatorParams {
    return ValidatorParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorParams>): ValidatorParams {
    const message = createBaseValidatorParams();
    message.pub_key_types = object.pub_key_types?.map((e) => e) || [];
    return message;
  },
};

function createBaseVersionParams(): VersionParams {
  return { app: "0" };
}

export const VersionParams = {
  $type: "cometbft.types.v2.VersionParams" as const,

  encode(message: VersionParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.app !== "0") {
      writer.uint32(8).uint64(message.app);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VersionParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.app = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionParams {
    return { app: isSet(object.app) ? globalThis.String(object.app) : "0" };
  },

  toJSON(message: VersionParams): unknown {
    const obj: any = {};
    if (message.app !== undefined) {
      obj.app = message.app;
    }
    return obj;
  },

  create(base?: DeepPartial<VersionParams>): VersionParams {
    return VersionParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VersionParams>): VersionParams {
    const message = createBaseVersionParams();
    message.app = object.app ?? "0";
    return message;
  },
};

function createBaseHashedParams(): HashedParams {
  return { block_max_bytes: "0", block_max_gas: "0" };
}

export const HashedParams = {
  $type: "cometbft.types.v2.HashedParams" as const,

  encode(message: HashedParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.block_max_bytes !== "0") {
      writer.uint32(8).int64(message.block_max_bytes);
    }
    if (message.block_max_gas !== "0") {
      writer.uint32(16).int64(message.block_max_gas);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HashedParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashedParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.block_max_bytes = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.block_max_gas = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HashedParams {
    return {
      block_max_bytes: isSet(object.block_max_bytes) ? globalThis.String(object.block_max_bytes) : "0",
      block_max_gas: isSet(object.block_max_gas) ? globalThis.String(object.block_max_gas) : "0",
    };
  },

  toJSON(message: HashedParams): unknown {
    const obj: any = {};
    if (message.block_max_bytes !== undefined) {
      obj.block_max_bytes = message.block_max_bytes;
    }
    if (message.block_max_gas !== undefined) {
      obj.block_max_gas = message.block_max_gas;
    }
    return obj;
  },

  create(base?: DeepPartial<HashedParams>): HashedParams {
    return HashedParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HashedParams>): HashedParams {
    const message = createBaseHashedParams();
    message.block_max_bytes = object.block_max_bytes ?? "0";
    message.block_max_gas = object.block_max_gas ?? "0";
    return message;
  },
};

function createBaseSynchronyParams(): SynchronyParams {
  return { precision: undefined, message_delay: undefined };
}

export const SynchronyParams = {
  $type: "cometbft.types.v2.SynchronyParams" as const,

  encode(message: SynchronyParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.precision !== undefined) {
      Duration.encode(message.precision, writer.uint32(10).fork()).ldelim();
    }
    if (message.message_delay !== undefined) {
      Duration.encode(message.message_delay, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SynchronyParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynchronyParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.precision = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message_delay = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynchronyParams {
    return {
      precision: isSet(object.precision) ? Duration.fromJSON(object.precision) : undefined,
      message_delay: isSet(object.message_delay) ? Duration.fromJSON(object.message_delay) : undefined,
    };
  },

  toJSON(message: SynchronyParams): unknown {
    const obj: any = {};
    if (message.precision !== undefined) {
      obj.precision = Duration.toJSON(message.precision);
    }
    if (message.message_delay !== undefined) {
      obj.message_delay = Duration.toJSON(message.message_delay);
    }
    return obj;
  },

  create(base?: DeepPartial<SynchronyParams>): SynchronyParams {
    return SynchronyParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynchronyParams>): SynchronyParams {
    const message = createBaseSynchronyParams();
    message.precision = (object.precision !== undefined && object.precision !== null)
      ? Duration.fromPartial(object.precision)
      : undefined;
    message.message_delay = (object.message_delay !== undefined && object.message_delay !== null)
      ? Duration.fromPartial(object.message_delay)
      : undefined;
    return message;
  },
};

function createBaseFeatureParams(): FeatureParams {
  return { vote_extensions_enable_height: undefined, pbts_enable_height: undefined };
}

export const FeatureParams = {
  $type: "cometbft.types.v2.FeatureParams" as const,

  encode(message: FeatureParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vote_extensions_enable_height !== undefined) {
      Int64Value.encode({ value: message.vote_extensions_enable_height! }, writer.uint32(10).fork()).ldelim();
    }
    if (message.pbts_enable_height !== undefined) {
      Int64Value.encode({ value: message.pbts_enable_height! }, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeatureParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vote_extensions_enable_height = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pbts_enable_height = Int64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureParams {
    return {
      vote_extensions_enable_height: isSet(object.vote_extensions_enable_height)
        ? String(object.vote_extensions_enable_height)
        : undefined,
      pbts_enable_height: isSet(object.pbts_enable_height) ? String(object.pbts_enable_height) : undefined,
    };
  },

  toJSON(message: FeatureParams): unknown {
    const obj: any = {};
    if (message.vote_extensions_enable_height !== undefined) {
      obj.vote_extensions_enable_height = message.vote_extensions_enable_height;
    }
    if (message.pbts_enable_height !== undefined) {
      obj.pbts_enable_height = message.pbts_enable_height;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureParams>): FeatureParams {
    return FeatureParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureParams>): FeatureParams {
    const message = createBaseFeatureParams();
    message.vote_extensions_enable_height = object.vote_extensions_enable_height ?? undefined;
    message.pbts_enable_height = object.pbts_enable_height ?? undefined;
    return message;
  },
};

function createBaseABCIParams(): ABCIParams {
  return { vote_extensions_enable_height: "0" };
}

export const ABCIParams = {
  $type: "cometbft.types.v2.ABCIParams" as const,

  encode(message: ABCIParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vote_extensions_enable_height !== "0") {
      writer.uint32(8).int64(message.vote_extensions_enable_height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ABCIParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABCIParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vote_extensions_enable_height = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABCIParams {
    return {
      vote_extensions_enable_height: isSet(object.vote_extensions_enable_height)
        ? globalThis.String(object.vote_extensions_enable_height)
        : "0",
    };
  },

  toJSON(message: ABCIParams): unknown {
    const obj: any = {};
    if (message.vote_extensions_enable_height !== undefined) {
      obj.vote_extensions_enable_height = message.vote_extensions_enable_height;
    }
    return obj;
  },

  create(base?: DeepPartial<ABCIParams>): ABCIParams {
    return ABCIParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABCIParams>): ABCIParams {
    const message = createBaseABCIParams();
    message.vote_extensions_enable_height = object.vote_extensions_enable_height ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
