// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ibc/applications/transfer/v1/transfer.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

/**
 * Params defines the set of IBC transfer parameters.
 * NOTE: To prevent a single token from being transferred, set the
 * TransfersEnabled parameter to true and then set the bank module's SendEnabled
 * parameter for the denomination to false.
 */
export interface Params {
  /**
   * send_enabled enables or disables all cross-chain token transfers from this
   * chain.
   */
  send_enabled: boolean;
  /**
   * receive_enabled enables or disables all cross-chain token transfers to this
   * chain.
   */
  receive_enabled: boolean;
}

function createBaseParams(): Params {
  return { send_enabled: false, receive_enabled: false };
}

export const Params = {
  $type: "ibc.applications.transfer.v1.Params" as const,

  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.send_enabled !== false) {
      writer.uint32(8).bool(message.send_enabled);
    }
    if (message.receive_enabled !== false) {
      writer.uint32(16).bool(message.receive_enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.send_enabled = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.receive_enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      send_enabled: isSet(object.send_enabled) ? globalThis.Boolean(object.send_enabled) : false,
      receive_enabled: isSet(object.receive_enabled) ? globalThis.Boolean(object.receive_enabled) : false,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.send_enabled !== undefined) {
      obj.send_enabled = message.send_enabled;
    }
    if (message.receive_enabled !== undefined) {
      obj.receive_enabled = message.receive_enabled;
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.send_enabled = object.send_enabled ?? false;
    message.receive_enabled = object.receive_enabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
