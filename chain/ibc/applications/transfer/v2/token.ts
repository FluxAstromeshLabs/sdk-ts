// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: ibc/applications/transfer/v2/token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Hop } from "../v1/transfer";

/** Token defines a struct which represents a token to be transferred. */
export interface Token {
  /** the token denomination */
  denom:
    | Denom
    | undefined;
  /** the token amount to be transferred */
  amount: string;
}

/** Denom holds the base denom of a Token and a trace of the chains it was sent through. */
export interface Denom {
  /** the base token denomination */
  base: string;
  /** the trace of the token */
  trace: Hop[];
}

function createBaseToken(): Token {
  return { denom: undefined, amount: "" };
}

export const Token: MessageFns<Token, "ibc.applications.transfer.v2.Token"> = {
  $type: "ibc.applications.transfer.v2.Token" as const,

  encode(message: Token, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== undefined) {
      Denom.encode(message.denom, writer.uint32(10).fork()).join();
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Token {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.denom = Denom.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Token {
    return {
      denom: isSet(object.denom) ? Denom.fromJSON(object.denom) : undefined,
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: Token): unknown {
    const obj: any = {};
    if (message.denom !== undefined) {
      obj.denom = Denom.toJSON(message.denom);
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<Token>): Token {
    return Token.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Token>): Token {
    const message = createBaseToken();
    message.denom = (object.denom !== undefined && object.denom !== null) ? Denom.fromPartial(object.denom) : undefined;
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseDenom(): Denom {
  return { base: "", trace: [] };
}

export const Denom: MessageFns<Denom, "ibc.applications.transfer.v2.Denom"> = {
  $type: "ibc.applications.transfer.v2.Denom" as const,

  encode(message: Denom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== "") {
      writer.uint32(10).string(message.base);
    }
    for (const v of message.trace) {
      Hop.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Denom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trace.push(Hop.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Denom {
    return {
      base: isSet(object.base) ? globalThis.String(object.base) : "",
      trace: globalThis.Array.isArray(object?.trace) ? object.trace.map((e: any) => Hop.fromJSON(e)) : [],
    };
  },

  toJSON(message: Denom): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = message.base;
    }
    if (message.trace?.length) {
      obj.trace = message.trace.map((e) => Hop.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Denom>): Denom {
    return Denom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Denom>): Denom {
    const message = createBaseDenom();
    message.base = object.base ?? "";
    message.trace = object.trace?.map((e) => Hop.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
