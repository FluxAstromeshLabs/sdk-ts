// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ibc/applications/transfer/v2/genesis.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { Packet, PacketId } from "../../../core/channel/v1/channel";
import { Params } from "../v1/transfer";
import { Denom } from "./token";

/** GenesisState defines the ibc-transfer genesis state */
export interface GenesisState {
  port_id: string;
  denoms: Denom[];
  params:
    | Params
    | undefined;
  /**
   * total_escrowed contains the total amount of tokens escrowed
   * by the transfer module
   */
  total_escrowed: Coin[];
  /**
   * forwarded_packets contains the forwarded packets stored as part of the
   * packet forwarding lifecycle
   */
  forwarded_packets: ForwardedPacket[];
}

/** ForwardedPacket defines the genesis type necessary to retrieve and store forwarded packets. */
export interface ForwardedPacket {
  forward_key: PacketId | undefined;
  packet: Packet | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { port_id: "", denoms: [], params: undefined, total_escrowed: [], forwarded_packets: [] };
}

export const GenesisState = {
  $type: "ibc.applications.transfer.v2.GenesisState" as const,

  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.port_id !== "") {
      writer.uint32(10).string(message.port_id);
    }
    for (const v of message.denoms) {
      Denom.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.total_escrowed) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.forwarded_packets) {
      ForwardedPacket.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.port_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denoms.push(Denom.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.total_escrowed.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.forwarded_packets.push(ForwardedPacket.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
      denoms: globalThis.Array.isArray(object?.denoms) ? object.denoms.map((e: any) => Denom.fromJSON(e)) : [],
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      total_escrowed: globalThis.Array.isArray(object?.total_escrowed)
        ? object.total_escrowed.map((e: any) => Coin.fromJSON(e))
        : [],
      forwarded_packets: globalThis.Array.isArray(object?.forwarded_packets)
        ? object.forwarded_packets.map((e: any) => ForwardedPacket.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.port_id !== undefined) {
      obj.port_id = message.port_id;
    }
    if (message.denoms?.length) {
      obj.denoms = message.denoms.map((e) => Denom.toJSON(e));
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.total_escrowed?.length) {
      obj.total_escrowed = message.total_escrowed.map((e) => Coin.toJSON(e));
    }
    if (message.forwarded_packets?.length) {
      obj.forwarded_packets = message.forwarded_packets.map((e) => ForwardedPacket.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.port_id = object.port_id ?? "";
    message.denoms = object.denoms?.map((e) => Denom.fromPartial(e)) || [];
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.total_escrowed = object.total_escrowed?.map((e) => Coin.fromPartial(e)) || [];
    message.forwarded_packets = object.forwarded_packets?.map((e) => ForwardedPacket.fromPartial(e)) || [];
    return message;
  },
};

function createBaseForwardedPacket(): ForwardedPacket {
  return { forward_key: undefined, packet: undefined };
}

export const ForwardedPacket = {
  $type: "ibc.applications.transfer.v2.ForwardedPacket" as const,

  encode(message: ForwardedPacket, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.forward_key !== undefined) {
      PacketId.encode(message.forward_key, writer.uint32(10).fork()).ldelim();
    }
    if (message.packet !== undefined) {
      Packet.encode(message.packet, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ForwardedPacket {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForwardedPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.forward_key = PacketId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.packet = Packet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForwardedPacket {
    return {
      forward_key: isSet(object.forward_key) ? PacketId.fromJSON(object.forward_key) : undefined,
      packet: isSet(object.packet) ? Packet.fromJSON(object.packet) : undefined,
    };
  },

  toJSON(message: ForwardedPacket): unknown {
    const obj: any = {};
    if (message.forward_key !== undefined) {
      obj.forward_key = PacketId.toJSON(message.forward_key);
    }
    if (message.packet !== undefined) {
      obj.packet = Packet.toJSON(message.packet);
    }
    return obj;
  },

  create(base?: DeepPartial<ForwardedPacket>): ForwardedPacket {
    return ForwardedPacket.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ForwardedPacket>): ForwardedPacket {
    const message = createBaseForwardedPacket();
    message.forward_key = (object.forward_key !== undefined && object.forward_key !== null)
      ? PacketId.fromPartial(object.forward_key)
      : undefined;
    message.packet = (object.packet !== undefined && object.packet !== null)
      ? Packet.fromPartial(object.packet)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
