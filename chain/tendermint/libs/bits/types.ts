// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tendermint/libs/bits/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface BitArray {
  bits: string;
  elems: string[];
}

function createBaseBitArray(): BitArray {
  return { bits: "0", elems: [] };
}

export const BitArray: MessageFns<BitArray, "tendermint.libs.bits.BitArray"> = {
  $type: "tendermint.libs.bits.BitArray" as const,

  encode(message: BitArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bits !== "0") {
      writer.uint32(8).int64(message.bits);
    }
    writer.uint32(18).fork();
    for (const v of message.elems) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BitArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBitArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bits = reader.int64().toString();
          continue;
        case 2:
          if (tag === 16) {
            message.elems.push(reader.uint64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.elems.push(reader.uint64().toString());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BitArray {
    return {
      bits: isSet(object.bits) ? globalThis.String(object.bits) : "0",
      elems: globalThis.Array.isArray(object?.elems) ? object.elems.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BitArray): unknown {
    const obj: any = {};
    if (message.bits !== undefined) {
      obj.bits = message.bits;
    }
    if (message.elems?.length) {
      obj.elems = message.elems;
    }
    return obj;
  },

  create(base?: DeepPartial<BitArray>): BitArray {
    return BitArray.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BitArray>): BitArray {
    const message = createBaseBitArray();
    message.bits = object.bits ?? "0";
    message.elems = object.elems?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
