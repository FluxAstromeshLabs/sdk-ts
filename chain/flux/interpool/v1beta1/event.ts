// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/interpool/v1beta1/event.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Op, opFromJSON, opToJSON } from "../../eventstream/v1beta1/query";
import { InterPool, PoolShare } from "./interpool";

/** Event to capture the creation, update, or deletion of a pool */
export interface InterPoolEvent {
  /** The operation type */
  op: Op;
  /** The pool associated with the event */
  pool: InterPool | undefined;
}

/** Event to capture liquidity changes (deposit, withdrawal, etc.) */
export interface LiquidityEvent {
  /** The operation type */
  op: Op;
  /** The pool information and its updates */
  pool:
    | InterPool
    | undefined;
  /** The specific pool shares that were updated as part of the liquidity event */
  pool_share:
    | PoolShare
    | undefined;
  /**
   * The capital that has changed as part of the event (amounts added or
   * removed)
   */
  changed_capital: Coin[];
}

function createBaseInterPoolEvent(): InterPoolEvent {
  return { op: 0, pool: undefined };
}

export const InterPoolEvent = {
  $type: "flux.interpool.v1beta1.InterPoolEvent" as const,

  encode(message: InterPoolEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.pool !== undefined) {
      InterPool.encode(message.pool, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InterPoolEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterPoolEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool = InterPool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterPoolEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      pool: isSet(object.pool) ? InterPool.fromJSON(object.pool) : undefined,
    };
  },

  toJSON(message: InterPoolEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.pool !== undefined) {
      obj.pool = InterPool.toJSON(message.pool);
    }
    return obj;
  },

  create(base?: DeepPartial<InterPoolEvent>): InterPoolEvent {
    return InterPoolEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterPoolEvent>): InterPoolEvent {
    const message = createBaseInterPoolEvent();
    message.op = object.op ?? 0;
    message.pool = (object.pool !== undefined && object.pool !== null) ? InterPool.fromPartial(object.pool) : undefined;
    return message;
  },
};

function createBaseLiquidityEvent(): LiquidityEvent {
  return { op: 0, pool: undefined, pool_share: undefined, changed_capital: [] };
}

export const LiquidityEvent = {
  $type: "flux.interpool.v1beta1.LiquidityEvent" as const,

  encode(message: LiquidityEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.pool !== undefined) {
      InterPool.encode(message.pool, writer.uint32(18).fork()).ldelim();
    }
    if (message.pool_share !== undefined) {
      PoolShare.encode(message.pool_share, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.changed_capital) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LiquidityEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiquidityEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool = InterPool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pool_share = PoolShare.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.changed_capital.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiquidityEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      pool: isSet(object.pool) ? InterPool.fromJSON(object.pool) : undefined,
      pool_share: isSet(object.pool_share) ? PoolShare.fromJSON(object.pool_share) : undefined,
      changed_capital: globalThis.Array.isArray(object?.changed_capital)
        ? object.changed_capital.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LiquidityEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.pool !== undefined) {
      obj.pool = InterPool.toJSON(message.pool);
    }
    if (message.pool_share !== undefined) {
      obj.pool_share = PoolShare.toJSON(message.pool_share);
    }
    if (message.changed_capital?.length) {
      obj.changed_capital = message.changed_capital.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LiquidityEvent>): LiquidityEvent {
    return LiquidityEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LiquidityEvent>): LiquidityEvent {
    const message = createBaseLiquidityEvent();
    message.op = object.op ?? 0;
    message.pool = (object.pool !== undefined && object.pool !== null) ? InterPool.fromPartial(object.pool) : undefined;
    message.pool_share = (object.pool_share !== undefined && object.pool_share !== null)
      ? PoolShare.fromPartial(object.pool_share)
      : undefined;
    message.changed_capital = object.changed_capital?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
