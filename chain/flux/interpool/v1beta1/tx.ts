// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/interpool/v1beta1/tx.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface MsgCreatePool {
  sender: string;
  operator_commission: string;
}

export interface MsgCreatePoolResponse {
}

export interface MsgUpdatePool {
  sender: string;
  pool_id: string;
  inventory_snapshot: string[];
  base_capital: string;
  input_blob: Uint8Array;
  output_blob: Uint8Array;
}

export interface MsgUpdatePoolResponse {
}

export interface MsgDeposit {
  sender: string;
  pool_id: string;
  deposit_snapshot: string[];
}

export interface MsgDepositResponse {
}

export interface MsgWithdraw {
  sender: string;
  pool_id: string;
  percentage: string;
}

export interface MsgWithdrawResponse {
}

function createBaseMsgCreatePool(): MsgCreatePool {
  return { sender: "", operator_commission: "0" };
}

export const MsgCreatePool = {
  $type: "flux.interpool.v1beta1.MsgCreatePool" as const,

  encode(message: MsgCreatePool, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.operator_commission !== "0") {
      writer.uint32(16).uint64(message.operator_commission);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePool {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.operator_commission = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePool {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      operator_commission: isSet(object.operator_commission) ? globalThis.String(object.operator_commission) : "0",
    };
  },

  toJSON(message: MsgCreatePool): unknown {
    const obj: any = {};
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    if (message.operator_commission !== undefined) {
      obj.operator_commission = message.operator_commission;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreatePool>): MsgCreatePool {
    return MsgCreatePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreatePool>): MsgCreatePool {
    const message = createBaseMsgCreatePool();
    message.sender = object.sender ?? "";
    message.operator_commission = object.operator_commission ?? "0";
    return message;
  },
};

function createBaseMsgCreatePoolResponse(): MsgCreatePoolResponse {
  return {};
}

export const MsgCreatePoolResponse = {
  $type: "flux.interpool.v1beta1.MsgCreatePoolResponse" as const,

  encode(_: MsgCreatePoolResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePoolResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreatePoolResponse {
    return {};
  },

  toJSON(_: MsgCreatePoolResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreatePoolResponse>): MsgCreatePoolResponse {
    return MsgCreatePoolResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreatePoolResponse>): MsgCreatePoolResponse {
    const message = createBaseMsgCreatePoolResponse();
    return message;
  },
};

function createBaseMsgUpdatePool(): MsgUpdatePool {
  return {
    sender: "",
    pool_id: "",
    inventory_snapshot: [],
    base_capital: "",
    input_blob: new Uint8Array(0),
    output_blob: new Uint8Array(0),
  };
}

export const MsgUpdatePool = {
  $type: "flux.interpool.v1beta1.MsgUpdatePool" as const,

  encode(message: MsgUpdatePool, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.pool_id !== "") {
      writer.uint32(18).string(message.pool_id);
    }
    for (const v of message.inventory_snapshot) {
      writer.uint32(26).string(v!);
    }
    if (message.base_capital !== "") {
      writer.uint32(34).string(message.base_capital);
    }
    if (message.input_blob.length !== 0) {
      writer.uint32(42).bytes(message.input_blob);
    }
    if (message.output_blob.length !== 0) {
      writer.uint32(50).bytes(message.output_blob);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePool {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inventory_snapshot.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.base_capital = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.input_blob = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.output_blob = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdatePool {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "",
      inventory_snapshot: globalThis.Array.isArray(object?.inventory_snapshot)
        ? object.inventory_snapshot.map((e: any) => globalThis.String(e))
        : [],
      base_capital: isSet(object.base_capital) ? globalThis.String(object.base_capital) : "",
      input_blob: isSet(object.input_blob) ? bytesFromBase64(object.input_blob) : new Uint8Array(0),
      output_blob: isSet(object.output_blob) ? bytesFromBase64(object.output_blob) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgUpdatePool): unknown {
    const obj: any = {};
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    if (message.pool_id !== undefined) {
      obj.pool_id = message.pool_id;
    }
    if (message.inventory_snapshot?.length) {
      obj.inventory_snapshot = message.inventory_snapshot;
    }
    if (message.base_capital !== undefined) {
      obj.base_capital = message.base_capital;
    }
    if (message.input_blob !== undefined) {
      obj.input_blob = base64FromBytes(message.input_blob);
    }
    if (message.output_blob !== undefined) {
      obj.output_blob = base64FromBytes(message.output_blob);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdatePool>): MsgUpdatePool {
    return MsgUpdatePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdatePool>): MsgUpdatePool {
    const message = createBaseMsgUpdatePool();
    message.sender = object.sender ?? "";
    message.pool_id = object.pool_id ?? "";
    message.inventory_snapshot = object.inventory_snapshot?.map((e) => e) || [];
    message.base_capital = object.base_capital ?? "";
    message.input_blob = object.input_blob ?? new Uint8Array(0);
    message.output_blob = object.output_blob ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgUpdatePoolResponse(): MsgUpdatePoolResponse {
  return {};
}

export const MsgUpdatePoolResponse = {
  $type: "flux.interpool.v1beta1.MsgUpdatePoolResponse" as const,

  encode(_: MsgUpdatePoolResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePoolResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdatePoolResponse {
    return {};
  },

  toJSON(_: MsgUpdatePoolResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdatePoolResponse>): MsgUpdatePoolResponse {
    return MsgUpdatePoolResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdatePoolResponse>): MsgUpdatePoolResponse {
    const message = createBaseMsgUpdatePoolResponse();
    return message;
  },
};

function createBaseMsgDeposit(): MsgDeposit {
  return { sender: "", pool_id: "", deposit_snapshot: [] };
}

export const MsgDeposit = {
  $type: "flux.interpool.v1beta1.MsgDeposit" as const,

  encode(message: MsgDeposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.pool_id !== "") {
      writer.uint32(18).string(message.pool_id);
    }
    for (const v of message.deposit_snapshot) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deposit_snapshot.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeposit {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "",
      deposit_snapshot: globalThis.Array.isArray(object?.deposit_snapshot)
        ? object.deposit_snapshot.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: MsgDeposit): unknown {
    const obj: any = {};
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    if (message.pool_id !== undefined) {
      obj.pool_id = message.pool_id;
    }
    if (message.deposit_snapshot?.length) {
      obj.deposit_snapshot = message.deposit_snapshot;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeposit>): MsgDeposit {
    return MsgDeposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeposit>): MsgDeposit {
    const message = createBaseMsgDeposit();
    message.sender = object.sender ?? "";
    message.pool_id = object.pool_id ?? "";
    message.deposit_snapshot = object.deposit_snapshot?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgDepositResponse(): MsgDepositResponse {
  return {};
}

export const MsgDepositResponse = {
  $type: "flux.interpool.v1beta1.MsgDepositResponse" as const,

  encode(_: MsgDepositResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDepositResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDepositResponse {
    return {};
  },

  toJSON(_: MsgDepositResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDepositResponse>): MsgDepositResponse {
    return MsgDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDepositResponse>): MsgDepositResponse {
    const message = createBaseMsgDepositResponse();
    return message;
  },
};

function createBaseMsgWithdraw(): MsgWithdraw {
  return { sender: "", pool_id: "", percentage: "" };
}

export const MsgWithdraw = {
  $type: "flux.interpool.v1beta1.MsgWithdraw" as const,

  encode(message: MsgWithdraw, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.pool_id !== "") {
      writer.uint32(18).string(message.pool_id);
    }
    if (message.percentage !== "") {
      writer.uint32(26).string(message.percentage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgWithdraw {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdraw();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.percentage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdraw {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "",
      percentage: isSet(object.percentage) ? globalThis.String(object.percentage) : "",
    };
  },

  toJSON(message: MsgWithdraw): unknown {
    const obj: any = {};
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    if (message.pool_id !== undefined) {
      obj.pool_id = message.pool_id;
    }
    if (message.percentage !== undefined) {
      obj.percentage = message.percentage;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdraw>): MsgWithdraw {
    return MsgWithdraw.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdraw>): MsgWithdraw {
    const message = createBaseMsgWithdraw();
    message.sender = object.sender ?? "";
    message.pool_id = object.pool_id ?? "";
    message.percentage = object.percentage ?? "";
    return message;
  },
};

function createBaseMsgWithdrawResponse(): MsgWithdrawResponse {
  return {};
}

export const MsgWithdrawResponse = {
  $type: "flux.interpool.v1beta1.MsgWithdrawResponse" as const,

  encode(_: MsgWithdrawResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgWithdrawResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgWithdrawResponse {
    return {};
  },

  toJSON(_: MsgWithdrawResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawResponse>): MsgWithdrawResponse {
    return MsgWithdrawResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgWithdrawResponse>): MsgWithdrawResponse {
    const message = createBaseMsgWithdrawResponse();
    return message;
  },
};

export interface Msg {
  CreatePool(request: DeepPartial<MsgCreatePool>, metadata?: grpc.Metadata): Promise<MsgCreatePoolResponse>;
  UpdatePool(request: DeepPartial<MsgUpdatePool>, metadata?: grpc.Metadata): Promise<MsgUpdatePoolResponse>;
  Deposit(request: DeepPartial<MsgDeposit>, metadata?: grpc.Metadata): Promise<MsgDepositResponse>;
  Withdraw(request: DeepPartial<MsgWithdraw>, metadata?: grpc.Metadata): Promise<MsgWithdrawResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.CreatePool = this.CreatePool.bind(this);
    this.UpdatePool = this.UpdatePool.bind(this);
    this.Deposit = this.Deposit.bind(this);
    this.Withdraw = this.Withdraw.bind(this);
  }

  CreatePool(request: DeepPartial<MsgCreatePool>, metadata?: grpc.Metadata): Promise<MsgCreatePoolResponse> {
    return this.rpc.unary(MsgCreatePoolDesc, MsgCreatePool.fromPartial(request), metadata);
  }

  UpdatePool(request: DeepPartial<MsgUpdatePool>, metadata?: grpc.Metadata): Promise<MsgUpdatePoolResponse> {
    return this.rpc.unary(MsgUpdatePoolDesc, MsgUpdatePool.fromPartial(request), metadata);
  }

  Deposit(request: DeepPartial<MsgDeposit>, metadata?: grpc.Metadata): Promise<MsgDepositResponse> {
    return this.rpc.unary(MsgDepositDesc, MsgDeposit.fromPartial(request), metadata);
  }

  Withdraw(request: DeepPartial<MsgWithdraw>, metadata?: grpc.Metadata): Promise<MsgWithdrawResponse> {
    return this.rpc.unary(MsgWithdrawDesc, MsgWithdraw.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "flux.interpool.v1beta1.Msg" };

export const MsgCreatePoolDesc: UnaryMethodDefinitionish = {
  methodName: "CreatePool",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgCreatePool.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgCreatePoolResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgUpdatePoolDesc: UnaryMethodDefinitionish = {
  methodName: "UpdatePool",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpdatePool.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpdatePoolResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgDepositDesc: UnaryMethodDefinitionish = {
  methodName: "Deposit",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgDeposit.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgDepositResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgWithdrawDesc: UnaryMethodDefinitionish = {
  methodName: "Withdraw",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgWithdraw.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgWithdrawResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
