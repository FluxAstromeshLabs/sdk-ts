// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: flux/strategy/v1beta1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Plane, planeFromJSON, planeToJSON } from "../../astromesh/v1beta1/tx";
import { Strategy, StrategyType, strategyTypeFromJSON, strategyTypeToJSON } from "./strategy";

export interface GetStrategyByIdRequest {
  id: string;
}

export interface GetStrategyByIdResponse {
  strategy: Strategy | undefined;
}

export interface ListStrategiesRequest {
}

export interface ListStrategiesByOwnerRequest {
  owner: string;
}

export interface ListStrategiesByTypeRequest {
  type: StrategyType;
}

export interface ListStrategiesResponse {
  strategies: Strategy[];
}

export interface GetStrategyVerifierRequest {
  plane: Plane;
  contract_address: string;
}

export interface GetStrategyVerifierResponse {
  verifier: string;
}

function createBaseGetStrategyByIdRequest(): GetStrategyByIdRequest {
  return { id: "" };
}

export const GetStrategyByIdRequest: MessageFns<
  GetStrategyByIdRequest,
  "flux.strategy.v1beta1.GetStrategyByIdRequest"
> = {
  $type: "flux.strategy.v1beta1.GetStrategyByIdRequest" as const,

  encode(message: GetStrategyByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStrategyByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStrategyByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStrategyByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetStrategyByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStrategyByIdRequest>): GetStrategyByIdRequest {
    return GetStrategyByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStrategyByIdRequest>): GetStrategyByIdRequest {
    const message = createBaseGetStrategyByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetStrategyByIdResponse(): GetStrategyByIdResponse {
  return { strategy: undefined };
}

export const GetStrategyByIdResponse: MessageFns<
  GetStrategyByIdResponse,
  "flux.strategy.v1beta1.GetStrategyByIdResponse"
> = {
  $type: "flux.strategy.v1beta1.GetStrategyByIdResponse" as const,

  encode(message: GetStrategyByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.strategy !== undefined) {
      Strategy.encode(message.strategy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStrategyByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStrategyByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.strategy = Strategy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStrategyByIdResponse {
    return { strategy: isSet(object.strategy) ? Strategy.fromJSON(object.strategy) : undefined };
  },

  toJSON(message: GetStrategyByIdResponse): unknown {
    const obj: any = {};
    if (message.strategy !== undefined) {
      obj.strategy = Strategy.toJSON(message.strategy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetStrategyByIdResponse>): GetStrategyByIdResponse {
    return GetStrategyByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStrategyByIdResponse>): GetStrategyByIdResponse {
    const message = createBaseGetStrategyByIdResponse();
    message.strategy = (object.strategy !== undefined && object.strategy !== null)
      ? Strategy.fromPartial(object.strategy)
      : undefined;
    return message;
  },
};

function createBaseListStrategiesRequest(): ListStrategiesRequest {
  return {};
}

export const ListStrategiesRequest: MessageFns<ListStrategiesRequest, "flux.strategy.v1beta1.ListStrategiesRequest"> = {
  $type: "flux.strategy.v1beta1.ListStrategiesRequest" as const,

  encode(_: ListStrategiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStrategiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListStrategiesRequest {
    return {};
  },

  toJSON(_: ListStrategiesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesRequest>): ListStrategiesRequest {
    return ListStrategiesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListStrategiesRequest>): ListStrategiesRequest {
    const message = createBaseListStrategiesRequest();
    return message;
  },
};

function createBaseListStrategiesByOwnerRequest(): ListStrategiesByOwnerRequest {
  return { owner: "" };
}

export const ListStrategiesByOwnerRequest: MessageFns<
  ListStrategiesByOwnerRequest,
  "flux.strategy.v1beta1.ListStrategiesByOwnerRequest"
> = {
  $type: "flux.strategy.v1beta1.ListStrategiesByOwnerRequest" as const,

  encode(message: ListStrategiesByOwnerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStrategiesByOwnerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesByOwnerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesByOwnerRequest {
    return { owner: isSet(object.owner) ? globalThis.String(object.owner) : "" };
  },

  toJSON(message: ListStrategiesByOwnerRequest): unknown {
    const obj: any = {};
    if (message.owner !== undefined) {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesByOwnerRequest>): ListStrategiesByOwnerRequest {
    return ListStrategiesByOwnerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesByOwnerRequest>): ListStrategiesByOwnerRequest {
    const message = createBaseListStrategiesByOwnerRequest();
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseListStrategiesByTypeRequest(): ListStrategiesByTypeRequest {
  return { type: 0 };
}

export const ListStrategiesByTypeRequest: MessageFns<
  ListStrategiesByTypeRequest,
  "flux.strategy.v1beta1.ListStrategiesByTypeRequest"
> = {
  $type: "flux.strategy.v1beta1.ListStrategiesByTypeRequest" as const,

  encode(message: ListStrategiesByTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStrategiesByTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesByTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesByTypeRequest {
    return { type: isSet(object.type) ? strategyTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: ListStrategiesByTypeRequest): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = strategyTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesByTypeRequest>): ListStrategiesByTypeRequest {
    return ListStrategiesByTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesByTypeRequest>): ListStrategiesByTypeRequest {
    const message = createBaseListStrategiesByTypeRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseListStrategiesResponse(): ListStrategiesResponse {
  return { strategies: [] };
}

export const ListStrategiesResponse: MessageFns<
  ListStrategiesResponse,
  "flux.strategy.v1beta1.ListStrategiesResponse"
> = {
  $type: "flux.strategy.v1beta1.ListStrategiesResponse" as const,

  encode(message: ListStrategiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.strategies) {
      Strategy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStrategiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.strategies.push(Strategy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesResponse {
    return {
      strategies: globalThis.Array.isArray(object?.strategies)
        ? object.strategies.map((e: any) => Strategy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListStrategiesResponse): unknown {
    const obj: any = {};
    if (message.strategies?.length) {
      obj.strategies = message.strategies.map((e) => Strategy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesResponse>): ListStrategiesResponse {
    return ListStrategiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesResponse>): ListStrategiesResponse {
    const message = createBaseListStrategiesResponse();
    message.strategies = object.strategies?.map((e) => Strategy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStrategyVerifierRequest(): GetStrategyVerifierRequest {
  return { plane: 0, contract_address: "" };
}

export const GetStrategyVerifierRequest: MessageFns<
  GetStrategyVerifierRequest,
  "flux.strategy.v1beta1.GetStrategyVerifierRequest"
> = {
  $type: "flux.strategy.v1beta1.GetStrategyVerifierRequest" as const,

  encode(message: GetStrategyVerifierRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.plane !== 0) {
      writer.uint32(8).int32(message.plane);
    }
    if (message.contract_address !== "") {
      writer.uint32(18).string(message.contract_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStrategyVerifierRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStrategyVerifierRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.plane = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStrategyVerifierRequest {
    return {
      plane: isSet(object.plane) ? planeFromJSON(object.plane) : 0,
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
    };
  },

  toJSON(message: GetStrategyVerifierRequest): unknown {
    const obj: any = {};
    if (message.plane !== undefined) {
      obj.plane = planeToJSON(message.plane);
    }
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStrategyVerifierRequest>): GetStrategyVerifierRequest {
    return GetStrategyVerifierRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStrategyVerifierRequest>): GetStrategyVerifierRequest {
    const message = createBaseGetStrategyVerifierRequest();
    message.plane = object.plane ?? 0;
    message.contract_address = object.contract_address ?? "";
    return message;
  },
};

function createBaseGetStrategyVerifierResponse(): GetStrategyVerifierResponse {
  return { verifier: "" };
}

export const GetStrategyVerifierResponse: MessageFns<
  GetStrategyVerifierResponse,
  "flux.strategy.v1beta1.GetStrategyVerifierResponse"
> = {
  $type: "flux.strategy.v1beta1.GetStrategyVerifierResponse" as const,

  encode(message: GetStrategyVerifierResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verifier !== "") {
      writer.uint32(10).string(message.verifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStrategyVerifierResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStrategyVerifierResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.verifier = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStrategyVerifierResponse {
    return { verifier: isSet(object.verifier) ? globalThis.String(object.verifier) : "" };
  },

  toJSON(message: GetStrategyVerifierResponse): unknown {
    const obj: any = {};
    if (message.verifier !== undefined) {
      obj.verifier = message.verifier;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStrategyVerifierResponse>): GetStrategyVerifierResponse {
    return GetStrategyVerifierResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStrategyVerifierResponse>): GetStrategyVerifierResponse {
    const message = createBaseGetStrategyVerifierResponse();
    message.verifier = object.verifier ?? "";
    return message;
  },
};

export interface Query {
  GetStrategyById(
    request: DeepPartial<GetStrategyByIdRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetStrategyByIdResponse>;
  ListStrategies(
    request: DeepPartial<ListStrategiesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse>;
  ListStrategiesByOwner(
    request: DeepPartial<ListStrategiesByOwnerRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse>;
  ListStrategiesByType(
    request: DeepPartial<ListStrategiesByTypeRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse>;
  GetStrategyVerifier(
    request: DeepPartial<GetStrategyVerifierRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetStrategyVerifierResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetStrategyById = this.GetStrategyById.bind(this);
    this.ListStrategies = this.ListStrategies.bind(this);
    this.ListStrategiesByOwner = this.ListStrategiesByOwner.bind(this);
    this.ListStrategiesByType = this.ListStrategiesByType.bind(this);
    this.GetStrategyVerifier = this.GetStrategyVerifier.bind(this);
  }

  GetStrategyById(
    request: DeepPartial<GetStrategyByIdRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetStrategyByIdResponse> {
    return this.rpc.unary(QueryGetStrategyByIdDesc, GetStrategyByIdRequest.fromPartial(request), metadata);
  }

  ListStrategies(
    request: DeepPartial<ListStrategiesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse> {
    return this.rpc.unary(QueryListStrategiesDesc, ListStrategiesRequest.fromPartial(request), metadata);
  }

  ListStrategiesByOwner(
    request: DeepPartial<ListStrategiesByOwnerRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse> {
    return this.rpc.unary(QueryListStrategiesByOwnerDesc, ListStrategiesByOwnerRequest.fromPartial(request), metadata);
  }

  ListStrategiesByType(
    request: DeepPartial<ListStrategiesByTypeRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse> {
    return this.rpc.unary(QueryListStrategiesByTypeDesc, ListStrategiesByTypeRequest.fromPartial(request), metadata);
  }

  GetStrategyVerifier(
    request: DeepPartial<GetStrategyVerifierRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetStrategyVerifierResponse> {
    return this.rpc.unary(QueryGetStrategyVerifierDesc, GetStrategyVerifierRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "flux.strategy.v1beta1.Query" };

export const QueryGetStrategyByIdDesc: UnaryMethodDefinitionish = {
  methodName: "GetStrategyById",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetStrategyByIdRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetStrategyByIdResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryListStrategiesDesc: UnaryMethodDefinitionish = {
  methodName: "ListStrategies",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListStrategiesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListStrategiesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryListStrategiesByOwnerDesc: UnaryMethodDefinitionish = {
  methodName: "ListStrategiesByOwner",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListStrategiesByOwnerRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListStrategiesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryListStrategiesByTypeDesc: UnaryMethodDefinitionish = {
  methodName: "ListStrategiesByType",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListStrategiesByTypeRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListStrategiesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryGetStrategyVerifierDesc: UnaryMethodDefinitionish = {
  methodName: "GetStrategyVerifier",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetStrategyVerifierRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetStrategyVerifierResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
