// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: flux/svm/v1beta1/event.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface EventExecute {
  error: string;
  logs: string[];
}

export interface EventAccUpdate {
  accs: Uint8Array[];
}

function createBaseEventExecute(): EventExecute {
  return { error: "", logs: [] };
}

export const EventExecute = {
  $type: "flux.svm.v1beta1.EventExecute" as const,

  encode(message: EventExecute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    for (const v of message.logs) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventExecute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventExecute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.logs.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventExecute {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EventExecute): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.logs?.length) {
      obj.logs = message.logs;
    }
    return obj;
  },

  create(base?: DeepPartial<EventExecute>): EventExecute {
    return EventExecute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventExecute>): EventExecute {
    const message = createBaseEventExecute();
    message.error = object.error ?? "";
    message.logs = object.logs?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventAccUpdate(): EventAccUpdate {
  return { accs: [] };
}

export const EventAccUpdate = {
  $type: "flux.svm.v1beta1.EventAccUpdate" as const,

  encode(message: EventAccUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.accs) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAccUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAccUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accs.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAccUpdate {
    return { accs: globalThis.Array.isArray(object?.accs) ? object.accs.map((e: any) => bytesFromBase64(e)) : [] };
  },

  toJSON(message: EventAccUpdate): unknown {
    const obj: any = {};
    if (message.accs?.length) {
      obj.accs = message.accs.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EventAccUpdate>): EventAccUpdate {
    return EventAccUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventAccUpdate>): EventAccUpdate {
    const message = createBaseEventAccUpdate();
    message.accs = object.accs?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
