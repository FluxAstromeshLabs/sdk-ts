// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/svm/v1beta1/event.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Op, opFromJSON, opToJSON } from "../../eventstream/v1beta1/query";
import { Account, AccountLink } from "./svm";

export interface ExecuteEvent {
  op: Op;
  error: string;
  logs: string[];
}

export interface AccUpdateEvent {
  op: Op;
  accs: Account[];
}

export interface LinkEvent {
  op: Op;
  link: AccountLink | undefined;
}

function createBaseExecuteEvent(): ExecuteEvent {
  return { op: 0, error: "", logs: [] };
}

export const ExecuteEvent = {
  $type: "flux.svm.v1beta1.ExecuteEvent" as const,

  encode(message: ExecuteEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    for (const v of message.logs) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logs.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ExecuteEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.logs?.length) {
      obj.logs = message.logs;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecuteEvent>): ExecuteEvent {
    return ExecuteEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecuteEvent>): ExecuteEvent {
    const message = createBaseExecuteEvent();
    message.op = object.op ?? 0;
    message.error = object.error ?? "";
    message.logs = object.logs?.map((e) => e) || [];
    return message;
  },
};

function createBaseAccUpdateEvent(): AccUpdateEvent {
  return { op: 0, accs: [] };
}

export const AccUpdateEvent = {
  $type: "flux.svm.v1beta1.AccUpdateEvent" as const,

  encode(message: AccUpdateEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    for (const v of message.accs) {
      Account.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccUpdateEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccUpdateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accs.push(Account.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccUpdateEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      accs: globalThis.Array.isArray(object?.accs) ? object.accs.map((e: any) => Account.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccUpdateEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.accs?.length) {
      obj.accs = message.accs.map((e) => Account.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccUpdateEvent>): AccUpdateEvent {
    return AccUpdateEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccUpdateEvent>): AccUpdateEvent {
    const message = createBaseAccUpdateEvent();
    message.op = object.op ?? 0;
    message.accs = object.accs?.map((e) => Account.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLinkEvent(): LinkEvent {
  return { op: 0, link: undefined };
}

export const LinkEvent = {
  $type: "flux.svm.v1beta1.LinkEvent" as const,

  encode(message: LinkEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.link !== undefined) {
      AccountLink.encode(message.link, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LinkEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.link = AccountLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      link: isSet(object.link) ? AccountLink.fromJSON(object.link) : undefined,
    };
  },

  toJSON(message: LinkEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.link !== undefined) {
      obj.link = AccountLink.toJSON(message.link);
    }
    return obj;
  },

  create(base?: DeepPartial<LinkEvent>): LinkEvent {
    return LinkEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkEvent>): LinkEvent {
    const message = createBaseLinkEvent();
    message.op = object.op ?? 0;
    message.link = (object.link !== undefined && object.link !== null)
      ? AccountLink.fromPartial(object.link)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
