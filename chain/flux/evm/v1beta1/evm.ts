// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: flux/evm/v1beta1/evm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface Account {
  address: string;
  balance: Uint8Array;
  nonce: string;
}

export interface Code {
  address: string;
  bytecode: Uint8Array;
}

export interface ContractStorage {
  address: string;
  storages: Storage[];
}

export interface Storage {
  key: Uint8Array;
  value: Uint8Array;
}

export interface ContractInfo {
  address: string;
  bytecode: Uint8Array;
  hash: Uint8Array;
  sender: string;
  calldata: Uint8Array;
  value: Uint8Array;
  number: string;
}

export interface Params {
  evm_block_gas_limit: string;
  evm_gas_price: string;
  evm_base_fee: string;
}

function createBaseAccount(): Account {
  return { address: "", balance: new Uint8Array(0), nonce: "0" };
}

export const Account: MessageFns<Account, "flux.evm.v1beta1.Account"> = {
  $type: "flux.evm.v1beta1.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.balance.length !== 0) {
      writer.uint32(18).bytes(message.balance);
    }
    if (message.nonce !== "0") {
      writer.uint32(24).uint64(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.balance = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.nonce = reader.uint64().toString();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      balance: isSet(object.balance) ? bytesFromBase64(object.balance) : new Uint8Array(0),
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "0",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.balance !== undefined) {
      obj.balance = base64FromBytes(message.balance);
    }
    if (message.nonce !== undefined) {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.address = object.address ?? "";
    message.balance = object.balance ?? new Uint8Array(0);
    message.nonce = object.nonce ?? "0";
    return message;
  },
};

function createBaseCode(): Code {
  return { address: "", bytecode: new Uint8Array(0) };
}

export const Code: MessageFns<Code, "flux.evm.v1beta1.Code"> = {
  $type: "flux.evm.v1beta1.Code" as const,

  encode(message: Code, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.bytecode.length !== 0) {
      writer.uint32(18).bytes(message.bytecode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Code {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bytecode = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Code {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      bytecode: isSet(object.bytecode) ? bytesFromBase64(object.bytecode) : new Uint8Array(0),
    };
  },

  toJSON(message: Code): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.bytecode !== undefined) {
      obj.bytecode = base64FromBytes(message.bytecode);
    }
    return obj;
  },

  create(base?: DeepPartial<Code>): Code {
    return Code.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Code>): Code {
    const message = createBaseCode();
    message.address = object.address ?? "";
    message.bytecode = object.bytecode ?? new Uint8Array(0);
    return message;
  },
};

function createBaseContractStorage(): ContractStorage {
  return { address: "", storages: [] };
}

export const ContractStorage: MessageFns<ContractStorage, "flux.evm.v1beta1.ContractStorage"> = {
  $type: "flux.evm.v1beta1.ContractStorage" as const,

  encode(message: ContractStorage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.storages) {
      Storage.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContractStorage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storages.push(Storage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractStorage {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      storages: globalThis.Array.isArray(object?.storages) ? object.storages.map((e: any) => Storage.fromJSON(e)) : [],
    };
  },

  toJSON(message: ContractStorage): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.storages?.length) {
      obj.storages = message.storages.map((e) => Storage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ContractStorage>): ContractStorage {
    return ContractStorage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContractStorage>): ContractStorage {
    const message = createBaseContractStorage();
    message.address = object.address ?? "";
    message.storages = object.storages?.map((e) => Storage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStorage(): Storage {
  return { key: new Uint8Array(0), value: new Uint8Array(0) };
}

export const Storage: MessageFns<Storage, "flux.evm.v1beta1.Storage"> = {
  $type: "flux.evm.v1beta1.Storage" as const,

  encode(message: Storage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key.length !== 0) {
      writer.uint32(18).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Storage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Storage {
    return {
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: Storage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Storage>): Storage {
    return Storage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Storage>): Storage {
    const message = createBaseStorage();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseContractInfo(): ContractInfo {
  return {
    address: "",
    bytecode: new Uint8Array(0),
    hash: new Uint8Array(0),
    sender: "",
    calldata: new Uint8Array(0),
    value: new Uint8Array(0),
    number: "0",
  };
}

export const ContractInfo: MessageFns<ContractInfo, "flux.evm.v1beta1.ContractInfo"> = {
  $type: "flux.evm.v1beta1.ContractInfo" as const,

  encode(message: ContractInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.bytecode.length !== 0) {
      writer.uint32(18).bytes(message.bytecode);
    }
    if (message.hash.length !== 0) {
      writer.uint32(26).bytes(message.hash);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    if (message.calldata.length !== 0) {
      writer.uint32(42).bytes(message.calldata);
    }
    if (message.value.length !== 0) {
      writer.uint32(50).bytes(message.value);
    }
    if (message.number !== "0") {
      writer.uint32(56).int64(message.number);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContractInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bytecode = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.calldata = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.value = reader.bytes();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.number = reader.int64().toString();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractInfo {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      bytecode: isSet(object.bytecode) ? bytesFromBase64(object.bytecode) : new Uint8Array(0),
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      calldata: isSet(object.calldata) ? bytesFromBase64(object.calldata) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      number: isSet(object.number) ? globalThis.String(object.number) : "0",
    };
  },

  toJSON(message: ContractInfo): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.bytecode !== undefined) {
      obj.bytecode = base64FromBytes(message.bytecode);
    }
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.sender !== undefined) {
      obj.sender = message.sender;
    }
    if (message.calldata !== undefined) {
      obj.calldata = base64FromBytes(message.calldata);
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.number !== undefined) {
      obj.number = message.number;
    }
    return obj;
  },

  create(base?: DeepPartial<ContractInfo>): ContractInfo {
    return ContractInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContractInfo>): ContractInfo {
    const message = createBaseContractInfo();
    message.address = object.address ?? "";
    message.bytecode = object.bytecode ?? new Uint8Array(0);
    message.hash = object.hash ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    message.calldata = object.calldata ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.number = object.number ?? "0";
    return message;
  },
};

function createBaseParams(): Params {
  return { evm_block_gas_limit: "0", evm_gas_price: "0", evm_base_fee: "0" };
}

export const Params: MessageFns<Params, "flux.evm.v1beta1.Params"> = {
  $type: "flux.evm.v1beta1.Params" as const,

  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.evm_block_gas_limit !== "0") {
      writer.uint32(8).int64(message.evm_block_gas_limit);
    }
    if (message.evm_gas_price !== "0") {
      writer.uint32(16).uint64(message.evm_gas_price);
    }
    if (message.evm_base_fee !== "0") {
      writer.uint32(24).uint64(message.evm_base_fee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.evm_block_gas_limit = reader.int64().toString();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.evm_gas_price = reader.uint64().toString();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.evm_base_fee = reader.uint64().toString();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      evm_block_gas_limit: isSet(object.evm_block_gas_limit) ? globalThis.String(object.evm_block_gas_limit) : "0",
      evm_gas_price: isSet(object.evm_gas_price) ? globalThis.String(object.evm_gas_price) : "0",
      evm_base_fee: isSet(object.evm_base_fee) ? globalThis.String(object.evm_base_fee) : "0",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.evm_block_gas_limit !== undefined) {
      obj.evm_block_gas_limit = message.evm_block_gas_limit;
    }
    if (message.evm_gas_price !== undefined) {
      obj.evm_gas_price = message.evm_gas_price;
    }
    if (message.evm_base_fee !== undefined) {
      obj.evm_base_fee = message.evm_base_fee;
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.evm_block_gas_limit = object.evm_block_gas_limit ?? "0";
    message.evm_gas_price = object.evm_gas_price ?? "0";
    message.evm_base_fee = object.evm_base_fee ?? "0";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
