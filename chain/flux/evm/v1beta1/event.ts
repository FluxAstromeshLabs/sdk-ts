// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: flux/evm/v1beta1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Op, opFromJSON, opToJSON } from "../../eventstream/v1beta1/query";
import { ContractInfo } from "./evm";

export interface DeployEvent {
  op: Op;
  contract: ContractInfo | undefined;
}

export interface ExecuteEvent {
  op: Op;
  address: string;
}

export interface EmitLogEvent {
  op: Op;
  address: string;
  topics: Uint8Array[];
  data: Uint8Array;
}

function createBaseDeployEvent(): DeployEvent {
  return { op: 0, contract: undefined };
}

export const DeployEvent: MessageFns<DeployEvent, "flux.evm.v1beta1.DeployEvent"> = {
  $type: "flux.evm.v1beta1.DeployEvent" as const,

  encode(message: DeployEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.contract !== undefined) {
      ContractInfo.encode(message.contract, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract = ContractInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      contract: isSet(object.contract) ? ContractInfo.fromJSON(object.contract) : undefined,
    };
  },

  toJSON(message: DeployEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.contract !== undefined) {
      obj.contract = ContractInfo.toJSON(message.contract);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployEvent>): DeployEvent {
    return DeployEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployEvent>): DeployEvent {
    const message = createBaseDeployEvent();
    message.op = object.op ?? 0;
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? ContractInfo.fromPartial(object.contract)
      : undefined;
    return message;
  },
};

function createBaseExecuteEvent(): ExecuteEvent {
  return { op: 0, address: "" };
}

export const ExecuteEvent: MessageFns<ExecuteEvent, "flux.evm.v1beta1.ExecuteEvent"> = {
  $type: "flux.evm.v1beta1.ExecuteEvent" as const,

  encode(message: ExecuteEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: ExecuteEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecuteEvent>): ExecuteEvent {
    return ExecuteEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecuteEvent>): ExecuteEvent {
    const message = createBaseExecuteEvent();
    message.op = object.op ?? 0;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseEmitLogEvent(): EmitLogEvent {
  return { op: 0, address: "", topics: [], data: new Uint8Array(0) };
}

export const EmitLogEvent: MessageFns<EmitLogEvent, "flux.evm.v1beta1.EmitLogEvent"> = {
  $type: "flux.evm.v1beta1.EmitLogEvent" as const,

  encode(message: EmitLogEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    for (const v of message.topics) {
      writer.uint32(26).bytes(v!);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmitLogEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmitLogEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.topics.push(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmitLogEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => bytesFromBase64(e)) : [],
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: EmitLogEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => base64FromBytes(e));
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<EmitLogEvent>): EmitLogEvent {
    return EmitLogEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EmitLogEvent>): EmitLogEvent {
    const message = createBaseEmitLogEvent();
    message.op = object.op ?? 0;
    message.address = object.address ?? "";
    message.topics = object.topics?.map((e) => e) || [];
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
