// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/explorer/query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { BoolValue } from "../../../google/protobuf/wrappers";
import { Plane, planeFromJSON, planeToJSON } from "../../astromesh/v1beta1/tx";
import { ContractInfo } from "../../evm/v1beta1/evm";
import { Strategy, StrategyType, strategyTypeFromJSON, strategyTypeToJSON } from "../../strategy/v1beta1/strategy";

export interface ListEvmContractsRequest {
  /** owner of the contract to filter */
  address: string;
  pagination: PageRequest | undefined;
}

export interface ListEvmContractsResponse {
  contracts: ContractInfo[];
  pagination: PageResponse | undefined;
}

export interface BalancesRequest {
  address: string;
  pagination: PageRequest | undefined;
}

export interface BalanceInfo {
  acc: string;
  plane: Plane;
  denom: string;
  amount: string;
  updated_height: string;
  updated_time: string;
  decimals: number;
}

export interface BalancesResponse {
  balances: BalanceInfo[];
  pagination: PageResponse | undefined;
}

/**
 * ListStrategiesRequest is a query type to list out existing on-chain strategies
 * with some filters For unused fields, just leave them empty
 */
export interface ListStrategiesRequest {
  /** use pagination to limit the output item list */
  pagination:
    | PageRequest
    | undefined;
  /** strategy type, could be generic strategies or intent solver */
  type: StrategyType;
  /** strategy id to filter, this is useful to get info of a single strategy */
  id: string;
  /** strategy enable/disable status to filter */
  enabled:
    | boolean
    | undefined;
  /** tags to filter */
  tags: string[];
}

export interface ListStrategiesResponse {
  /** pagination response shows which page the strategy list is at */
  pagination:
    | PageResponse
    | undefined;
  /**
   * strategies shows existing strategies after applied the filters in
   * ListStrategiesRequest
   */
  strategies: Strategy[];
}

/** List strategies by an owner with some additional filters */
export interface ListStrategiesByOwnerRequest {
  /** use pagination to limit the output item list */
  pagination:
    | PageRequest
    | undefined;
  /** owner of the strategy, required by this query */
  owner: string;
  /** strategy type, could be generic strategies or intent solver */
  type: StrategyType;
  /** strategy enable/disable status to filter */
  enabled:
    | boolean
    | undefined;
  /** tags to filter */
  tags: string[];
}

export interface Pool {
  exchange: string;
  plane: Plane;
  /** ID of the pool */
  pool_id: string;
  /** Volume of token0 */
  token0_volume: string;
  /** Volume of token1 */
  token1_volume: string;
  /** Locked amount of token0 */
  token0_liquidity: string;
  /** Locked amount of token1 */
  token1_liquidity: string;
  /** total swap count */
  swap_count: string;
}

export interface Metrics {
  /** Transaction count */
  tx_count: string;
  /** Block count */
  block_count: string;
  /** List of pools with their token volumes */
  pools: Pool[];
}

export interface GetMetricsRequest {
}

export interface GetMetricsResponse {
  data: Metrics | undefined;
}

function createBaseListEvmContractsRequest(): ListEvmContractsRequest {
  return { address: "", pagination: undefined };
}

export const ListEvmContractsRequest = {
  $type: "flux.indexer.explorer.ListEvmContractsRequest" as const,

  encode(message: ListEvmContractsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEvmContractsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvmContractsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvmContractsRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEvmContractsRequest): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvmContractsRequest>): ListEvmContractsRequest {
    return ListEvmContractsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvmContractsRequest>): ListEvmContractsRequest {
    const message = createBaseListEvmContractsRequest();
    message.address = object.address ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListEvmContractsResponse(): ListEvmContractsResponse {
  return { contracts: [], pagination: undefined };
}

export const ListEvmContractsResponse = {
  $type: "flux.indexer.explorer.ListEvmContractsResponse" as const,

  encode(message: ListEvmContractsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.contracts) {
      ContractInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEvmContractsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvmContractsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contracts.push(ContractInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvmContractsResponse {
    return {
      contracts: globalThis.Array.isArray(object?.contracts)
        ? object.contracts.map((e: any) => ContractInfo.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEvmContractsResponse): unknown {
    const obj: any = {};
    if (message.contracts?.length) {
      obj.contracts = message.contracts.map((e) => ContractInfo.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvmContractsResponse>): ListEvmContractsResponse {
    return ListEvmContractsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvmContractsResponse>): ListEvmContractsResponse {
    const message = createBaseListEvmContractsResponse();
    message.contracts = object.contracts?.map((e) => ContractInfo.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseBalancesRequest(): BalancesRequest {
  return { address: "", pagination: undefined };
}

export const BalancesRequest = {
  $type: "flux.indexer.explorer.BalancesRequest" as const,

  encode(message: BalancesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BalancesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalancesRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: BalancesRequest): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<BalancesRequest>): BalancesRequest {
    return BalancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BalancesRequest>): BalancesRequest {
    const message = createBaseBalancesRequest();
    message.address = object.address ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseBalanceInfo(): BalanceInfo {
  return { acc: "", plane: 0, denom: "", amount: "", updated_height: "0", updated_time: "0", decimals: 0 };
}

export const BalanceInfo = {
  $type: "flux.indexer.explorer.BalanceInfo" as const,

  encode(message: BalanceInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.acc !== "") {
      writer.uint32(10).string(message.acc);
    }
    if (message.plane !== 0) {
      writer.uint32(16).int32(message.plane);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.updated_height !== "0") {
      writer.uint32(40).uint64(message.updated_height);
    }
    if (message.updated_time !== "0") {
      writer.uint32(48).uint64(message.updated_time);
    }
    if (message.decimals !== 0) {
      writer.uint32(56).uint32(message.decimals);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BalanceInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.acc = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.plane = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.updated_height = longToString(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.updated_time = longToString(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.decimals = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalanceInfo {
    return {
      acc: isSet(object.acc) ? globalThis.String(object.acc) : "",
      plane: isSet(object.plane) ? planeFromJSON(object.plane) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      updated_height: isSet(object.updated_height) ? globalThis.String(object.updated_height) : "0",
      updated_time: isSet(object.updated_time) ? globalThis.String(object.updated_time) : "0",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
    };
  },

  toJSON(message: BalanceInfo): unknown {
    const obj: any = {};
    if (message.acc !== undefined) {
      obj.acc = message.acc;
    }
    if (message.plane !== undefined) {
      obj.plane = planeToJSON(message.plane);
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    if (message.updated_height !== undefined) {
      obj.updated_height = message.updated_height;
    }
    if (message.updated_time !== undefined) {
      obj.updated_time = message.updated_time;
    }
    if (message.decimals !== undefined) {
      obj.decimals = Math.round(message.decimals);
    }
    return obj;
  },

  create(base?: DeepPartial<BalanceInfo>): BalanceInfo {
    return BalanceInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BalanceInfo>): BalanceInfo {
    const message = createBaseBalanceInfo();
    message.acc = object.acc ?? "";
    message.plane = object.plane ?? 0;
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    message.updated_height = object.updated_height ?? "0";
    message.updated_time = object.updated_time ?? "0";
    message.decimals = object.decimals ?? 0;
    return message;
  },
};

function createBaseBalancesResponse(): BalancesResponse {
  return { balances: [], pagination: undefined };
}

export const BalancesResponse = {
  $type: "flux.indexer.explorer.BalancesResponse" as const,

  encode(message: BalancesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.balances) {
      BalanceInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BalancesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.balances.push(BalanceInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalancesResponse {
    return {
      balances: globalThis.Array.isArray(object?.balances)
        ? object.balances.map((e: any) => BalanceInfo.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: BalancesResponse): unknown {
    const obj: any = {};
    if (message.balances?.length) {
      obj.balances = message.balances.map((e) => BalanceInfo.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<BalancesResponse>): BalancesResponse {
    return BalancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BalancesResponse>): BalancesResponse {
    const message = createBaseBalancesResponse();
    message.balances = object.balances?.map((e) => BalanceInfo.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListStrategiesRequest(): ListStrategiesRequest {
  return { pagination: undefined, type: 0, id: "", enabled: undefined, tags: [] };
}

export const ListStrategiesRequest = {
  $type: "flux.indexer.explorer.ListStrategiesRequest" as const,

  encode(message: ListStrategiesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.enabled !== undefined) {
      BoolValue.encode({ value: message.enabled! }, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListStrategiesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.enabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      type: isSet(object.type) ? strategyTypeFromJSON(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      enabled: isSet(object.enabled) ? Boolean(object.enabled) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ListStrategiesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.type !== undefined) {
      obj.type = strategyTypeToJSON(message.type);
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.enabled !== undefined) {
      obj.enabled = message.enabled;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesRequest>): ListStrategiesRequest {
    return ListStrategiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesRequest>): ListStrategiesRequest {
    const message = createBaseListStrategiesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.type = object.type ?? 0;
    message.id = object.id ?? "";
    message.enabled = object.enabled ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseListStrategiesResponse(): ListStrategiesResponse {
  return { pagination: undefined, strategies: [] };
}

export const ListStrategiesResponse = {
  $type: "flux.indexer.explorer.ListStrategiesResponse" as const,

  encode(message: ListStrategiesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.strategies) {
      Strategy.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListStrategiesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.strategies.push(Strategy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      strategies: globalThis.Array.isArray(object?.strategies)
        ? object.strategies.map((e: any) => Strategy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListStrategiesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.strategies?.length) {
      obj.strategies = message.strategies.map((e) => Strategy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesResponse>): ListStrategiesResponse {
    return ListStrategiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesResponse>): ListStrategiesResponse {
    const message = createBaseListStrategiesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.strategies = object.strategies?.map((e) => Strategy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListStrategiesByOwnerRequest(): ListStrategiesByOwnerRequest {
  return { pagination: undefined, owner: "", type: 0, enabled: undefined, tags: [] };
}

export const ListStrategiesByOwnerRequest = {
  $type: "flux.indexer.explorer.ListStrategiesByOwnerRequest" as const,

  encode(message: ListStrategiesByOwnerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.enabled !== undefined) {
      BoolValue.encode({ value: message.enabled! }, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListStrategiesByOwnerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStrategiesByOwnerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.enabled = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStrategiesByOwnerRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      type: isSet(object.type) ? strategyTypeFromJSON(object.type) : 0,
      enabled: isSet(object.enabled) ? Boolean(object.enabled) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ListStrategiesByOwnerRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.owner !== undefined) {
      obj.owner = message.owner;
    }
    if (message.type !== undefined) {
      obj.type = strategyTypeToJSON(message.type);
    }
    if (message.enabled !== undefined) {
      obj.enabled = message.enabled;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStrategiesByOwnerRequest>): ListStrategiesByOwnerRequest {
    return ListStrategiesByOwnerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStrategiesByOwnerRequest>): ListStrategiesByOwnerRequest {
    const message = createBaseListStrategiesByOwnerRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.owner = object.owner ?? "";
    message.type = object.type ?? 0;
    message.enabled = object.enabled ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBasePool(): Pool {
  return {
    exchange: "",
    plane: 0,
    pool_id: "",
    token0_volume: "",
    token1_volume: "",
    token0_liquidity: "",
    token1_liquidity: "",
    swap_count: "0",
  };
}

export const Pool = {
  $type: "flux.indexer.explorer.Pool" as const,

  encode(message: Pool, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.exchange !== "") {
      writer.uint32(10).string(message.exchange);
    }
    if (message.plane !== 0) {
      writer.uint32(16).int32(message.plane);
    }
    if (message.pool_id !== "") {
      writer.uint32(26).string(message.pool_id);
    }
    if (message.token0_volume !== "") {
      writer.uint32(34).string(message.token0_volume);
    }
    if (message.token1_volume !== "") {
      writer.uint32(42).string(message.token1_volume);
    }
    if (message.token0_liquidity !== "") {
      writer.uint32(50).string(message.token0_liquidity);
    }
    if (message.token1_liquidity !== "") {
      writer.uint32(58).string(message.token1_liquidity);
    }
    if (message.swap_count !== "0") {
      writer.uint32(64).int64(message.swap_count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Pool {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exchange = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.plane = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pool_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.token0_volume = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.token1_volume = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.token0_liquidity = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.token1_liquidity = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.swap_count = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pool {
    return {
      exchange: isSet(object.exchange) ? globalThis.String(object.exchange) : "",
      plane: isSet(object.plane) ? planeFromJSON(object.plane) : 0,
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "",
      token0_volume: isSet(object.token0_volume) ? globalThis.String(object.token0_volume) : "",
      token1_volume: isSet(object.token1_volume) ? globalThis.String(object.token1_volume) : "",
      token0_liquidity: isSet(object.token0_liquidity) ? globalThis.String(object.token0_liquidity) : "",
      token1_liquidity: isSet(object.token1_liquidity) ? globalThis.String(object.token1_liquidity) : "",
      swap_count: isSet(object.swap_count) ? globalThis.String(object.swap_count) : "0",
    };
  },

  toJSON(message: Pool): unknown {
    const obj: any = {};
    if (message.exchange !== undefined) {
      obj.exchange = message.exchange;
    }
    if (message.plane !== undefined) {
      obj.plane = planeToJSON(message.plane);
    }
    if (message.pool_id !== undefined) {
      obj.pool_id = message.pool_id;
    }
    if (message.token0_volume !== undefined) {
      obj.token0_volume = message.token0_volume;
    }
    if (message.token1_volume !== undefined) {
      obj.token1_volume = message.token1_volume;
    }
    if (message.token0_liquidity !== undefined) {
      obj.token0_liquidity = message.token0_liquidity;
    }
    if (message.token1_liquidity !== undefined) {
      obj.token1_liquidity = message.token1_liquidity;
    }
    if (message.swap_count !== undefined) {
      obj.swap_count = message.swap_count;
    }
    return obj;
  },

  create(base?: DeepPartial<Pool>): Pool {
    return Pool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Pool>): Pool {
    const message = createBasePool();
    message.exchange = object.exchange ?? "";
    message.plane = object.plane ?? 0;
    message.pool_id = object.pool_id ?? "";
    message.token0_volume = object.token0_volume ?? "";
    message.token1_volume = object.token1_volume ?? "";
    message.token0_liquidity = object.token0_liquidity ?? "";
    message.token1_liquidity = object.token1_liquidity ?? "";
    message.swap_count = object.swap_count ?? "0";
    return message;
  },
};

function createBaseMetrics(): Metrics {
  return { tx_count: "0", block_count: "0", pools: [] };
}

export const Metrics = {
  $type: "flux.indexer.explorer.Metrics" as const,

  encode(message: Metrics, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tx_count !== "0") {
      writer.uint32(8).int64(message.tx_count);
    }
    if (message.block_count !== "0") {
      writer.uint32(16).int64(message.block_count);
    }
    for (const v of message.pools) {
      Pool.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Metrics {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.tx_count = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.block_count = longToString(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pools.push(Pool.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metrics {
    return {
      tx_count: isSet(object.tx_count) ? globalThis.String(object.tx_count) : "0",
      block_count: isSet(object.block_count) ? globalThis.String(object.block_count) : "0",
      pools: globalThis.Array.isArray(object?.pools) ? object.pools.map((e: any) => Pool.fromJSON(e)) : [],
    };
  },

  toJSON(message: Metrics): unknown {
    const obj: any = {};
    if (message.tx_count !== undefined) {
      obj.tx_count = message.tx_count;
    }
    if (message.block_count !== undefined) {
      obj.block_count = message.block_count;
    }
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => Pool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Metrics>): Metrics {
    return Metrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metrics>): Metrics {
    const message = createBaseMetrics();
    message.tx_count = object.tx_count ?? "0";
    message.block_count = object.block_count ?? "0";
    message.pools = object.pools?.map((e) => Pool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetMetricsRequest(): GetMetricsRequest {
  return {};
}

export const GetMetricsRequest = {
  $type: "flux.indexer.explorer.GetMetricsRequest" as const,

  encode(_: GetMetricsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMetricsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMetricsRequest {
    return {};
  },

  toJSON(_: GetMetricsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetMetricsRequest>): GetMetricsRequest {
    return GetMetricsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetMetricsRequest>): GetMetricsRequest {
    const message = createBaseGetMetricsRequest();
    return message;
  },
};

function createBaseGetMetricsResponse(): GetMetricsResponse {
  return { data: undefined };
}

export const GetMetricsResponse = {
  $type: "flux.indexer.explorer.GetMetricsResponse" as const,

  encode(message: GetMetricsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      Metrics.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMetricsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = Metrics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMetricsResponse {
    return { data: isSet(object.data) ? Metrics.fromJSON(object.data) : undefined };
  },

  toJSON(message: GetMetricsResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Metrics.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<GetMetricsResponse>): GetMetricsResponse {
    return GetMetricsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMetricsResponse>): GetMetricsResponse {
    const message = createBaseGetMetricsResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Metrics.fromPartial(object.data) : undefined;
    return message;
  },
};

export interface API {
  ListEvmContracts(
    request: DeepPartial<ListEvmContractsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListEvmContractsResponse>;
  Balances(request: DeepPartial<BalancesRequest>, metadata?: grpc.Metadata): Promise<BalancesResponse>;
  ListStrategies(
    request: DeepPartial<ListStrategiesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse>;
  ListStrategiesByOwner(
    request: DeepPartial<ListStrategiesByOwnerRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse>;
  GetMetrics(request: DeepPartial<GetMetricsRequest>, metadata?: grpc.Metadata): Promise<GetMetricsResponse>;
}

export class APIClientImpl implements API {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ListEvmContracts = this.ListEvmContracts.bind(this);
    this.Balances = this.Balances.bind(this);
    this.ListStrategies = this.ListStrategies.bind(this);
    this.ListStrategiesByOwner = this.ListStrategiesByOwner.bind(this);
    this.GetMetrics = this.GetMetrics.bind(this);
  }

  ListEvmContracts(
    request: DeepPartial<ListEvmContractsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListEvmContractsResponse> {
    return this.rpc.unary(APIListEvmContractsDesc, ListEvmContractsRequest.fromPartial(request), metadata);
  }

  Balances(request: DeepPartial<BalancesRequest>, metadata?: grpc.Metadata): Promise<BalancesResponse> {
    return this.rpc.unary(APIBalancesDesc, BalancesRequest.fromPartial(request), metadata);
  }

  ListStrategies(
    request: DeepPartial<ListStrategiesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse> {
    return this.rpc.unary(APIListStrategiesDesc, ListStrategiesRequest.fromPartial(request), metadata);
  }

  ListStrategiesByOwner(
    request: DeepPartial<ListStrategiesByOwnerRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListStrategiesResponse> {
    return this.rpc.unary(APIListStrategiesByOwnerDesc, ListStrategiesByOwnerRequest.fromPartial(request), metadata);
  }

  GetMetrics(request: DeepPartial<GetMetricsRequest>, metadata?: grpc.Metadata): Promise<GetMetricsResponse> {
    return this.rpc.unary(APIGetMetricsDesc, GetMetricsRequest.fromPartial(request), metadata);
  }
}

export const APIDesc = { serviceName: "flux.indexer.explorer.API" };

export const APIListEvmContractsDesc: UnaryMethodDefinitionish = {
  methodName: "ListEvmContracts",
  service: APIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListEvmContractsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListEvmContractsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const APIBalancesDesc: UnaryMethodDefinitionish = {
  methodName: "Balances",
  service: APIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BalancesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BalancesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const APIListStrategiesDesc: UnaryMethodDefinitionish = {
  methodName: "ListStrategies",
  service: APIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListStrategiesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListStrategiesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const APIListStrategiesByOwnerDesc: UnaryMethodDefinitionish = {
  methodName: "ListStrategiesByOwner",
  service: APIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListStrategiesByOwnerRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListStrategiesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const APIGetMetricsDesc: UnaryMethodDefinitionish = {
  methodName: "GetMetrics",
  service: APIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetMetricsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetMetricsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
