// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/launchpad_events.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { LaunchpadProjectInfo } from "./launchpad";

export enum LaunchpadProjectEventOp {
  OpLaunchpadCreate = 0,
  OpLaunchpadFinalize = 1,
  UNRECOGNIZED = -1,
}

export function launchpadProjectEventOpFromJSON(object: any): LaunchpadProjectEventOp {
  switch (object) {
    case 0:
    case "OpLaunchpadCreate":
      return LaunchpadProjectEventOp.OpLaunchpadCreate;
    case 1:
    case "OpLaunchpadFinalize":
      return LaunchpadProjectEventOp.OpLaunchpadFinalize;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LaunchpadProjectEventOp.UNRECOGNIZED;
  }
}

export function launchpadProjectEventOpToJSON(object: LaunchpadProjectEventOp): string {
  switch (object) {
    case LaunchpadProjectEventOp.OpLaunchpadCreate:
      return "OpLaunchpadCreate";
    case LaunchpadProjectEventOp.OpLaunchpadFinalize:
      return "OpLaunchpadFinalize";
    case LaunchpadProjectEventOp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WhitelistEventOp {
  OpAddWhiteList = 0,
  OpRemoveWhitelist = 1,
  UNRECOGNIZED = -1,
}

export function whitelistEventOpFromJSON(object: any): WhitelistEventOp {
  switch (object) {
    case 0:
    case "OpAddWhiteList":
      return WhitelistEventOp.OpAddWhiteList;
    case 1:
    case "OpRemoveWhitelist":
      return WhitelistEventOp.OpRemoveWhitelist;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WhitelistEventOp.UNRECOGNIZED;
  }
}

export function whitelistEventOpToJSON(object: WhitelistEventOp): string {
  switch (object) {
    case WhitelistEventOp.OpAddWhiteList:
      return "OpAddWhiteList";
    case WhitelistEventOp.OpRemoveWhitelist:
      return "OpRemoveWhitelist";
    case WhitelistEventOp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LaunchpadProjectEvent {
  contract_address: string;
  op: LaunchpadProjectEventOp;
  project: LaunchpadProjectInfo | undefined;
}

export interface LaunchpadBuyEvent {
  contract_address: string;
  ticker: string;
  address: string;
  denom: string;
  buy_amount: string;
  current_amount: string;
  fee: string;
  raised: string;
}

export interface LaunchpadWhitelistEvent {
  contract_address: string;
  op: WhitelistEventOp;
  ticker: string;
  addresses: string[];
  reasons: string[];
  admin: string;
}

export interface LaunchpadClaimEvent {
  contract_address: string;
  ticker: string;
  address: string;
  denom: string;
  amount: string;
}

function createBaseLaunchpadProjectEvent(): LaunchpadProjectEvent {
  return { contract_address: "", op: 0, project: undefined };
}

export const LaunchpadProjectEvent = {
  $type: "flux.indexer.campclash.LaunchpadProjectEvent" as const,

  encode(message: LaunchpadProjectEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.op !== 0) {
      writer.uint32(16).int32(message.op);
    }
    if (message.project !== undefined) {
      LaunchpadProjectInfo.encode(message.project, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadProjectEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadProjectEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = LaunchpadProjectInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadProjectEvent {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      op: isSet(object.op) ? launchpadProjectEventOpFromJSON(object.op) : 0,
      project: isSet(object.project) ? LaunchpadProjectInfo.fromJSON(object.project) : undefined,
    };
  },

  toJSON(message: LaunchpadProjectEvent): unknown {
    const obj: any = {};
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    if (message.op !== undefined) {
      obj.op = launchpadProjectEventOpToJSON(message.op);
    }
    if (message.project !== undefined) {
      obj.project = LaunchpadProjectInfo.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadProjectEvent>): LaunchpadProjectEvent {
    return LaunchpadProjectEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadProjectEvent>): LaunchpadProjectEvent {
    const message = createBaseLaunchpadProjectEvent();
    message.contract_address = object.contract_address ?? "";
    message.op = object.op ?? 0;
    message.project = (object.project !== undefined && object.project !== null)
      ? LaunchpadProjectInfo.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseLaunchpadBuyEvent(): LaunchpadBuyEvent {
  return {
    contract_address: "",
    ticker: "",
    address: "",
    denom: "",
    buy_amount: "",
    current_amount: "",
    fee: "",
    raised: "",
  };
}

export const LaunchpadBuyEvent = {
  $type: "flux.indexer.campclash.LaunchpadBuyEvent" as const,

  encode(message: LaunchpadBuyEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    if (message.buy_amount !== "") {
      writer.uint32(42).string(message.buy_amount);
    }
    if (message.current_amount !== "") {
      writer.uint32(50).string(message.current_amount);
    }
    if (message.fee !== "") {
      writer.uint32(58).string(message.fee);
    }
    if (message.raised !== "") {
      writer.uint32(66).string(message.raised);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadBuyEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadBuyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.buy_amount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.current_amount = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.fee = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.raised = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadBuyEvent {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      buy_amount: isSet(object.buy_amount) ? globalThis.String(object.buy_amount) : "",
      current_amount: isSet(object.current_amount) ? globalThis.String(object.current_amount) : "",
      fee: isSet(object.fee) ? globalThis.String(object.fee) : "",
      raised: isSet(object.raised) ? globalThis.String(object.raised) : "",
    };
  },

  toJSON(message: LaunchpadBuyEvent): unknown {
    const obj: any = {};
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.buy_amount !== undefined) {
      obj.buy_amount = message.buy_amount;
    }
    if (message.current_amount !== undefined) {
      obj.current_amount = message.current_amount;
    }
    if (message.fee !== undefined) {
      obj.fee = message.fee;
    }
    if (message.raised !== undefined) {
      obj.raised = message.raised;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadBuyEvent>): LaunchpadBuyEvent {
    return LaunchpadBuyEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadBuyEvent>): LaunchpadBuyEvent {
    const message = createBaseLaunchpadBuyEvent();
    message.contract_address = object.contract_address ?? "";
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.buy_amount = object.buy_amount ?? "";
    message.current_amount = object.current_amount ?? "";
    message.fee = object.fee ?? "";
    message.raised = object.raised ?? "";
    return message;
  },
};

function createBaseLaunchpadWhitelistEvent(): LaunchpadWhitelistEvent {
  return { contract_address: "", op: 0, ticker: "", addresses: [], reasons: [], admin: "" };
}

export const LaunchpadWhitelistEvent = {
  $type: "flux.indexer.campclash.LaunchpadWhitelistEvent" as const,

  encode(message: LaunchpadWhitelistEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.op !== 0) {
      writer.uint32(16).int32(message.op);
    }
    if (message.ticker !== "") {
      writer.uint32(26).string(message.ticker);
    }
    for (const v of message.addresses) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.reasons) {
      writer.uint32(42).string(v!);
    }
    if (message.admin !== "") {
      writer.uint32(50).string(message.admin);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadWhitelistEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadWhitelistEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.reasons.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.admin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadWhitelistEvent {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      op: isSet(object.op) ? whitelistEventOpFromJSON(object.op) : 0,
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      reasons: globalThis.Array.isArray(object?.reasons) ? object.reasons.map((e: any) => globalThis.String(e)) : [],
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
    };
  },

  toJSON(message: LaunchpadWhitelistEvent): unknown {
    const obj: any = {};
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    if (message.op !== undefined) {
      obj.op = whitelistEventOpToJSON(message.op);
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.reasons?.length) {
      obj.reasons = message.reasons;
    }
    if (message.admin !== undefined) {
      obj.admin = message.admin;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadWhitelistEvent>): LaunchpadWhitelistEvent {
    return LaunchpadWhitelistEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadWhitelistEvent>): LaunchpadWhitelistEvent {
    const message = createBaseLaunchpadWhitelistEvent();
    message.contract_address = object.contract_address ?? "";
    message.op = object.op ?? 0;
    message.ticker = object.ticker ?? "";
    message.addresses = object.addresses?.map((e) => e) || [];
    message.reasons = object.reasons?.map((e) => e) || [];
    message.admin = object.admin ?? "";
    return message;
  },
};

function createBaseLaunchpadClaimEvent(): LaunchpadClaimEvent {
  return { contract_address: "", ticker: "", address: "", denom: "", amount: "" };
}

export const LaunchpadClaimEvent = {
  $type: "flux.indexer.campclash.LaunchpadClaimEvent" as const,

  encode(message: LaunchpadClaimEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(42).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadClaimEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadClaimEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadClaimEvent {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: LaunchpadClaimEvent): unknown {
    const obj: any = {};
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadClaimEvent>): LaunchpadClaimEvent {
    return LaunchpadClaimEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadClaimEvent>): LaunchpadClaimEvent {
    const message = createBaseLaunchpadClaimEvent();
    message.contract_address = object.contract_address ?? "";
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
