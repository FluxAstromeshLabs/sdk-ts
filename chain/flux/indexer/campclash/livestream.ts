// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/livestream.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";

export interface InitiateRequest {
  project: string;
  address: string;
}

export interface InitiateResponse {
  chat_room: ChatRoom | undefined;
  stream_channels: StreamChannel[];
}

export interface StopStreamRequest {
  channel_arn: string;
  address: string;
  project: string;
}

export interface StopStreamResponse {
}

export interface QueryStreamInfoRequest {
  project: string;
}

export interface QueryStreamInfoResponse {
  project: string;
  chat_room: ChatRoom | undefined;
  stream_channels: StreamChannel[];
}

export interface CreateChatTokenRequest {
  project: string;
  address: string;
}

export interface CreateChatTokenResponse {
  token_id: string;
}

export interface ChatRoom {
  room_arn: string;
  region: string;
  created_at: string;
  room_id: string;
}

export interface StreamChannel {
  address: string;
  channel_arn: string;
  ingest_endpoint: string;
  playback_url: string;
  stream_key: string;
  is_live: boolean;
  created_at: string;
}

function createBaseInitiateRequest(): InitiateRequest {
  return { project: "", address: "" };
}

export const InitiateRequest = {
  $type: "flux.indexer.campclash.InitiateRequest" as const,

  encode(message: InitiateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitiateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiateRequest {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: InitiateRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = message.project;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<InitiateRequest>): InitiateRequest {
    return InitiateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitiateRequest>): InitiateRequest {
    const message = createBaseInitiateRequest();
    message.project = object.project ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseInitiateResponse(): InitiateResponse {
  return { chat_room: undefined, stream_channels: [] };
}

export const InitiateResponse = {
  $type: "flux.indexer.campclash.InitiateResponse" as const,

  encode(message: InitiateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chat_room !== undefined) {
      ChatRoom.encode(message.chat_room, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.stream_channels) {
      StreamChannel.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitiateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chat_room = ChatRoom.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stream_channels.push(StreamChannel.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiateResponse {
    return {
      chat_room: isSet(object.chat_room) ? ChatRoom.fromJSON(object.chat_room) : undefined,
      stream_channels: globalThis.Array.isArray(object?.stream_channels)
        ? object.stream_channels.map((e: any) => StreamChannel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InitiateResponse): unknown {
    const obj: any = {};
    if (message.chat_room !== undefined) {
      obj.chat_room = ChatRoom.toJSON(message.chat_room);
    }
    if (message.stream_channels?.length) {
      obj.stream_channels = message.stream_channels.map((e) => StreamChannel.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<InitiateResponse>): InitiateResponse {
    return InitiateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitiateResponse>): InitiateResponse {
    const message = createBaseInitiateResponse();
    message.chat_room = (object.chat_room !== undefined && object.chat_room !== null)
      ? ChatRoom.fromPartial(object.chat_room)
      : undefined;
    message.stream_channels = object.stream_channels?.map((e) => StreamChannel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStopStreamRequest(): StopStreamRequest {
  return { channel_arn: "", address: "", project: "" };
}

export const StopStreamRequest = {
  $type: "flux.indexer.campclash.StopStreamRequest" as const,

  encode(message: StopStreamRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_arn !== "") {
      writer.uint32(10).string(message.channel_arn);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StopStreamRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_arn = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopStreamRequest {
    return {
      channel_arn: isSet(object.channel_arn) ? globalThis.String(object.channel_arn) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: StopStreamRequest): unknown {
    const obj: any = {};
    if (message.channel_arn !== undefined) {
      obj.channel_arn = message.channel_arn;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.project !== undefined) {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<StopStreamRequest>): StopStreamRequest {
    return StopStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopStreamRequest>): StopStreamRequest {
    const message = createBaseStopStreamRequest();
    message.channel_arn = object.channel_arn ?? "";
    message.address = object.address ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseStopStreamResponse(): StopStreamResponse {
  return {};
}

export const StopStreamResponse = {
  $type: "flux.indexer.campclash.StopStreamResponse" as const,

  encode(_: StopStreamResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StopStreamResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StopStreamResponse {
    return {};
  },

  toJSON(_: StopStreamResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StopStreamResponse>): StopStreamResponse {
    return StopStreamResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StopStreamResponse>): StopStreamResponse {
    const message = createBaseStopStreamResponse();
    return message;
  },
};

function createBaseQueryStreamInfoRequest(): QueryStreamInfoRequest {
  return { project: "" };
}

export const QueryStreamInfoRequest = {
  $type: "flux.indexer.campclash.QueryStreamInfoRequest" as const,

  encode(message: QueryStreamInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryStreamInfoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStreamInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStreamInfoRequest {
    return { project: isSet(object.project) ? globalThis.String(object.project) : "" };
  },

  toJSON(message: QueryStreamInfoRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStreamInfoRequest>): QueryStreamInfoRequest {
    return QueryStreamInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStreamInfoRequest>): QueryStreamInfoRequest {
    const message = createBaseQueryStreamInfoRequest();
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseQueryStreamInfoResponse(): QueryStreamInfoResponse {
  return { project: "", chat_room: undefined, stream_channels: [] };
}

export const QueryStreamInfoResponse = {
  $type: "flux.indexer.campclash.QueryStreamInfoResponse" as const,

  encode(message: QueryStreamInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.chat_room !== undefined) {
      ChatRoom.encode(message.chat_room, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.stream_channels) {
      StreamChannel.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryStreamInfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStreamInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chat_room = ChatRoom.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stream_channels.push(StreamChannel.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStreamInfoResponse {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      chat_room: isSet(object.chat_room) ? ChatRoom.fromJSON(object.chat_room) : undefined,
      stream_channels: globalThis.Array.isArray(object?.stream_channels)
        ? object.stream_channels.map((e: any) => StreamChannel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryStreamInfoResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = message.project;
    }
    if (message.chat_room !== undefined) {
      obj.chat_room = ChatRoom.toJSON(message.chat_room);
    }
    if (message.stream_channels?.length) {
      obj.stream_channels = message.stream_channels.map((e) => StreamChannel.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStreamInfoResponse>): QueryStreamInfoResponse {
    return QueryStreamInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStreamInfoResponse>): QueryStreamInfoResponse {
    const message = createBaseQueryStreamInfoResponse();
    message.project = object.project ?? "";
    message.chat_room = (object.chat_room !== undefined && object.chat_room !== null)
      ? ChatRoom.fromPartial(object.chat_room)
      : undefined;
    message.stream_channels = object.stream_channels?.map((e) => StreamChannel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateChatTokenRequest(): CreateChatTokenRequest {
  return { project: "", address: "" };
}

export const CreateChatTokenRequest = {
  $type: "flux.indexer.campclash.CreateChatTokenRequest" as const,

  encode(message: CreateChatTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateChatTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChatTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChatTokenRequest {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: CreateChatTokenRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = message.project;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChatTokenRequest>): CreateChatTokenRequest {
    return CreateChatTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChatTokenRequest>): CreateChatTokenRequest {
    const message = createBaseCreateChatTokenRequest();
    message.project = object.project ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseCreateChatTokenResponse(): CreateChatTokenResponse {
  return { token_id: "" };
}

export const CreateChatTokenResponse = {
  $type: "flux.indexer.campclash.CreateChatTokenResponse" as const,

  encode(message: CreateChatTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token_id !== "") {
      writer.uint32(10).string(message.token_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateChatTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChatTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChatTokenResponse {
    return { token_id: isSet(object.token_id) ? globalThis.String(object.token_id) : "" };
  },

  toJSON(message: CreateChatTokenResponse): unknown {
    const obj: any = {};
    if (message.token_id !== undefined) {
      obj.token_id = message.token_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChatTokenResponse>): CreateChatTokenResponse {
    return CreateChatTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChatTokenResponse>): CreateChatTokenResponse {
    const message = createBaseCreateChatTokenResponse();
    message.token_id = object.token_id ?? "";
    return message;
  },
};

function createBaseChatRoom(): ChatRoom {
  return { room_arn: "", region: "", created_at: "", room_id: "" };
}

export const ChatRoom = {
  $type: "flux.indexer.campclash.ChatRoom" as const,

  encode(message: ChatRoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room_arn !== "") {
      writer.uint32(10).string(message.room_arn);
    }
    if (message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.created_at !== "") {
      writer.uint32(26).string(message.created_at);
    }
    if (message.room_id !== "") {
      writer.uint32(34).string(message.room_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChatRoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.room_arn = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created_at = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.room_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatRoom {
    return {
      room_arn: isSet(object.room_arn) ? globalThis.String(object.room_arn) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      created_at: isSet(object.created_at) ? globalThis.String(object.created_at) : "",
      room_id: isSet(object.room_id) ? globalThis.String(object.room_id) : "",
    };
  },

  toJSON(message: ChatRoom): unknown {
    const obj: any = {};
    if (message.room_arn !== undefined) {
      obj.room_arn = message.room_arn;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.created_at !== undefined) {
      obj.created_at = message.created_at;
    }
    if (message.room_id !== undefined) {
      obj.room_id = message.room_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ChatRoom>): ChatRoom {
    return ChatRoom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatRoom>): ChatRoom {
    const message = createBaseChatRoom();
    message.room_arn = object.room_arn ?? "";
    message.region = object.region ?? "";
    message.created_at = object.created_at ?? "";
    message.room_id = object.room_id ?? "";
    return message;
  },
};

function createBaseStreamChannel(): StreamChannel {
  return {
    address: "",
    channel_arn: "",
    ingest_endpoint: "",
    playback_url: "",
    stream_key: "",
    is_live: false,
    created_at: "",
  };
}

export const StreamChannel = {
  $type: "flux.indexer.campclash.StreamChannel" as const,

  encode(message: StreamChannel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.channel_arn !== "") {
      writer.uint32(18).string(message.channel_arn);
    }
    if (message.ingest_endpoint !== "") {
      writer.uint32(26).string(message.ingest_endpoint);
    }
    if (message.playback_url !== "") {
      writer.uint32(34).string(message.playback_url);
    }
    if (message.stream_key !== "") {
      writer.uint32(42).string(message.stream_key);
    }
    if (message.is_live !== false) {
      writer.uint32(48).bool(message.is_live);
    }
    if (message.created_at !== "") {
      writer.uint32(58).string(message.created_at);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChannel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_arn = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ingest_endpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.playback_url = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stream_key = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.is_live = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.created_at = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChannel {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      channel_arn: isSet(object.channel_arn) ? globalThis.String(object.channel_arn) : "",
      ingest_endpoint: isSet(object.ingest_endpoint) ? globalThis.String(object.ingest_endpoint) : "",
      playback_url: isSet(object.playback_url) ? globalThis.String(object.playback_url) : "",
      stream_key: isSet(object.stream_key) ? globalThis.String(object.stream_key) : "",
      is_live: isSet(object.is_live) ? globalThis.Boolean(object.is_live) : false,
      created_at: isSet(object.created_at) ? globalThis.String(object.created_at) : "",
    };
  },

  toJSON(message: StreamChannel): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.channel_arn !== undefined) {
      obj.channel_arn = message.channel_arn;
    }
    if (message.ingest_endpoint !== undefined) {
      obj.ingest_endpoint = message.ingest_endpoint;
    }
    if (message.playback_url !== undefined) {
      obj.playback_url = message.playback_url;
    }
    if (message.stream_key !== undefined) {
      obj.stream_key = message.stream_key;
    }
    if (message.is_live !== undefined) {
      obj.is_live = message.is_live;
    }
    if (message.created_at !== undefined) {
      obj.created_at = message.created_at;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChannel>): StreamChannel {
    return StreamChannel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChannel>): StreamChannel {
    const message = createBaseStreamChannel();
    message.address = object.address ?? "";
    message.channel_arn = object.channel_arn ?? "";
    message.ingest_endpoint = object.ingest_endpoint ?? "";
    message.playback_url = object.playback_url ?? "";
    message.stream_key = object.stream_key ?? "";
    message.is_live = object.is_live ?? false;
    message.created_at = object.created_at ?? "";
    return message;
  },
};

export interface LivestreamService {
  Initiate(request: DeepPartial<InitiateRequest>, metadata?: grpc.Metadata): Promise<InitiateResponse>;
  StopStream(request: DeepPartial<StopStreamRequest>, metadata?: grpc.Metadata): Promise<StopStreamResponse>;
  QueryStreamInfo(
    request: DeepPartial<QueryStreamInfoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryStreamInfoResponse>;
  CreateChatToken(
    request: DeepPartial<CreateChatTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<CreateChatTokenResponse>;
}

export class LivestreamServiceClientImpl implements LivestreamService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Initiate = this.Initiate.bind(this);
    this.StopStream = this.StopStream.bind(this);
    this.QueryStreamInfo = this.QueryStreamInfo.bind(this);
    this.CreateChatToken = this.CreateChatToken.bind(this);
  }

  Initiate(request: DeepPartial<InitiateRequest>, metadata?: grpc.Metadata): Promise<InitiateResponse> {
    return this.rpc.unary(LivestreamServiceInitiateDesc, InitiateRequest.fromPartial(request), metadata);
  }

  StopStream(request: DeepPartial<StopStreamRequest>, metadata?: grpc.Metadata): Promise<StopStreamResponse> {
    return this.rpc.unary(LivestreamServiceStopStreamDesc, StopStreamRequest.fromPartial(request), metadata);
  }

  QueryStreamInfo(
    request: DeepPartial<QueryStreamInfoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryStreamInfoResponse> {
    return this.rpc.unary(LivestreamServiceQueryStreamInfoDesc, QueryStreamInfoRequest.fromPartial(request), metadata);
  }

  CreateChatToken(
    request: DeepPartial<CreateChatTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<CreateChatTokenResponse> {
    return this.rpc.unary(LivestreamServiceCreateChatTokenDesc, CreateChatTokenRequest.fromPartial(request), metadata);
  }
}

export const LivestreamServiceDesc = { serviceName: "flux.indexer.campclash.LivestreamService" };

export const LivestreamServiceInitiateDesc: UnaryMethodDefinitionish = {
  methodName: "Initiate",
  service: LivestreamServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return InitiateRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = InitiateResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LivestreamServiceStopStreamDesc: UnaryMethodDefinitionish = {
  methodName: "StopStream",
  service: LivestreamServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return StopStreamRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StopStreamResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LivestreamServiceQueryStreamInfoDesc: UnaryMethodDefinitionish = {
  methodName: "QueryStreamInfo",
  service: LivestreamServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryStreamInfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryStreamInfoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LivestreamServiceCreateChatTokenDesc: UnaryMethodDefinitionish = {
  methodName: "CreateChatToken",
  service: LivestreamServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CreateChatTokenRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CreateChatTokenResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
