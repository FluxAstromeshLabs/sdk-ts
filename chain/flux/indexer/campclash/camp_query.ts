// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/camp_query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Project, Trade, User } from "./camp";

export interface ListProjectsRequest {
  pagination: PageRequest | undefined;
  denom: string;
  search: string;
  /** ordering for leaderboard */
  sort_by_fields: string[];
}

export interface ListProjectsResponse {
  pagination: PageResponse | undefined;
  projects: Project[];
}

export interface StreamProjectRequest {
  denom: string;
}

export interface StreamProjectResponse {
  deleted: string;
  height: string;
  project: Project | undefined;
}

export interface ListUsersRequest {
  pagination: PageRequest | undefined;
  denom: string;
  user_address: string;
}

export interface ListUsersResponse {
  pagination: PageResponse | undefined;
  user: User[];
}

export interface StreamUsersRequest {
  denom: string;
  user_address: string;
}

export interface StreamUsersResponse {
  deleted: string;
  height: string;
  user: User | undefined;
}

export interface ListTradesRequest {
  pagination: PageRequest | undefined;
  denom: string;
  user_address: string;
}

export interface ListTradesResponse {
  pagination: PageResponse | undefined;
  trades: Trade[];
}

export interface StreamTradesRequest {
  denom: string;
  user_address: string;
}

export interface StreamTradesResponse {
  deleted: string;
  height: string;
  trade: Trade | undefined;
}

export interface Comment {
  camp_denom: string;
  account: string;
  content: string;
  time: string;
}

export interface PostCommentRequest {
  comment: Comment | undefined;
}

export interface PostCommentResponse {
}

export interface ListCommentsRequest {
  pagination: PageRequest | undefined;
  camp_denom: string;
}

export interface ListCommentsResponse {
  pagination: PageResponse | undefined;
  comments: Comment[];
}

export interface StreamCommentsRequest {
  camp_denom: string;
}

export interface StreamCommentsResponse {
  deleted: string;
  height: string;
  comment: Comment | undefined;
}

function createBaseListProjectsRequest(): ListProjectsRequest {
  return { pagination: undefined, denom: "", search: "", sort_by_fields: [] };
}

export const ListProjectsRequest = {
  $type: "flux.indexer.campclash.ListProjectsRequest" as const,

  encode(message: ListProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.search !== "") {
      writer.uint32(26).string(message.search);
    }
    for (const v of message.sort_by_fields) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.search = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sort_by_fields.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      search: isSet(object.search) ? globalThis.String(object.search) : "",
      sort_by_fields: globalThis.Array.isArray(object?.sort_by_fields)
        ? object.sort_by_fields.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListProjectsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.search !== undefined) {
      obj.search = message.search;
    }
    if (message.sort_by_fields?.length) {
      obj.sort_by_fields = message.sort_by_fields;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    return ListProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    const message = createBaseListProjectsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.denom = object.denom ?? "";
    message.search = object.search ?? "";
    message.sort_by_fields = object.sort_by_fields?.map((e) => e) || [];
    return message;
  },
};

function createBaseListProjectsResponse(): ListProjectsResponse {
  return { pagination: undefined, projects: [] };
}

export const ListProjectsResponse = {
  $type: "flux.indexer.campclash.ListProjectsResponse" as const,

  encode(message: ListProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    return ListProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    const message = createBaseListProjectsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamProjectRequest(): StreamProjectRequest {
  return { denom: "" };
}

export const StreamProjectRequest = {
  $type: "flux.indexer.campclash.StreamProjectRequest" as const,

  encode(message: StreamProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamProjectRequest {
    return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
  },

  toJSON(message: StreamProjectRequest): unknown {
    const obj: any = {};
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamProjectRequest>): StreamProjectRequest {
    return StreamProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamProjectRequest>): StreamProjectRequest {
    const message = createBaseStreamProjectRequest();
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseStreamProjectResponse(): StreamProjectResponse {
  return { deleted: "0", height: "0", project: undefined };
}

export const StreamProjectResponse = {
  $type: "flux.indexer.campclash.StreamProjectResponse" as const,

  encode(message: StreamProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamProjectResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      project: isSet(object.project) ? Project.fromJSON(object.project) : undefined,
    };
  },

  toJSON(message: StreamProjectResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamProjectResponse>): StreamProjectResponse {
    return StreamProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamProjectResponse>): StreamProjectResponse {
    const message = createBaseStreamProjectResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { pagination: undefined, denom: "", user_address: "" };
}

export const ListUsersRequest = {
  $type: "flux.indexer.campclash.ListUsersRequest" as const,

  encode(message: ListUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.user_address !== "") {
      writer.uint32(26).string(message.user_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
    };
  },

  toJSON(message: ListUsersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUsersRequest>): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUsersRequest>): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.denom = object.denom ?? "";
    message.user_address = object.user_address ?? "";
    return message;
  },
};

function createBaseListUsersResponse(): ListUsersResponse {
  return { pagination: undefined, user: [] };
}

export const ListUsersResponse = {
  $type: "flux.indexer.campclash.ListUsersResponse" as const,

  encode(message: ListUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.user) {
      User.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      user: globalThis.Array.isArray(object?.user) ? object.user.map((e: any) => User.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUsersResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.user?.length) {
      obj.user = message.user.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListUsersResponse>): ListUsersResponse {
    return ListUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUsersResponse>): ListUsersResponse {
    const message = createBaseListUsersResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.user = object.user?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamUsersRequest(): StreamUsersRequest {
  return { denom: "", user_address: "" };
}

export const StreamUsersRequest = {
  $type: "flux.indexer.campclash.StreamUsersRequest" as const,

  encode(message: StreamUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.user_address !== "") {
      writer.uint32(18).string(message.user_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamUsersRequest {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
    };
  },

  toJSON(message: StreamUsersRequest): unknown {
    const obj: any = {};
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamUsersRequest>): StreamUsersRequest {
    return StreamUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamUsersRequest>): StreamUsersRequest {
    const message = createBaseStreamUsersRequest();
    message.denom = object.denom ?? "";
    message.user_address = object.user_address ?? "";
    return message;
  },
};

function createBaseStreamUsersResponse(): StreamUsersResponse {
  return { deleted: "0", height: "0", user: undefined };
}

export const StreamUsersResponse = {
  $type: "flux.indexer.campclash.StreamUsersResponse" as const,

  encode(message: StreamUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamUsersResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: StreamUsersResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamUsersResponse>): StreamUsersResponse {
    return StreamUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamUsersResponse>): StreamUsersResponse {
    const message = createBaseStreamUsersResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseListTradesRequest(): ListTradesRequest {
  return { pagination: undefined, denom: "", user_address: "" };
}

export const ListTradesRequest = {
  $type: "flux.indexer.campclash.ListTradesRequest" as const,

  encode(message: ListTradesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.user_address !== "") {
      writer.uint32(26).string(message.user_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTradesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTradesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTradesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
    };
  },

  toJSON(message: ListTradesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTradesRequest>): ListTradesRequest {
    return ListTradesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTradesRequest>): ListTradesRequest {
    const message = createBaseListTradesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.denom = object.denom ?? "";
    message.user_address = object.user_address ?? "";
    return message;
  },
};

function createBaseListTradesResponse(): ListTradesResponse {
  return { pagination: undefined, trades: [] };
}

export const ListTradesResponse = {
  $type: "flux.indexer.campclash.ListTradesResponse" as const,

  encode(message: ListTradesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.trades) {
      Trade.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTradesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTradesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trades.push(Trade.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTradesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      trades: globalThis.Array.isArray(object?.trades) ? object.trades.map((e: any) => Trade.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListTradesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.trades?.length) {
      obj.trades = message.trades.map((e) => Trade.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTradesResponse>): ListTradesResponse {
    return ListTradesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTradesResponse>): ListTradesResponse {
    const message = createBaseListTradesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.trades = object.trades?.map((e) => Trade.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamTradesRequest(): StreamTradesRequest {
  return { denom: "", user_address: "" };
}

export const StreamTradesRequest = {
  $type: "flux.indexer.campclash.StreamTradesRequest" as const,

  encode(message: StreamTradesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.user_address !== "") {
      writer.uint32(18).string(message.user_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamTradesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTradesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTradesRequest {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
    };
  },

  toJSON(message: StreamTradesRequest): unknown {
    const obj: any = {};
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamTradesRequest>): StreamTradesRequest {
    return StreamTradesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamTradesRequest>): StreamTradesRequest {
    const message = createBaseStreamTradesRequest();
    message.denom = object.denom ?? "";
    message.user_address = object.user_address ?? "";
    return message;
  },
};

function createBaseStreamTradesResponse(): StreamTradesResponse {
  return { deleted: "0", height: "0", trade: undefined };
}

export const StreamTradesResponse = {
  $type: "flux.indexer.campclash.StreamTradesResponse" as const,

  encode(message: StreamTradesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.trade !== undefined) {
      Trade.encode(message.trade, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamTradesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTradesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trade = Trade.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTradesResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      trade: isSet(object.trade) ? Trade.fromJSON(object.trade) : undefined,
    };
  },

  toJSON(message: StreamTradesResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.trade !== undefined) {
      obj.trade = Trade.toJSON(message.trade);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamTradesResponse>): StreamTradesResponse {
    return StreamTradesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamTradesResponse>): StreamTradesResponse {
    const message = createBaseStreamTradesResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.trade = (object.trade !== undefined && object.trade !== null) ? Trade.fromPartial(object.trade) : undefined;
    return message;
  },
};

function createBaseComment(): Comment {
  return { camp_denom: "", account: "", content: "", time: "0" };
}

export const Comment = {
  $type: "flux.indexer.campclash.Comment" as const,

  encode(message: Comment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.time !== "0") {
      writer.uint32(32).uint64(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Comment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.time = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      time: isSet(object.time) ? globalThis.String(object.time) : "0",
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.account !== undefined) {
      obj.account = message.account;
    }
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    return obj;
  },

  create(base?: DeepPartial<Comment>): Comment {
    return Comment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment>): Comment {
    const message = createBaseComment();
    message.camp_denom = object.camp_denom ?? "";
    message.account = object.account ?? "";
    message.content = object.content ?? "";
    message.time = object.time ?? "0";
    return message;
  },
};

function createBasePostCommentRequest(): PostCommentRequest {
  return { comment: undefined };
}

export const PostCommentRequest = {
  $type: "flux.indexer.campclash.PostCommentRequest" as const,

  encode(message: PostCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostCommentRequest {
    return { comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined };
  },

  toJSON(message: PostCommentRequest): unknown {
    const obj: any = {};
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    return obj;
  },

  create(base?: DeepPartial<PostCommentRequest>): PostCommentRequest {
    return PostCommentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostCommentRequest>): PostCommentRequest {
    const message = createBasePostCommentRequest();
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

function createBasePostCommentResponse(): PostCommentResponse {
  return {};
}

export const PostCommentResponse = {
  $type: "flux.indexer.campclash.PostCommentResponse" as const,

  encode(_: PostCommentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostCommentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PostCommentResponse {
    return {};
  },

  toJSON(_: PostCommentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PostCommentResponse>): PostCommentResponse {
    return PostCommentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PostCommentResponse>): PostCommentResponse {
    const message = createBasePostCommentResponse();
    return message;
  },
};

function createBaseListCommentsRequest(): ListCommentsRequest {
  return { pagination: undefined, camp_denom: "" };
}

export const ListCommentsRequest = {
  $type: "flux.indexer.campclash.ListCommentsRequest" as const,

  encode(message: ListCommentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCommentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
    };
  },

  toJSON(message: ListCommentsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    return ListCommentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    const message = createBaseListCommentsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_denom = object.camp_denom ?? "";
    return message;
  },
};

function createBaseListCommentsResponse(): ListCommentsResponse {
  return { pagination: undefined, comments: [] };
}

export const ListCommentsResponse = {
  $type: "flux.indexer.campclash.ListCommentsResponse" as const,

  encode(message: ListCommentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCommentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      comments: globalThis.Array.isArray(object?.comments) ? object.comments.map((e: any) => Comment.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListCommentsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => Comment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    return ListCommentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    const message = createBaseListCommentsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.comments = object.comments?.map((e) => Comment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamCommentsRequest(): StreamCommentsRequest {
  return { camp_denom: "" };
}

export const StreamCommentsRequest = {
  $type: "flux.indexer.campclash.StreamCommentsRequest" as const,

  encode(message: StreamCommentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamCommentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCommentsRequest {
    return { camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "" };
  },

  toJSON(message: StreamCommentsRequest): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamCommentsRequest>): StreamCommentsRequest {
    return StreamCommentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamCommentsRequest>): StreamCommentsRequest {
    const message = createBaseStreamCommentsRequest();
    message.camp_denom = object.camp_denom ?? "";
    return message;
  },
};

function createBaseStreamCommentsResponse(): StreamCommentsResponse {
  return { deleted: "0", height: "0", comment: undefined };
}

export const StreamCommentsResponse = {
  $type: "flux.indexer.campclash.StreamCommentsResponse" as const,

  encode(message: StreamCommentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamCommentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCommentsResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined,
    };
  },

  toJSON(message: StreamCommentsResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamCommentsResponse>): StreamCommentsResponse {
    return StreamCommentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamCommentsResponse>): StreamCommentsResponse {
    const message = createBaseStreamCommentsResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface CampclashQuery {
  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse>;
  StreamProject(
    request: DeepPartial<StreamProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamProjectResponse>;
  ListUsers(request: DeepPartial<ListUsersRequest>, metadata?: grpc.Metadata): Promise<ListUsersResponse>;
  StreamUsers(request: DeepPartial<StreamUsersRequest>, metadata?: grpc.Metadata): Observable<StreamUsersResponse>;
  ListTrades(request: DeepPartial<ListTradesRequest>, metadata?: grpc.Metadata): Promise<ListTradesResponse>;
  StreamTrades(request: DeepPartial<StreamTradesRequest>, metadata?: grpc.Metadata): Observable<StreamTradesResponse>;
  PostComment(request: DeepPartial<PostCommentRequest>, metadata?: grpc.Metadata): Promise<PostCommentResponse>;
  ListComments(request: DeepPartial<ListCommentsRequest>, metadata?: grpc.Metadata): Promise<ListCommentsResponse>;
  StreamComments(
    request: DeepPartial<StreamCommentsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamCommentsResponse>;
}

export class CampclashQueryClientImpl implements CampclashQuery {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ListProjects = this.ListProjects.bind(this);
    this.StreamProject = this.StreamProject.bind(this);
    this.ListUsers = this.ListUsers.bind(this);
    this.StreamUsers = this.StreamUsers.bind(this);
    this.ListTrades = this.ListTrades.bind(this);
    this.StreamTrades = this.StreamTrades.bind(this);
    this.PostComment = this.PostComment.bind(this);
    this.ListComments = this.ListComments.bind(this);
    this.StreamComments = this.StreamComments.bind(this);
  }

  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse> {
    return this.rpc.unary(CampclashQueryListProjectsDesc, ListProjectsRequest.fromPartial(request), metadata);
  }

  StreamProject(
    request: DeepPartial<StreamProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamProjectResponse> {
    return this.rpc.invoke(CampclashQueryStreamProjectDesc, StreamProjectRequest.fromPartial(request), metadata);
  }

  ListUsers(request: DeepPartial<ListUsersRequest>, metadata?: grpc.Metadata): Promise<ListUsersResponse> {
    return this.rpc.unary(CampclashQueryListUsersDesc, ListUsersRequest.fromPartial(request), metadata);
  }

  StreamUsers(request: DeepPartial<StreamUsersRequest>, metadata?: grpc.Metadata): Observable<StreamUsersResponse> {
    return this.rpc.invoke(CampclashQueryStreamUsersDesc, StreamUsersRequest.fromPartial(request), metadata);
  }

  ListTrades(request: DeepPartial<ListTradesRequest>, metadata?: grpc.Metadata): Promise<ListTradesResponse> {
    return this.rpc.unary(CampclashQueryListTradesDesc, ListTradesRequest.fromPartial(request), metadata);
  }

  StreamTrades(request: DeepPartial<StreamTradesRequest>, metadata?: grpc.Metadata): Observable<StreamTradesResponse> {
    return this.rpc.invoke(CampclashQueryStreamTradesDesc, StreamTradesRequest.fromPartial(request), metadata);
  }

  PostComment(request: DeepPartial<PostCommentRequest>, metadata?: grpc.Metadata): Promise<PostCommentResponse> {
    return this.rpc.unary(CampclashQueryPostCommentDesc, PostCommentRequest.fromPartial(request), metadata);
  }

  ListComments(request: DeepPartial<ListCommentsRequest>, metadata?: grpc.Metadata): Promise<ListCommentsResponse> {
    return this.rpc.unary(CampclashQueryListCommentsDesc, ListCommentsRequest.fromPartial(request), metadata);
  }

  StreamComments(
    request: DeepPartial<StreamCommentsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamCommentsResponse> {
    return this.rpc.invoke(CampclashQueryStreamCommentsDesc, StreamCommentsRequest.fromPartial(request), metadata);
  }
}

export const CampclashQueryDesc = { serviceName: "flux.indexer.campclash.CampclashQuery" };

export const CampclashQueryListProjectsDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjects",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamProjectDesc: UnaryMethodDefinitionish = {
  methodName: "StreamProject",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListUsersDesc: UnaryMethodDefinitionish = {
  methodName: "ListUsers",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUsersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUsersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamUsersDesc: UnaryMethodDefinitionish = {
  methodName: "StreamUsers",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamUsersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamUsersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListTradesDesc: UnaryMethodDefinitionish = {
  methodName: "ListTrades",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListTradesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListTradesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamTradesDesc: UnaryMethodDefinitionish = {
  methodName: "StreamTrades",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamTradesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamTradesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryPostCommentDesc: UnaryMethodDefinitionish = {
  methodName: "PostComment",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return PostCommentRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = PostCommentResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListCommentsDesc: UnaryMethodDefinitionish = {
  methodName: "ListComments",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListCommentsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListCommentsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamCommentsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamComments",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamCommentsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamCommentsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
