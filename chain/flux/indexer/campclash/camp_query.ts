// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/camp_query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Challenge, ChallengeVote, Claimable, Project, Trade, UserBalance } from "./camp";

/**
 * Define the Action enum
 * TODO: Add more action here
 */
export enum Action {
  OPEN_PAGE = 0,
  CLOSE_PAGE = 1,
  UNRECOGNIZED = -1,
}

export function actionFromJSON(object: any): Action {
  switch (object) {
    case 0:
    case "OPEN_PAGE":
      return Action.OPEN_PAGE;
    case 1:
    case "CLOSE_PAGE":
      return Action.CLOSE_PAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Action.UNRECOGNIZED;
  }
}

export function actionToJSON(object: Action): string {
  switch (object) {
    case Action.OPEN_PAGE:
      return "OPEN_PAGE";
    case Action.CLOSE_PAGE:
      return "CLOSE_PAGE";
    case Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ListProjectsRequest {
  pagination: PageRequest | undefined;
  camp_denom: string;
  search: string;
  /** ordering for leaderboard */
  sort_by_fields: string[];
  camp_type: string;
  tags: string[];
  /** for listing challengable projects */
  only_challengeable: boolean;
}

export interface ListProjectsResponse {
  pagination: PageResponse | undefined;
  projects: Project[];
}

export interface StreamProjectRequest {
  camp_denom: string;
  camp_type: string;
  tags: string[];
}

export interface StreamProjectResponse {
  deleted: string;
  height: string;
  project: Project | undefined;
  stream_operation: string;
}

export interface ListBalancesRequest {
  pagination: PageRequest | undefined;
  camp_denom: string;
  user_address: string;
  sort_by: string;
  /** effective if sort_by != "" */
  sort_asc: boolean;
  challenge_id: string;
}

export interface ListBalancesResponse {
  pagination: PageResponse | undefined;
  user_balance: UserBalance[];
  challenge_id: string;
}

export interface StreamBalancesRequest {
  camp_denom: string;
  address: string;
}

export interface StreamBalancesResponse {
  deleted: string;
  user: UserBalance | undefined;
}

export interface ListTradesRequest {
  pagination: PageRequest | undefined;
  camp_denom: string;
  user_address: string;
}

export interface ListTradesResponse {
  pagination: PageResponse | undefined;
  trades: Trade[];
}

export interface StreamTradesRequest {
  camp_denom: string;
  user_address: string;
  camp_type: string;
}

export interface StreamTradesResponse {
  deleted: string;
  height: string;
  trade: Trade | undefined;
}

export interface Comment {
  camp_denom: string;
  account: string;
  content: string;
  time: string;
}

export interface PostCommentRequest {
  comment: Comment | undefined;
}

export interface PostCommentResponse {
}

export interface ListCommentsRequest {
  pagination: PageRequest | undefined;
  camp_denom: string;
}

export interface ListCommentsResponse {
  pagination: PageResponse | undefined;
  comments: Comment[];
}

export interface StreamCommentsRequest {
  camp_denom: string;
}

export interface StreamCommentsResponse {
  deleted: string;
  height: string;
  comment: Comment | undefined;
}

export interface GetLeaderboardRequest {
  pagination: PageRequest | undefined;
  camp_type: string;
  sort_by: string;
}

export interface GetLeaderboardResponse {
  pagination: PageResponse | undefined;
  projects: Project[];
}

/** Define the ListChallenge request and response */
export interface ListChallengeRequest {
  pagination: PageRequest | undefined;
  challenge_id: string;
  status: string;
  challenger_denom: string;
  challenged_denom: string;
}

export interface ListChallengeResponse {
  pagination: PageResponse | undefined;
  challenges: Challenge[];
}

/** Define the StreamChallenge request and response */
export interface StreamChallengeRequest {
  challenge_id: string;
}

export interface StreamChallengeResponse {
  deleted: string;
  challenge: Challenge | undefined;
  stream_operation: string;
}

export interface ListChallengeClaimableRequest {
  pagination: PageRequest | undefined;
  challenge_id: string;
  /** only list claimable on single side */
  camp_denom: string;
  /** only get claimable one single address for the challenge */
  address: string;
}

export interface ListChallengeClaimableResponse {
  pagination: PageResponse | undefined;
  challenge_id: string;
  entries: Claimable[];
}

/** Define the StreamChallengeClaimable request and response */
export interface StreamChallengeClaimableRequest {
  challenge_id: string;
  /** only list claimable on single side */
  camp_denom: string;
  /** only stream claimed assets of this address */
  addresss: string;
}

export interface StreamChallengeClaimableResponse {
  deleted: boolean;
  entry: Claimable | undefined;
}

export interface StreamChallengeVoteRequest {
  challenge_id: string;
}

export interface StreamChallengeVoteResponse {
  deleted: boolean;
  vote: ChallengeVote | undefined;
}

export interface GetUserChallengesRequest {
  pagination: PageRequest | undefined;
  address: string;
  unclaimed_challenge: boolean;
}

export interface GetUserChallengesResponse {
  pagination: PageResponse | undefined;
  challenges: Challenge[];
}

export interface GetLogoPresignedURLRequest {
  logo_size: string;
}

export interface GetLogoPresignedURLResponse {
  url: string;
}

export interface GetCampLatestHeightRequest {
}

export interface GetCampLatestHeightResponse {
  height: string;
}

/** PushUserActivity API: Stream user activity to the server */
export interface PushUserActivityRequest {
  /** Nullable string (use empty string for null) */
  address: string;
  /** URL the user is on */
  url: string;
  /** Action performed by the user */
  action: Action;
}

export interface PushUserActivityResponse {
}

/** Empty input */
export interface SubscribeUserActivityRequest {
}

export interface SubscribeUserActivityResponse {
  /** IP address of the user */
  ip: string;
  /** Nullable string (use empty string for null) */
  address: string;
  /** URL the user is on */
  url: string;
  /** Action performed by the user */
  action: Action;
}

function createBaseListProjectsRequest(): ListProjectsRequest {
  return {
    pagination: undefined,
    camp_denom: "",
    search: "",
    sort_by_fields: [],
    camp_type: "",
    tags: [],
    only_challengeable: false,
  };
}

export const ListProjectsRequest = {
  $type: "flux.indexer.campclash.ListProjectsRequest" as const,

  encode(message: ListProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    if (message.search !== "") {
      writer.uint32(26).string(message.search);
    }
    for (const v of message.sort_by_fields) {
      writer.uint32(34).string(v!);
    }
    if (message.camp_type !== "") {
      writer.uint32(42).string(message.camp_type);
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    if (message.only_challengeable !== false) {
      writer.uint32(56).bool(message.only_challengeable);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.search = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sort_by_fields.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.camp_type = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.only_challengeable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      search: isSet(object.search) ? globalThis.String(object.search) : "",
      sort_by_fields: globalThis.Array.isArray(object?.sort_by_fields)
        ? object.sort_by_fields.map((e: any) => globalThis.String(e))
        : [],
      camp_type: isSet(object.camp_type) ? globalThis.String(object.camp_type) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      only_challengeable: isSet(object.only_challengeable) ? globalThis.Boolean(object.only_challengeable) : false,
    };
  },

  toJSON(message: ListProjectsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.search !== undefined) {
      obj.search = message.search;
    }
    if (message.sort_by_fields?.length) {
      obj.sort_by_fields = message.sort_by_fields;
    }
    if (message.camp_type !== undefined) {
      obj.camp_type = message.camp_type;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.only_challengeable !== undefined) {
      obj.only_challengeable = message.only_challengeable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    return ListProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    const message = createBaseListProjectsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_denom = object.camp_denom ?? "";
    message.search = object.search ?? "";
    message.sort_by_fields = object.sort_by_fields?.map((e) => e) || [];
    message.camp_type = object.camp_type ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.only_challengeable = object.only_challengeable ?? false;
    return message;
  },
};

function createBaseListProjectsResponse(): ListProjectsResponse {
  return { pagination: undefined, projects: [] };
}

export const ListProjectsResponse = {
  $type: "flux.indexer.campclash.ListProjectsResponse" as const,

  encode(message: ListProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    return ListProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    const message = createBaseListProjectsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamProjectRequest(): StreamProjectRequest {
  return { camp_denom: "", camp_type: "", tags: [] };
}

export const StreamProjectRequest = {
  $type: "flux.indexer.campclash.StreamProjectRequest" as const,

  encode(message: StreamProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    if (message.camp_type !== "") {
      writer.uint32(18).string(message.camp_type);
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamProjectRequest {
    return {
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      camp_type: isSet(object.camp_type) ? globalThis.String(object.camp_type) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StreamProjectRequest): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.camp_type !== undefined) {
      obj.camp_type = message.camp_type;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamProjectRequest>): StreamProjectRequest {
    return StreamProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamProjectRequest>): StreamProjectRequest {
    const message = createBaseStreamProjectRequest();
    message.camp_denom = object.camp_denom ?? "";
    message.camp_type = object.camp_type ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseStreamProjectResponse(): StreamProjectResponse {
  return { deleted: "0", height: "0", project: undefined, stream_operation: "" };
}

export const StreamProjectResponse = {
  $type: "flux.indexer.campclash.StreamProjectResponse" as const,

  encode(message: StreamProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(26).fork()).ldelim();
    }
    if (message.stream_operation !== "") {
      writer.uint32(34).string(message.stream_operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stream_operation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamProjectResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      project: isSet(object.project) ? Project.fromJSON(object.project) : undefined,
      stream_operation: isSet(object.stream_operation) ? globalThis.String(object.stream_operation) : "",
    };
  },

  toJSON(message: StreamProjectResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    if (message.stream_operation !== undefined) {
      obj.stream_operation = message.stream_operation;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamProjectResponse>): StreamProjectResponse {
    return StreamProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamProjectResponse>): StreamProjectResponse {
    const message = createBaseStreamProjectResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    message.stream_operation = object.stream_operation ?? "";
    return message;
  },
};

function createBaseListBalancesRequest(): ListBalancesRequest {
  return { pagination: undefined, camp_denom: "", user_address: "", sort_by: "", sort_asc: false, challenge_id: "0" };
}

export const ListBalancesRequest = {
  $type: "flux.indexer.campclash.ListBalancesRequest" as const,

  encode(message: ListBalancesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    if (message.user_address !== "") {
      writer.uint32(26).string(message.user_address);
    }
    if (message.sort_by !== "") {
      writer.uint32(34).string(message.sort_by);
    }
    if (message.sort_asc !== false) {
      writer.uint32(40).bool(message.sort_asc);
    }
    if (message.challenge_id !== "0") {
      writer.uint32(48).uint64(message.challenge_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListBalancesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sort_by = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.sort_asc = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBalancesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
      sort_by: isSet(object.sort_by) ? globalThis.String(object.sort_by) : "",
      sort_asc: isSet(object.sort_asc) ? globalThis.Boolean(object.sort_asc) : false,
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
    };
  },

  toJSON(message: ListBalancesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    if (message.sort_by !== undefined) {
      obj.sort_by = message.sort_by;
    }
    if (message.sort_asc !== undefined) {
      obj.sort_asc = message.sort_asc;
    }
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBalancesRequest>): ListBalancesRequest {
    return ListBalancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBalancesRequest>): ListBalancesRequest {
    const message = createBaseListBalancesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_denom = object.camp_denom ?? "";
    message.user_address = object.user_address ?? "";
    message.sort_by = object.sort_by ?? "";
    message.sort_asc = object.sort_asc ?? false;
    message.challenge_id = object.challenge_id ?? "0";
    return message;
  },
};

function createBaseListBalancesResponse(): ListBalancesResponse {
  return { pagination: undefined, user_balance: [], challenge_id: "0" };
}

export const ListBalancesResponse = {
  $type: "flux.indexer.campclash.ListBalancesResponse" as const,

  encode(message: ListBalancesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.user_balance) {
      UserBalance.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.challenge_id !== "0") {
      writer.uint32(24).uint64(message.challenge_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListBalancesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_balance.push(UserBalance.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBalancesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      user_balance: globalThis.Array.isArray(object?.user_balance)
        ? object.user_balance.map((e: any) => UserBalance.fromJSON(e))
        : [],
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
    };
  },

  toJSON(message: ListBalancesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.user_balance?.length) {
      obj.user_balance = message.user_balance.map((e) => UserBalance.toJSON(e));
    }
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBalancesResponse>): ListBalancesResponse {
    return ListBalancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBalancesResponse>): ListBalancesResponse {
    const message = createBaseListBalancesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.user_balance = object.user_balance?.map((e) => UserBalance.fromPartial(e)) || [];
    message.challenge_id = object.challenge_id ?? "0";
    return message;
  },
};

function createBaseStreamBalancesRequest(): StreamBalancesRequest {
  return { camp_denom: "", address: "" };
}

export const StreamBalancesRequest = {
  $type: "flux.indexer.campclash.StreamBalancesRequest" as const,

  encode(message: StreamBalancesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamBalancesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamBalancesRequest {
    return {
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: StreamBalancesRequest): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamBalancesRequest>): StreamBalancesRequest {
    return StreamBalancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamBalancesRequest>): StreamBalancesRequest {
    const message = createBaseStreamBalancesRequest();
    message.camp_denom = object.camp_denom ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseStreamBalancesResponse(): StreamBalancesResponse {
  return { deleted: "0", user: undefined };
}

export const StreamBalancesResponse = {
  $type: "flux.indexer.campclash.StreamBalancesResponse" as const,

  encode(message: StreamBalancesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.user !== undefined) {
      UserBalance.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamBalancesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = UserBalance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamBalancesResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      user: isSet(object.user) ? UserBalance.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: StreamBalancesResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.user !== undefined) {
      obj.user = UserBalance.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamBalancesResponse>): StreamBalancesResponse {
    return StreamBalancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamBalancesResponse>): StreamBalancesResponse {
    const message = createBaseStreamBalancesResponse();
    message.deleted = object.deleted ?? "0";
    message.user = (object.user !== undefined && object.user !== null)
      ? UserBalance.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseListTradesRequest(): ListTradesRequest {
  return { pagination: undefined, camp_denom: "", user_address: "" };
}

export const ListTradesRequest = {
  $type: "flux.indexer.campclash.ListTradesRequest" as const,

  encode(message: ListTradesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    if (message.user_address !== "") {
      writer.uint32(26).string(message.user_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTradesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTradesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTradesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
    };
  },

  toJSON(message: ListTradesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTradesRequest>): ListTradesRequest {
    return ListTradesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTradesRequest>): ListTradesRequest {
    const message = createBaseListTradesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_denom = object.camp_denom ?? "";
    message.user_address = object.user_address ?? "";
    return message;
  },
};

function createBaseListTradesResponse(): ListTradesResponse {
  return { pagination: undefined, trades: [] };
}

export const ListTradesResponse = {
  $type: "flux.indexer.campclash.ListTradesResponse" as const,

  encode(message: ListTradesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.trades) {
      Trade.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTradesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTradesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trades.push(Trade.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTradesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      trades: globalThis.Array.isArray(object?.trades) ? object.trades.map((e: any) => Trade.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListTradesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.trades?.length) {
      obj.trades = message.trades.map((e) => Trade.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTradesResponse>): ListTradesResponse {
    return ListTradesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTradesResponse>): ListTradesResponse {
    const message = createBaseListTradesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.trades = object.trades?.map((e) => Trade.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamTradesRequest(): StreamTradesRequest {
  return { camp_denom: "", user_address: "", camp_type: "" };
}

export const StreamTradesRequest = {
  $type: "flux.indexer.campclash.StreamTradesRequest" as const,

  encode(message: StreamTradesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    if (message.user_address !== "") {
      writer.uint32(18).string(message.user_address);
    }
    if (message.camp_type !== "") {
      writer.uint32(26).string(message.camp_type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamTradesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTradesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.camp_type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTradesRequest {
    return {
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      user_address: isSet(object.user_address) ? globalThis.String(object.user_address) : "",
      camp_type: isSet(object.camp_type) ? globalThis.String(object.camp_type) : "",
    };
  },

  toJSON(message: StreamTradesRequest): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.user_address !== undefined) {
      obj.user_address = message.user_address;
    }
    if (message.camp_type !== undefined) {
      obj.camp_type = message.camp_type;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamTradesRequest>): StreamTradesRequest {
    return StreamTradesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamTradesRequest>): StreamTradesRequest {
    const message = createBaseStreamTradesRequest();
    message.camp_denom = object.camp_denom ?? "";
    message.user_address = object.user_address ?? "";
    message.camp_type = object.camp_type ?? "";
    return message;
  },
};

function createBaseStreamTradesResponse(): StreamTradesResponse {
  return { deleted: "0", height: "0", trade: undefined };
}

export const StreamTradesResponse = {
  $type: "flux.indexer.campclash.StreamTradesResponse" as const,

  encode(message: StreamTradesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.trade !== undefined) {
      Trade.encode(message.trade, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamTradesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTradesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trade = Trade.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTradesResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      trade: isSet(object.trade) ? Trade.fromJSON(object.trade) : undefined,
    };
  },

  toJSON(message: StreamTradesResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.trade !== undefined) {
      obj.trade = Trade.toJSON(message.trade);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamTradesResponse>): StreamTradesResponse {
    return StreamTradesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamTradesResponse>): StreamTradesResponse {
    const message = createBaseStreamTradesResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.trade = (object.trade !== undefined && object.trade !== null) ? Trade.fromPartial(object.trade) : undefined;
    return message;
  },
};

function createBaseComment(): Comment {
  return { camp_denom: "", account: "", content: "", time: "0" };
}

export const Comment = {
  $type: "flux.indexer.campclash.Comment" as const,

  encode(message: Comment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.time !== "0") {
      writer.uint32(32).uint64(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Comment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.time = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      time: isSet(object.time) ? globalThis.String(object.time) : "0",
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.account !== undefined) {
      obj.account = message.account;
    }
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    return obj;
  },

  create(base?: DeepPartial<Comment>): Comment {
    return Comment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment>): Comment {
    const message = createBaseComment();
    message.camp_denom = object.camp_denom ?? "";
    message.account = object.account ?? "";
    message.content = object.content ?? "";
    message.time = object.time ?? "0";
    return message;
  },
};

function createBasePostCommentRequest(): PostCommentRequest {
  return { comment: undefined };
}

export const PostCommentRequest = {
  $type: "flux.indexer.campclash.PostCommentRequest" as const,

  encode(message: PostCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostCommentRequest {
    return { comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined };
  },

  toJSON(message: PostCommentRequest): unknown {
    const obj: any = {};
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    return obj;
  },

  create(base?: DeepPartial<PostCommentRequest>): PostCommentRequest {
    return PostCommentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostCommentRequest>): PostCommentRequest {
    const message = createBasePostCommentRequest();
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

function createBasePostCommentResponse(): PostCommentResponse {
  return {};
}

export const PostCommentResponse = {
  $type: "flux.indexer.campclash.PostCommentResponse" as const,

  encode(_: PostCommentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostCommentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PostCommentResponse {
    return {};
  },

  toJSON(_: PostCommentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PostCommentResponse>): PostCommentResponse {
    return PostCommentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PostCommentResponse>): PostCommentResponse {
    const message = createBasePostCommentResponse();
    return message;
  },
};

function createBaseListCommentsRequest(): ListCommentsRequest {
  return { pagination: undefined, camp_denom: "" };
}

export const ListCommentsRequest = {
  $type: "flux.indexer.campclash.ListCommentsRequest" as const,

  encode(message: ListCommentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCommentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
    };
  },

  toJSON(message: ListCommentsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    return ListCommentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    const message = createBaseListCommentsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_denom = object.camp_denom ?? "";
    return message;
  },
};

function createBaseListCommentsResponse(): ListCommentsResponse {
  return { pagination: undefined, comments: [] };
}

export const ListCommentsResponse = {
  $type: "flux.indexer.campclash.ListCommentsResponse" as const,

  encode(message: ListCommentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCommentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      comments: globalThis.Array.isArray(object?.comments) ? object.comments.map((e: any) => Comment.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListCommentsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => Comment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    return ListCommentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    const message = createBaseListCommentsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.comments = object.comments?.map((e) => Comment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamCommentsRequest(): StreamCommentsRequest {
  return { camp_denom: "" };
}

export const StreamCommentsRequest = {
  $type: "flux.indexer.campclash.StreamCommentsRequest" as const,

  encode(message: StreamCommentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camp_denom !== "") {
      writer.uint32(10).string(message.camp_denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamCommentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCommentsRequest {
    return { camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "" };
  },

  toJSON(message: StreamCommentsRequest): unknown {
    const obj: any = {};
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamCommentsRequest>): StreamCommentsRequest {
    return StreamCommentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamCommentsRequest>): StreamCommentsRequest {
    const message = createBaseStreamCommentsRequest();
    message.camp_denom = object.camp_denom ?? "";
    return message;
  },
};

function createBaseStreamCommentsResponse(): StreamCommentsResponse {
  return { deleted: "0", height: "0", comment: undefined };
}

export const StreamCommentsResponse = {
  $type: "flux.indexer.campclash.StreamCommentsResponse" as const,

  encode(message: StreamCommentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamCommentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCommentsResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined,
    };
  },

  toJSON(message: StreamCommentsResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamCommentsResponse>): StreamCommentsResponse {
    return StreamCommentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamCommentsResponse>): StreamCommentsResponse {
    const message = createBaseStreamCommentsResponse();
    message.deleted = object.deleted ?? "0";
    message.height = object.height ?? "0";
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

function createBaseGetLeaderboardRequest(): GetLeaderboardRequest {
  return { pagination: undefined, camp_type: "", sort_by: "" };
}

export const GetLeaderboardRequest = {
  $type: "flux.indexer.campclash.GetLeaderboardRequest" as const,

  encode(message: GetLeaderboardRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.camp_type !== "") {
      writer.uint32(18).string(message.camp_type);
    }
    if (message.sort_by !== "") {
      writer.uint32(26).string(message.sort_by);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLeaderboardRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLeaderboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sort_by = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLeaderboardRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      camp_type: isSet(object.camp_type) ? globalThis.String(object.camp_type) : "",
      sort_by: isSet(object.sort_by) ? globalThis.String(object.sort_by) : "",
    };
  },

  toJSON(message: GetLeaderboardRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.camp_type !== undefined) {
      obj.camp_type = message.camp_type;
    }
    if (message.sort_by !== undefined) {
      obj.sort_by = message.sort_by;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLeaderboardRequest>): GetLeaderboardRequest {
    return GetLeaderboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLeaderboardRequest>): GetLeaderboardRequest {
    const message = createBaseGetLeaderboardRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.camp_type = object.camp_type ?? "";
    message.sort_by = object.sort_by ?? "";
    return message;
  },
};

function createBaseGetLeaderboardResponse(): GetLeaderboardResponse {
  return { pagination: undefined, projects: [] };
}

export const GetLeaderboardResponse = {
  $type: "flux.indexer.campclash.GetLeaderboardResponse" as const,

  encode(message: GetLeaderboardResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLeaderboardResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLeaderboardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLeaderboardResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetLeaderboardResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetLeaderboardResponse>): GetLeaderboardResponse {
    return GetLeaderboardResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLeaderboardResponse>): GetLeaderboardResponse {
    const message = createBaseGetLeaderboardResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListChallengeRequest(): ListChallengeRequest {
  return { pagination: undefined, challenge_id: "0", status: "", challenger_denom: "", challenged_denom: "" };
}

export const ListChallengeRequest = {
  $type: "flux.indexer.campclash.ListChallengeRequest" as const,

  encode(message: ListChallengeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.challenge_id !== "0") {
      writer.uint32(16).uint64(message.challenge_id);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.challenger_denom !== "") {
      writer.uint32(34).string(message.challenger_denom);
    }
    if (message.challenged_denom !== "") {
      writer.uint32(42).string(message.challenged_denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChallengeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.challenger_denom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.challenged_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChallengeRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      challenger_denom: isSet(object.challenger_denom) ? globalThis.String(object.challenger_denom) : "",
      challenged_denom: isSet(object.challenged_denom) ? globalThis.String(object.challenged_denom) : "",
    };
  },

  toJSON(message: ListChallengeRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.challenger_denom !== undefined) {
      obj.challenger_denom = message.challenger_denom;
    }
    if (message.challenged_denom !== undefined) {
      obj.challenged_denom = message.challenged_denom;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChallengeRequest>): ListChallengeRequest {
    return ListChallengeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChallengeRequest>): ListChallengeRequest {
    const message = createBaseListChallengeRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.challenge_id = object.challenge_id ?? "0";
    message.status = object.status ?? "";
    message.challenger_denom = object.challenger_denom ?? "";
    message.challenged_denom = object.challenged_denom ?? "";
    return message;
  },
};

function createBaseListChallengeResponse(): ListChallengeResponse {
  return { pagination: undefined, challenges: [] };
}

export const ListChallengeResponse = {
  $type: "flux.indexer.campclash.ListChallengeResponse" as const,

  encode(message: ListChallengeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.challenges) {
      Challenge.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChallengeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenges.push(Challenge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChallengeResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      challenges: globalThis.Array.isArray(object?.challenges)
        ? object.challenges.map((e: any) => Challenge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListChallengeResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.challenges?.length) {
      obj.challenges = message.challenges.map((e) => Challenge.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListChallengeResponse>): ListChallengeResponse {
    return ListChallengeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChallengeResponse>): ListChallengeResponse {
    const message = createBaseListChallengeResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.challenges = object.challenges?.map((e) => Challenge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamChallengeRequest(): StreamChallengeRequest {
  return { challenge_id: "0" };
}

export const StreamChallengeRequest = {
  $type: "flux.indexer.campclash.StreamChallengeRequest" as const,

  encode(message: StreamChallengeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challenge_id !== "0") {
      writer.uint32(8).uint64(message.challenge_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeRequest {
    return { challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0" };
  },

  toJSON(message: StreamChallengeRequest): unknown {
    const obj: any = {};
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeRequest>): StreamChallengeRequest {
    return StreamChallengeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeRequest>): StreamChallengeRequest {
    const message = createBaseStreamChallengeRequest();
    message.challenge_id = object.challenge_id ?? "0";
    return message;
  },
};

function createBaseStreamChallengeResponse(): StreamChallengeResponse {
  return { deleted: "0", challenge: undefined, stream_operation: "" };
}

export const StreamChallengeResponse = {
  $type: "flux.indexer.campclash.StreamChallengeResponse" as const,

  encode(message: StreamChallengeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== "0") {
      writer.uint32(8).uint64(message.deleted);
    }
    if (message.challenge !== undefined) {
      Challenge.encode(message.challenge, writer.uint32(18).fork()).ldelim();
    }
    if (message.stream_operation !== "") {
      writer.uint32(26).string(message.stream_operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenge = Challenge.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stream_operation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.String(object.deleted) : "0",
      challenge: isSet(object.challenge) ? Challenge.fromJSON(object.challenge) : undefined,
      stream_operation: isSet(object.stream_operation) ? globalThis.String(object.stream_operation) : "",
    };
  },

  toJSON(message: StreamChallengeResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.challenge !== undefined) {
      obj.challenge = Challenge.toJSON(message.challenge);
    }
    if (message.stream_operation !== undefined) {
      obj.stream_operation = message.stream_operation;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeResponse>): StreamChallengeResponse {
    return StreamChallengeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeResponse>): StreamChallengeResponse {
    const message = createBaseStreamChallengeResponse();
    message.deleted = object.deleted ?? "0";
    message.challenge = (object.challenge !== undefined && object.challenge !== null)
      ? Challenge.fromPartial(object.challenge)
      : undefined;
    message.stream_operation = object.stream_operation ?? "";
    return message;
  },
};

function createBaseListChallengeClaimableRequest(): ListChallengeClaimableRequest {
  return { pagination: undefined, challenge_id: "0", camp_denom: "", address: "" };
}

export const ListChallengeClaimableRequest = {
  $type: "flux.indexer.campclash.ListChallengeClaimableRequest" as const,

  encode(message: ListChallengeClaimableRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.challenge_id !== "0") {
      writer.uint32(16).uint64(message.challenge_id);
    }
    if (message.camp_denom !== "") {
      writer.uint32(26).string(message.camp_denom);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChallengeClaimableRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChallengeClaimableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChallengeClaimableRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: ListChallengeClaimableRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChallengeClaimableRequest>): ListChallengeClaimableRequest {
    return ListChallengeClaimableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChallengeClaimableRequest>): ListChallengeClaimableRequest {
    const message = createBaseListChallengeClaimableRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.challenge_id = object.challenge_id ?? "0";
    message.camp_denom = object.camp_denom ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseListChallengeClaimableResponse(): ListChallengeClaimableResponse {
  return { pagination: undefined, challenge_id: "0", entries: [] };
}

export const ListChallengeClaimableResponse = {
  $type: "flux.indexer.campclash.ListChallengeClaimableResponse" as const,

  encode(message: ListChallengeClaimableResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.challenge_id !== "0") {
      writer.uint32(16).uint64(message.challenge_id);
    }
    for (const v of message.entries) {
      Claimable.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChallengeClaimableResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChallengeClaimableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entries.push(Claimable.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChallengeClaimableResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
      entries: globalThis.Array.isArray(object?.entries) ? object.entries.map((e: any) => Claimable.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListChallengeClaimableResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => Claimable.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListChallengeClaimableResponse>): ListChallengeClaimableResponse {
    return ListChallengeClaimableResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChallengeClaimableResponse>): ListChallengeClaimableResponse {
    const message = createBaseListChallengeClaimableResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.challenge_id = object.challenge_id ?? "0";
    message.entries = object.entries?.map((e) => Claimable.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamChallengeClaimableRequest(): StreamChallengeClaimableRequest {
  return { challenge_id: "0", camp_denom: "", addresss: "" };
}

export const StreamChallengeClaimableRequest = {
  $type: "flux.indexer.campclash.StreamChallengeClaimableRequest" as const,

  encode(message: StreamChallengeClaimableRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challenge_id !== "0") {
      writer.uint32(8).uint64(message.challenge_id);
    }
    if (message.camp_denom !== "") {
      writer.uint32(18).string(message.camp_denom);
    }
    if (message.addresss !== "") {
      writer.uint32(26).string(message.addresss);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeClaimableRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeClaimableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.camp_denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.addresss = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeClaimableRequest {
    return {
      challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0",
      camp_denom: isSet(object.camp_denom) ? globalThis.String(object.camp_denom) : "",
      addresss: isSet(object.addresss) ? globalThis.String(object.addresss) : "",
    };
  },

  toJSON(message: StreamChallengeClaimableRequest): unknown {
    const obj: any = {};
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    if (message.camp_denom !== undefined) {
      obj.camp_denom = message.camp_denom;
    }
    if (message.addresss !== undefined) {
      obj.addresss = message.addresss;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeClaimableRequest>): StreamChallengeClaimableRequest {
    return StreamChallengeClaimableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeClaimableRequest>): StreamChallengeClaimableRequest {
    const message = createBaseStreamChallengeClaimableRequest();
    message.challenge_id = object.challenge_id ?? "0";
    message.camp_denom = object.camp_denom ?? "";
    message.addresss = object.addresss ?? "";
    return message;
  },
};

function createBaseStreamChallengeClaimableResponse(): StreamChallengeClaimableResponse {
  return { deleted: false, entry: undefined };
}

export const StreamChallengeClaimableResponse = {
  $type: "flux.indexer.campclash.StreamChallengeClaimableResponse" as const,

  encode(message: StreamChallengeClaimableResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== false) {
      writer.uint32(8).bool(message.deleted);
    }
    if (message.entry !== undefined) {
      Claimable.encode(message.entry, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeClaimableResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeClaimableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entry = Claimable.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeClaimableResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      entry: isSet(object.entry) ? Claimable.fromJSON(object.entry) : undefined,
    };
  },

  toJSON(message: StreamChallengeClaimableResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.entry !== undefined) {
      obj.entry = Claimable.toJSON(message.entry);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeClaimableResponse>): StreamChallengeClaimableResponse {
    return StreamChallengeClaimableResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeClaimableResponse>): StreamChallengeClaimableResponse {
    const message = createBaseStreamChallengeClaimableResponse();
    message.deleted = object.deleted ?? false;
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? Claimable.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseStreamChallengeVoteRequest(): StreamChallengeVoteRequest {
  return { challenge_id: "0" };
}

export const StreamChallengeVoteRequest = {
  $type: "flux.indexer.campclash.StreamChallengeVoteRequest" as const,

  encode(message: StreamChallengeVoteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challenge_id !== "0") {
      writer.uint32(8).uint64(message.challenge_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeVoteRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeVoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challenge_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeVoteRequest {
    return { challenge_id: isSet(object.challenge_id) ? globalThis.String(object.challenge_id) : "0" };
  },

  toJSON(message: StreamChallengeVoteRequest): unknown {
    const obj: any = {};
    if (message.challenge_id !== undefined) {
      obj.challenge_id = message.challenge_id;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeVoteRequest>): StreamChallengeVoteRequest {
    return StreamChallengeVoteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeVoteRequest>): StreamChallengeVoteRequest {
    const message = createBaseStreamChallengeVoteRequest();
    message.challenge_id = object.challenge_id ?? "0";
    return message;
  },
};

function createBaseStreamChallengeVoteResponse(): StreamChallengeVoteResponse {
  return { deleted: false, vote: undefined };
}

export const StreamChallengeVoteResponse = {
  $type: "flux.indexer.campclash.StreamChallengeVoteResponse" as const,

  encode(message: StreamChallengeVoteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deleted !== false) {
      writer.uint32(8).bool(message.deleted);
    }
    if (message.vote !== undefined) {
      ChallengeVote.encode(message.vote, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamChallengeVoteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChallengeVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vote = ChallengeVote.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChallengeVoteResponse {
    return {
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      vote: isSet(object.vote) ? ChallengeVote.fromJSON(object.vote) : undefined,
    };
  },

  toJSON(message: StreamChallengeVoteResponse): unknown {
    const obj: any = {};
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.vote !== undefined) {
      obj.vote = ChallengeVote.toJSON(message.vote);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamChallengeVoteResponse>): StreamChallengeVoteResponse {
    return StreamChallengeVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamChallengeVoteResponse>): StreamChallengeVoteResponse {
    const message = createBaseStreamChallengeVoteResponse();
    message.deleted = object.deleted ?? false;
    message.vote = (object.vote !== undefined && object.vote !== null)
      ? ChallengeVote.fromPartial(object.vote)
      : undefined;
    return message;
  },
};

function createBaseGetUserChallengesRequest(): GetUserChallengesRequest {
  return { pagination: undefined, address: "", unclaimed_challenge: false };
}

export const GetUserChallengesRequest = {
  $type: "flux.indexer.campclash.GetUserChallengesRequest" as const,

  encode(message: GetUserChallengesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.unclaimed_challenge !== false) {
      writer.uint32(24).bool(message.unclaimed_challenge);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserChallengesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserChallengesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.unclaimed_challenge = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserChallengesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      unclaimed_challenge: isSet(object.unclaimed_challenge) ? globalThis.Boolean(object.unclaimed_challenge) : false,
    };
  },

  toJSON(message: GetUserChallengesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.unclaimed_challenge !== undefined) {
      obj.unclaimed_challenge = message.unclaimed_challenge;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserChallengesRequest>): GetUserChallengesRequest {
    return GetUserChallengesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserChallengesRequest>): GetUserChallengesRequest {
    const message = createBaseGetUserChallengesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.address = object.address ?? "";
    message.unclaimed_challenge = object.unclaimed_challenge ?? false;
    return message;
  },
};

function createBaseGetUserChallengesResponse(): GetUserChallengesResponse {
  return { pagination: undefined, challenges: [] };
}

export const GetUserChallengesResponse = {
  $type: "flux.indexer.campclash.GetUserChallengesResponse" as const,

  encode(message: GetUserChallengesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.challenges) {
      Challenge.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserChallengesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserChallengesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenges.push(Challenge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserChallengesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      challenges: globalThis.Array.isArray(object?.challenges)
        ? object.challenges.map((e: any) => Challenge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserChallengesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.challenges?.length) {
      obj.challenges = message.challenges.map((e) => Challenge.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserChallengesResponse>): GetUserChallengesResponse {
    return GetUserChallengesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserChallengesResponse>): GetUserChallengesResponse {
    const message = createBaseGetUserChallengesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.challenges = object.challenges?.map((e) => Challenge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetLogoPresignedURLRequest(): GetLogoPresignedURLRequest {
  return { logo_size: "0" };
}

export const GetLogoPresignedURLRequest = {
  $type: "flux.indexer.campclash.GetLogoPresignedURLRequest" as const,

  encode(message: GetLogoPresignedURLRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.logo_size !== "0") {
      writer.uint32(8).int64(message.logo_size);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLogoPresignedURLRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogoPresignedURLRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.logo_size = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLogoPresignedURLRequest {
    return { logo_size: isSet(object.logo_size) ? globalThis.String(object.logo_size) : "0" };
  },

  toJSON(message: GetLogoPresignedURLRequest): unknown {
    const obj: any = {};
    if (message.logo_size !== undefined) {
      obj.logo_size = message.logo_size;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLogoPresignedURLRequest>): GetLogoPresignedURLRequest {
    return GetLogoPresignedURLRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLogoPresignedURLRequest>): GetLogoPresignedURLRequest {
    const message = createBaseGetLogoPresignedURLRequest();
    message.logo_size = object.logo_size ?? "0";
    return message;
  },
};

function createBaseGetLogoPresignedURLResponse(): GetLogoPresignedURLResponse {
  return { url: "" };
}

export const GetLogoPresignedURLResponse = {
  $type: "flux.indexer.campclash.GetLogoPresignedURLResponse" as const,

  encode(message: GetLogoPresignedURLResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLogoPresignedURLResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogoPresignedURLResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLogoPresignedURLResponse {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: GetLogoPresignedURLResponse): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLogoPresignedURLResponse>): GetLogoPresignedURLResponse {
    return GetLogoPresignedURLResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLogoPresignedURLResponse>): GetLogoPresignedURLResponse {
    const message = createBaseGetLogoPresignedURLResponse();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseGetCampLatestHeightRequest(): GetCampLatestHeightRequest {
  return {};
}

export const GetCampLatestHeightRequest = {
  $type: "flux.indexer.campclash.GetCampLatestHeightRequest" as const,

  encode(_: GetCampLatestHeightRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCampLatestHeightRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampLatestHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetCampLatestHeightRequest {
    return {};
  },

  toJSON(_: GetCampLatestHeightRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetCampLatestHeightRequest>): GetCampLatestHeightRequest {
    return GetCampLatestHeightRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetCampLatestHeightRequest>): GetCampLatestHeightRequest {
    const message = createBaseGetCampLatestHeightRequest();
    return message;
  },
};

function createBaseGetCampLatestHeightResponse(): GetCampLatestHeightResponse {
  return { height: "0" };
}

export const GetCampLatestHeightResponse = {
  $type: "flux.indexer.campclash.GetCampLatestHeightResponse" as const,

  encode(message: GetCampLatestHeightResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).int64(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCampLatestHeightResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampLatestHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampLatestHeightResponse {
    return { height: isSet(object.height) ? globalThis.String(object.height) : "0" };
  },

  toJSON(message: GetCampLatestHeightResponse): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCampLatestHeightResponse>): GetCampLatestHeightResponse {
    return GetCampLatestHeightResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCampLatestHeightResponse>): GetCampLatestHeightResponse {
    const message = createBaseGetCampLatestHeightResponse();
    message.height = object.height ?? "0";
    return message;
  },
};

function createBasePushUserActivityRequest(): PushUserActivityRequest {
  return { address: "", url: "", action: 0 };
}

export const PushUserActivityRequest = {
  $type: "flux.indexer.campclash.PushUserActivityRequest" as const,

  encode(message: PushUserActivityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.action !== 0) {
      writer.uint32(24).int32(message.action);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PushUserActivityRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushUserActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PushUserActivityRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      action: isSet(object.action) ? actionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: PushUserActivityRequest): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.action !== undefined) {
      obj.action = actionToJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<PushUserActivityRequest>): PushUserActivityRequest {
    return PushUserActivityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PushUserActivityRequest>): PushUserActivityRequest {
    const message = createBasePushUserActivityRequest();
    message.address = object.address ?? "";
    message.url = object.url ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

function createBasePushUserActivityResponse(): PushUserActivityResponse {
  return {};
}

export const PushUserActivityResponse = {
  $type: "flux.indexer.campclash.PushUserActivityResponse" as const,

  encode(_: PushUserActivityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PushUserActivityResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushUserActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PushUserActivityResponse {
    return {};
  },

  toJSON(_: PushUserActivityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PushUserActivityResponse>): PushUserActivityResponse {
    return PushUserActivityResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PushUserActivityResponse>): PushUserActivityResponse {
    const message = createBasePushUserActivityResponse();
    return message;
  },
};

function createBaseSubscribeUserActivityRequest(): SubscribeUserActivityRequest {
  return {};
}

export const SubscribeUserActivityRequest = {
  $type: "flux.indexer.campclash.SubscribeUserActivityRequest" as const,

  encode(_: SubscribeUserActivityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeUserActivityRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeUserActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubscribeUserActivityRequest {
    return {};
  },

  toJSON(_: SubscribeUserActivityRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SubscribeUserActivityRequest>): SubscribeUserActivityRequest {
    return SubscribeUserActivityRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SubscribeUserActivityRequest>): SubscribeUserActivityRequest {
    const message = createBaseSubscribeUserActivityRequest();
    return message;
  },
};

function createBaseSubscribeUserActivityResponse(): SubscribeUserActivityResponse {
  return { ip: "", address: "", url: "", action: 0 };
}

export const SubscribeUserActivityResponse = {
  $type: "flux.indexer.campclash.SubscribeUserActivityResponse" as const,

  encode(message: SubscribeUserActivityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ip !== "") {
      writer.uint32(10).string(message.ip);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.action !== 0) {
      writer.uint32(32).int32(message.action);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeUserActivityResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeUserActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ip = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeUserActivityResponse {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      action: isSet(object.action) ? actionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: SubscribeUserActivityResponse): unknown {
    const obj: any = {};
    if (message.ip !== undefined) {
      obj.ip = message.ip;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.action !== undefined) {
      obj.action = actionToJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeUserActivityResponse>): SubscribeUserActivityResponse {
    return SubscribeUserActivityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeUserActivityResponse>): SubscribeUserActivityResponse {
    const message = createBaseSubscribeUserActivityResponse();
    message.ip = object.ip ?? "";
    message.address = object.address ?? "";
    message.url = object.url ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface CampclashQuery {
  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse>;
  StreamProject(
    request: DeepPartial<StreamProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamProjectResponse>;
  ListBalances(request: DeepPartial<ListBalancesRequest>, metadata?: grpc.Metadata): Promise<ListBalancesResponse>;
  StreamBalances(
    request: DeepPartial<StreamBalancesRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamBalancesResponse>;
  ListTrades(request: DeepPartial<ListTradesRequest>, metadata?: grpc.Metadata): Promise<ListTradesResponse>;
  StreamTrades(request: DeepPartial<StreamTradesRequest>, metadata?: grpc.Metadata): Observable<StreamTradesResponse>;
  PostComment(request: DeepPartial<PostCommentRequest>, metadata?: grpc.Metadata): Promise<PostCommentResponse>;
  ListComments(request: DeepPartial<ListCommentsRequest>, metadata?: grpc.Metadata): Promise<ListCommentsResponse>;
  StreamComments(
    request: DeepPartial<StreamCommentsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamCommentsResponse>;
  GetLeaderboard(
    request: DeepPartial<GetLeaderboardRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLeaderboardResponse>;
  ListChallenge(request: DeepPartial<ListChallengeRequest>, metadata?: grpc.Metadata): Promise<ListChallengeResponse>;
  StreamChallenge(
    request: DeepPartial<StreamChallengeRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeResponse>;
  ListChallengeClaimable(
    request: DeepPartial<ListChallengeClaimableRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListChallengeClaimableResponse>;
  StreamChallengeClaimable(
    request: DeepPartial<StreamChallengeClaimableRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeClaimableResponse>;
  StreamChallengeVote(
    request: DeepPartial<StreamChallengeVoteRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeVoteResponse>;
  GetUserChallenges(
    request: DeepPartial<GetUserChallengesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserChallengesResponse>;
  GetLogoPresignedURL(
    request: DeepPartial<GetLogoPresignedURLRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLogoPresignedURLResponse>;
  GetCampLatestHeight(
    request: DeepPartial<GetCampLatestHeightRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCampLatestHeightResponse>;
  /** stream API as we need to know when user close the browser tab as well */
  PushUserActivity(
    request: Observable<DeepPartial<PushUserActivityRequest>>,
    metadata?: grpc.Metadata,
  ): Observable<PushUserActivityResponse>;
  SubscribeUserActivity(
    request: Observable<DeepPartial<SubscribeUserActivityRequest>>,
    metadata?: grpc.Metadata,
  ): Observable<SubscribeUserActivityResponse>;
}

export class CampclashQueryClientImpl implements CampclashQuery {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ListProjects = this.ListProjects.bind(this);
    this.StreamProject = this.StreamProject.bind(this);
    this.ListBalances = this.ListBalances.bind(this);
    this.StreamBalances = this.StreamBalances.bind(this);
    this.ListTrades = this.ListTrades.bind(this);
    this.StreamTrades = this.StreamTrades.bind(this);
    this.PostComment = this.PostComment.bind(this);
    this.ListComments = this.ListComments.bind(this);
    this.StreamComments = this.StreamComments.bind(this);
    this.GetLeaderboard = this.GetLeaderboard.bind(this);
    this.ListChallenge = this.ListChallenge.bind(this);
    this.StreamChallenge = this.StreamChallenge.bind(this);
    this.ListChallengeClaimable = this.ListChallengeClaimable.bind(this);
    this.StreamChallengeClaimable = this.StreamChallengeClaimable.bind(this);
    this.StreamChallengeVote = this.StreamChallengeVote.bind(this);
    this.GetUserChallenges = this.GetUserChallenges.bind(this);
    this.GetLogoPresignedURL = this.GetLogoPresignedURL.bind(this);
    this.GetCampLatestHeight = this.GetCampLatestHeight.bind(this);
    this.PushUserActivity = this.PushUserActivity.bind(this);
    this.SubscribeUserActivity = this.SubscribeUserActivity.bind(this);
  }

  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse> {
    return this.rpc.unary(CampclashQueryListProjectsDesc, ListProjectsRequest.fromPartial(request), metadata);
  }

  StreamProject(
    request: DeepPartial<StreamProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamProjectResponse> {
    return this.rpc.invoke(CampclashQueryStreamProjectDesc, StreamProjectRequest.fromPartial(request), metadata);
  }

  ListBalances(request: DeepPartial<ListBalancesRequest>, metadata?: grpc.Metadata): Promise<ListBalancesResponse> {
    return this.rpc.unary(CampclashQueryListBalancesDesc, ListBalancesRequest.fromPartial(request), metadata);
  }

  StreamBalances(
    request: DeepPartial<StreamBalancesRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamBalancesResponse> {
    return this.rpc.invoke(CampclashQueryStreamBalancesDesc, StreamBalancesRequest.fromPartial(request), metadata);
  }

  ListTrades(request: DeepPartial<ListTradesRequest>, metadata?: grpc.Metadata): Promise<ListTradesResponse> {
    return this.rpc.unary(CampclashQueryListTradesDesc, ListTradesRequest.fromPartial(request), metadata);
  }

  StreamTrades(request: DeepPartial<StreamTradesRequest>, metadata?: grpc.Metadata): Observable<StreamTradesResponse> {
    return this.rpc.invoke(CampclashQueryStreamTradesDesc, StreamTradesRequest.fromPartial(request), metadata);
  }

  PostComment(request: DeepPartial<PostCommentRequest>, metadata?: grpc.Metadata): Promise<PostCommentResponse> {
    return this.rpc.unary(CampclashQueryPostCommentDesc, PostCommentRequest.fromPartial(request), metadata);
  }

  ListComments(request: DeepPartial<ListCommentsRequest>, metadata?: grpc.Metadata): Promise<ListCommentsResponse> {
    return this.rpc.unary(CampclashQueryListCommentsDesc, ListCommentsRequest.fromPartial(request), metadata);
  }

  StreamComments(
    request: DeepPartial<StreamCommentsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamCommentsResponse> {
    return this.rpc.invoke(CampclashQueryStreamCommentsDesc, StreamCommentsRequest.fromPartial(request), metadata);
  }

  GetLeaderboard(
    request: DeepPartial<GetLeaderboardRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLeaderboardResponse> {
    return this.rpc.unary(CampclashQueryGetLeaderboardDesc, GetLeaderboardRequest.fromPartial(request), metadata);
  }

  ListChallenge(request: DeepPartial<ListChallengeRequest>, metadata?: grpc.Metadata): Promise<ListChallengeResponse> {
    return this.rpc.unary(CampclashQueryListChallengeDesc, ListChallengeRequest.fromPartial(request), metadata);
  }

  StreamChallenge(
    request: DeepPartial<StreamChallengeRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeResponse> {
    return this.rpc.invoke(CampclashQueryStreamChallengeDesc, StreamChallengeRequest.fromPartial(request), metadata);
  }

  ListChallengeClaimable(
    request: DeepPartial<ListChallengeClaimableRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListChallengeClaimableResponse> {
    return this.rpc.unary(
      CampclashQueryListChallengeClaimableDesc,
      ListChallengeClaimableRequest.fromPartial(request),
      metadata,
    );
  }

  StreamChallengeClaimable(
    request: DeepPartial<StreamChallengeClaimableRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeClaimableResponse> {
    return this.rpc.invoke(
      CampclashQueryStreamChallengeClaimableDesc,
      StreamChallengeClaimableRequest.fromPartial(request),
      metadata,
    );
  }

  StreamChallengeVote(
    request: DeepPartial<StreamChallengeVoteRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamChallengeVoteResponse> {
    return this.rpc.invoke(
      CampclashQueryStreamChallengeVoteDesc,
      StreamChallengeVoteRequest.fromPartial(request),
      metadata,
    );
  }

  GetUserChallenges(
    request: DeepPartial<GetUserChallengesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserChallengesResponse> {
    return this.rpc.unary(CampclashQueryGetUserChallengesDesc, GetUserChallengesRequest.fromPartial(request), metadata);
  }

  GetLogoPresignedURL(
    request: DeepPartial<GetLogoPresignedURLRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLogoPresignedURLResponse> {
    return this.rpc.unary(
      CampclashQueryGetLogoPresignedURLDesc,
      GetLogoPresignedURLRequest.fromPartial(request),
      metadata,
    );
  }

  GetCampLatestHeight(
    request: DeepPartial<GetCampLatestHeightRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCampLatestHeightResponse> {
    return this.rpc.unary(
      CampclashQueryGetCampLatestHeightDesc,
      GetCampLatestHeightRequest.fromPartial(request),
      metadata,
    );
  }

  PushUserActivity(
    request: Observable<DeepPartial<PushUserActivityRequest>>,
    metadata?: grpc.Metadata,
  ): Observable<PushUserActivityResponse> {
    throw new Error("ts-proto does not yet support client streaming!");
  }

  SubscribeUserActivity(
    request: Observable<DeepPartial<SubscribeUserActivityRequest>>,
    metadata?: grpc.Metadata,
  ): Observable<SubscribeUserActivityResponse> {
    throw new Error("ts-proto does not yet support client streaming!");
  }
}

export const CampclashQueryDesc = { serviceName: "flux.indexer.campclash.CampclashQuery" };

export const CampclashQueryListProjectsDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjects",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamProjectDesc: UnaryMethodDefinitionish = {
  methodName: "StreamProject",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListBalancesDesc: UnaryMethodDefinitionish = {
  methodName: "ListBalances",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListBalancesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListBalancesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamBalancesDesc: UnaryMethodDefinitionish = {
  methodName: "StreamBalances",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamBalancesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamBalancesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListTradesDesc: UnaryMethodDefinitionish = {
  methodName: "ListTrades",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListTradesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListTradesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamTradesDesc: UnaryMethodDefinitionish = {
  methodName: "StreamTrades",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamTradesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamTradesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryPostCommentDesc: UnaryMethodDefinitionish = {
  methodName: "PostComment",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return PostCommentRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = PostCommentResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListCommentsDesc: UnaryMethodDefinitionish = {
  methodName: "ListComments",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListCommentsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListCommentsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamCommentsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamComments",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamCommentsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamCommentsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryGetLeaderboardDesc: UnaryMethodDefinitionish = {
  methodName: "GetLeaderboard",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLeaderboardRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLeaderboardResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListChallengeDesc: UnaryMethodDefinitionish = {
  methodName: "ListChallenge",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListChallengeRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListChallengeResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamChallengeDesc: UnaryMethodDefinitionish = {
  methodName: "StreamChallenge",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamChallengeRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamChallengeResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryListChallengeClaimableDesc: UnaryMethodDefinitionish = {
  methodName: "ListChallengeClaimable",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListChallengeClaimableRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListChallengeClaimableResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamChallengeClaimableDesc: UnaryMethodDefinitionish = {
  methodName: "StreamChallengeClaimable",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamChallengeClaimableRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamChallengeClaimableResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryStreamChallengeVoteDesc: UnaryMethodDefinitionish = {
  methodName: "StreamChallengeVote",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamChallengeVoteRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamChallengeVoteResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryGetUserChallengesDesc: UnaryMethodDefinitionish = {
  methodName: "GetUserChallenges",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetUserChallengesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetUserChallengesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryGetLogoPresignedURLDesc: UnaryMethodDefinitionish = {
  methodName: "GetLogoPresignedURL",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLogoPresignedURLRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLogoPresignedURLResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CampclashQueryGetCampLatestHeightDesc: UnaryMethodDefinitionish = {
  methodName: "GetCampLatestHeight",
  service: CampclashQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCampLatestHeightRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCampLatestHeightResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
