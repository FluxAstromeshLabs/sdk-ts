// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/launchpad_query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { LaunchpadBuy, LaunchpadProjectInfo, LaunchpadUser, LaunchpadWhitelist } from "./launchpad";

export interface ListLaunchpadProjectsRequest {
  pagination: PageRequest | undefined;
  ticker: string;
}

export interface ListLaunchpadProjectsResponse {
  pagination: PageResponse | undefined;
  projects: LaunchpadProjectInfo[];
}

export interface StreamLaunchpadProjectRequest {
  ticker: string;
}

export interface StreamLaunchpadProjectResponse {
  project: LaunchpadProjectInfo | undefined;
}

export interface ListLaunchpadWhitelistsRequest {
  pagination: PageRequest | undefined;
  ticker: string;
}

export interface ListLaunchpadWhitelistsResponse {
  pagination: PageResponse | undefined;
  whitelists: LaunchpadWhitelist[];
}

export interface StreamLaunchpadWhitelistRequest {
  ticker: string;
}

export interface StreamLaunchpadWhitelistResponse {
  whitelist: LaunchpadWhitelist | undefined;
}

export interface ListLaunchpadUsersRequest {
  pagination: PageRequest | undefined;
  ticker: string;
  address: string;
}

export interface ListLaunchpadUsersResponse {
  pagination: PageResponse | undefined;
  users: LaunchpadUser[];
}

export interface StreamLaunchpadUsersRequest {
  ticker: string;
  /** optional */
  address: string;
}

export interface StreamLaunchpadUsersResponse {
  user: LaunchpadUser | undefined;
}

export interface ListLaunchpadBuysRequest {
  pagination: PageRequest | undefined;
  ticker: string;
}

export interface ListLaunchpadBuysResponse {
  pagination: PageResponse | undefined;
  buys: LaunchpadBuy[];
}

export interface StreamLaunchpadBuyRequest {
  ticker: string;
}

export interface StreamLaunchpadBuyResponse {
  buy: LaunchpadBuy | undefined;
}

function createBaseListLaunchpadProjectsRequest(): ListLaunchpadProjectsRequest {
  return { pagination: undefined, ticker: "" };
}

export const ListLaunchpadProjectsRequest = {
  $type: "flux.indexer.campclash.ListLaunchpadProjectsRequest" as const,

  encode(message: ListLaunchpadProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadProjectsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
    };
  },

  toJSON(message: ListLaunchpadProjectsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadProjectsRequest>): ListLaunchpadProjectsRequest {
    return ListLaunchpadProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadProjectsRequest>): ListLaunchpadProjectsRequest {
    const message = createBaseListLaunchpadProjectsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseListLaunchpadProjectsResponse(): ListLaunchpadProjectsResponse {
  return { pagination: undefined, projects: [] };
}

export const ListLaunchpadProjectsResponse = {
  $type: "flux.indexer.campclash.ListLaunchpadProjectsResponse" as const,

  encode(message: ListLaunchpadProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.projects) {
      LaunchpadProjectInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projects.push(LaunchpadProjectInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadProjectsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => LaunchpadProjectInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListLaunchpadProjectsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => LaunchpadProjectInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadProjectsResponse>): ListLaunchpadProjectsResponse {
    return ListLaunchpadProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadProjectsResponse>): ListLaunchpadProjectsResponse {
    const message = createBaseListLaunchpadProjectsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.projects = object.projects?.map((e) => LaunchpadProjectInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamLaunchpadProjectRequest(): StreamLaunchpadProjectRequest {
  return { ticker: "" };
}

export const StreamLaunchpadProjectRequest = {
  $type: "flux.indexer.campclash.StreamLaunchpadProjectRequest" as const,

  encode(message: StreamLaunchpadProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadProjectRequest {
    return { ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "" };
  },

  toJSON(message: StreamLaunchpadProjectRequest): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadProjectRequest>): StreamLaunchpadProjectRequest {
    return StreamLaunchpadProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadProjectRequest>): StreamLaunchpadProjectRequest {
    const message = createBaseStreamLaunchpadProjectRequest();
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseStreamLaunchpadProjectResponse(): StreamLaunchpadProjectResponse {
  return { project: undefined };
}

export const StreamLaunchpadProjectResponse = {
  $type: "flux.indexer.campclash.StreamLaunchpadProjectResponse" as const,

  encode(message: StreamLaunchpadProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== undefined) {
      LaunchpadProjectInfo.encode(message.project, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = LaunchpadProjectInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadProjectResponse {
    return { project: isSet(object.project) ? LaunchpadProjectInfo.fromJSON(object.project) : undefined };
  },

  toJSON(message: StreamLaunchpadProjectResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = LaunchpadProjectInfo.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadProjectResponse>): StreamLaunchpadProjectResponse {
    return StreamLaunchpadProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadProjectResponse>): StreamLaunchpadProjectResponse {
    const message = createBaseStreamLaunchpadProjectResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? LaunchpadProjectInfo.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseListLaunchpadWhitelistsRequest(): ListLaunchpadWhitelistsRequest {
  return { pagination: undefined, ticker: "" };
}

export const ListLaunchpadWhitelistsRequest = {
  $type: "flux.indexer.campclash.ListLaunchpadWhitelistsRequest" as const,

  encode(message: ListLaunchpadWhitelistsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadWhitelistsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadWhitelistsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadWhitelistsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
    };
  },

  toJSON(message: ListLaunchpadWhitelistsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadWhitelistsRequest>): ListLaunchpadWhitelistsRequest {
    return ListLaunchpadWhitelistsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadWhitelistsRequest>): ListLaunchpadWhitelistsRequest {
    const message = createBaseListLaunchpadWhitelistsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseListLaunchpadWhitelistsResponse(): ListLaunchpadWhitelistsResponse {
  return { pagination: undefined, whitelists: [] };
}

export const ListLaunchpadWhitelistsResponse = {
  $type: "flux.indexer.campclash.ListLaunchpadWhitelistsResponse" as const,

  encode(message: ListLaunchpadWhitelistsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.whitelists) {
      LaunchpadWhitelist.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadWhitelistsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadWhitelistsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.whitelists.push(LaunchpadWhitelist.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadWhitelistsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      whitelists: globalThis.Array.isArray(object?.whitelists)
        ? object.whitelists.map((e: any) => LaunchpadWhitelist.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListLaunchpadWhitelistsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.whitelists?.length) {
      obj.whitelists = message.whitelists.map((e) => LaunchpadWhitelist.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadWhitelistsResponse>): ListLaunchpadWhitelistsResponse {
    return ListLaunchpadWhitelistsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadWhitelistsResponse>): ListLaunchpadWhitelistsResponse {
    const message = createBaseListLaunchpadWhitelistsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.whitelists = object.whitelists?.map((e) => LaunchpadWhitelist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamLaunchpadWhitelistRequest(): StreamLaunchpadWhitelistRequest {
  return { ticker: "" };
}

export const StreamLaunchpadWhitelistRequest = {
  $type: "flux.indexer.campclash.StreamLaunchpadWhitelistRequest" as const,

  encode(message: StreamLaunchpadWhitelistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadWhitelistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadWhitelistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadWhitelistRequest {
    return { ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "" };
  },

  toJSON(message: StreamLaunchpadWhitelistRequest): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadWhitelistRequest>): StreamLaunchpadWhitelistRequest {
    return StreamLaunchpadWhitelistRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadWhitelistRequest>): StreamLaunchpadWhitelistRequest {
    const message = createBaseStreamLaunchpadWhitelistRequest();
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseStreamLaunchpadWhitelistResponse(): StreamLaunchpadWhitelistResponse {
  return { whitelist: undefined };
}

export const StreamLaunchpadWhitelistResponse = {
  $type: "flux.indexer.campclash.StreamLaunchpadWhitelistResponse" as const,

  encode(message: StreamLaunchpadWhitelistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.whitelist !== undefined) {
      LaunchpadWhitelist.encode(message.whitelist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadWhitelistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadWhitelistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.whitelist = LaunchpadWhitelist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadWhitelistResponse {
    return { whitelist: isSet(object.whitelist) ? LaunchpadWhitelist.fromJSON(object.whitelist) : undefined };
  },

  toJSON(message: StreamLaunchpadWhitelistResponse): unknown {
    const obj: any = {};
    if (message.whitelist !== undefined) {
      obj.whitelist = LaunchpadWhitelist.toJSON(message.whitelist);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadWhitelistResponse>): StreamLaunchpadWhitelistResponse {
    return StreamLaunchpadWhitelistResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadWhitelistResponse>): StreamLaunchpadWhitelistResponse {
    const message = createBaseStreamLaunchpadWhitelistResponse();
    message.whitelist = (object.whitelist !== undefined && object.whitelist !== null)
      ? LaunchpadWhitelist.fromPartial(object.whitelist)
      : undefined;
    return message;
  },
};

function createBaseListLaunchpadUsersRequest(): ListLaunchpadUsersRequest {
  return { pagination: undefined, ticker: "", address: "" };
}

export const ListLaunchpadUsersRequest = {
  $type: "flux.indexer.campclash.ListLaunchpadUsersRequest" as const,

  encode(message: ListLaunchpadUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadUsersRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: ListLaunchpadUsersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadUsersRequest>): ListLaunchpadUsersRequest {
    return ListLaunchpadUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadUsersRequest>): ListLaunchpadUsersRequest {
    const message = createBaseListLaunchpadUsersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseListLaunchpadUsersResponse(): ListLaunchpadUsersResponse {
  return { pagination: undefined, users: [] };
}

export const ListLaunchpadUsersResponse = {
  $type: "flux.indexer.campclash.ListLaunchpadUsersResponse" as const,

  encode(message: ListLaunchpadUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.users) {
      LaunchpadUser.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.users.push(LaunchpadUser.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadUsersResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => LaunchpadUser.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListLaunchpadUsersResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.users?.length) {
      obj.users = message.users.map((e) => LaunchpadUser.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadUsersResponse>): ListLaunchpadUsersResponse {
    return ListLaunchpadUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadUsersResponse>): ListLaunchpadUsersResponse {
    const message = createBaseListLaunchpadUsersResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.users = object.users?.map((e) => LaunchpadUser.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamLaunchpadUsersRequest(): StreamLaunchpadUsersRequest {
  return { ticker: "", address: "" };
}

export const StreamLaunchpadUsersRequest = {
  $type: "flux.indexer.campclash.StreamLaunchpadUsersRequest" as const,

  encode(message: StreamLaunchpadUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadUsersRequest {
    return {
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: StreamLaunchpadUsersRequest): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadUsersRequest>): StreamLaunchpadUsersRequest {
    return StreamLaunchpadUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadUsersRequest>): StreamLaunchpadUsersRequest {
    const message = createBaseStreamLaunchpadUsersRequest();
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseStreamLaunchpadUsersResponse(): StreamLaunchpadUsersResponse {
  return { user: undefined };
}

export const StreamLaunchpadUsersResponse = {
  $type: "flux.indexer.campclash.StreamLaunchpadUsersResponse" as const,

  encode(message: StreamLaunchpadUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      LaunchpadUser.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = LaunchpadUser.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadUsersResponse {
    return { user: isSet(object.user) ? LaunchpadUser.fromJSON(object.user) : undefined };
  },

  toJSON(message: StreamLaunchpadUsersResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = LaunchpadUser.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadUsersResponse>): StreamLaunchpadUsersResponse {
    return StreamLaunchpadUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadUsersResponse>): StreamLaunchpadUsersResponse {
    const message = createBaseStreamLaunchpadUsersResponse();
    message.user = (object.user !== undefined && object.user !== null)
      ? LaunchpadUser.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseListLaunchpadBuysRequest(): ListLaunchpadBuysRequest {
  return { pagination: undefined, ticker: "" };
}

export const ListLaunchpadBuysRequest = {
  $type: "flux.indexer.campclash.ListLaunchpadBuysRequest" as const,

  encode(message: ListLaunchpadBuysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadBuysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadBuysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadBuysRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
    };
  },

  toJSON(message: ListLaunchpadBuysRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadBuysRequest>): ListLaunchpadBuysRequest {
    return ListLaunchpadBuysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadBuysRequest>): ListLaunchpadBuysRequest {
    const message = createBaseListLaunchpadBuysRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseListLaunchpadBuysResponse(): ListLaunchpadBuysResponse {
  return { pagination: undefined, buys: [] };
}

export const ListLaunchpadBuysResponse = {
  $type: "flux.indexer.campclash.ListLaunchpadBuysResponse" as const,

  encode(message: ListLaunchpadBuysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.buys) {
      LaunchpadBuy.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLaunchpadBuysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLaunchpadBuysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.buys.push(LaunchpadBuy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLaunchpadBuysResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      buys: globalThis.Array.isArray(object?.buys) ? object.buys.map((e: any) => LaunchpadBuy.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListLaunchpadBuysResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.buys?.length) {
      obj.buys = message.buys.map((e) => LaunchpadBuy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLaunchpadBuysResponse>): ListLaunchpadBuysResponse {
    return ListLaunchpadBuysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLaunchpadBuysResponse>): ListLaunchpadBuysResponse {
    const message = createBaseListLaunchpadBuysResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.buys = object.buys?.map((e) => LaunchpadBuy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamLaunchpadBuyRequest(): StreamLaunchpadBuyRequest {
  return { ticker: "" };
}

export const StreamLaunchpadBuyRequest = {
  $type: "flux.indexer.campclash.StreamLaunchpadBuyRequest" as const,

  encode(message: StreamLaunchpadBuyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadBuyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadBuyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadBuyRequest {
    return { ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "" };
  },

  toJSON(message: StreamLaunchpadBuyRequest): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadBuyRequest>): StreamLaunchpadBuyRequest {
    return StreamLaunchpadBuyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadBuyRequest>): StreamLaunchpadBuyRequest {
    const message = createBaseStreamLaunchpadBuyRequest();
    message.ticker = object.ticker ?? "";
    return message;
  },
};

function createBaseStreamLaunchpadBuyResponse(): StreamLaunchpadBuyResponse {
  return { buy: undefined };
}

export const StreamLaunchpadBuyResponse = {
  $type: "flux.indexer.campclash.StreamLaunchpadBuyResponse" as const,

  encode(message: StreamLaunchpadBuyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.buy !== undefined) {
      LaunchpadBuy.encode(message.buy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamLaunchpadBuyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamLaunchpadBuyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.buy = LaunchpadBuy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamLaunchpadBuyResponse {
    return { buy: isSet(object.buy) ? LaunchpadBuy.fromJSON(object.buy) : undefined };
  },

  toJSON(message: StreamLaunchpadBuyResponse): unknown {
    const obj: any = {};
    if (message.buy !== undefined) {
      obj.buy = LaunchpadBuy.toJSON(message.buy);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamLaunchpadBuyResponse>): StreamLaunchpadBuyResponse {
    return StreamLaunchpadBuyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamLaunchpadBuyResponse>): StreamLaunchpadBuyResponse {
    const message = createBaseStreamLaunchpadBuyResponse();
    message.buy = (object.buy !== undefined && object.buy !== null) ? LaunchpadBuy.fromPartial(object.buy) : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface LaunchpadQuery {
  ListProjects(
    request: DeepPartial<ListLaunchpadProjectsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadProjectsResponse>;
  StreamProject(
    request: DeepPartial<StreamLaunchpadProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadProjectResponse>;
  ListWhitelists(
    request: DeepPartial<ListLaunchpadWhitelistsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadWhitelistsResponse>;
  StreamWhitelist(
    request: DeepPartial<StreamLaunchpadWhitelistRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadWhitelistResponse>;
  ListUsers(
    request: DeepPartial<ListLaunchpadUsersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadUsersResponse>;
  StreamUsers(
    request: DeepPartial<StreamLaunchpadUsersRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadUsersResponse>;
  ListBuys(
    request: DeepPartial<ListLaunchpadBuysRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadBuysResponse>;
  StreamBuy(
    request: DeepPartial<StreamLaunchpadBuyRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadBuyResponse>;
}

export class LaunchpadQueryClientImpl implements LaunchpadQuery {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ListProjects = this.ListProjects.bind(this);
    this.StreamProject = this.StreamProject.bind(this);
    this.ListWhitelists = this.ListWhitelists.bind(this);
    this.StreamWhitelist = this.StreamWhitelist.bind(this);
    this.ListUsers = this.ListUsers.bind(this);
    this.StreamUsers = this.StreamUsers.bind(this);
    this.ListBuys = this.ListBuys.bind(this);
    this.StreamBuy = this.StreamBuy.bind(this);
  }

  ListProjects(
    request: DeepPartial<ListLaunchpadProjectsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadProjectsResponse> {
    return this.rpc.unary(LaunchpadQueryListProjectsDesc, ListLaunchpadProjectsRequest.fromPartial(request), metadata);
  }

  StreamProject(
    request: DeepPartial<StreamLaunchpadProjectRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadProjectResponse> {
    return this.rpc.invoke(
      LaunchpadQueryStreamProjectDesc,
      StreamLaunchpadProjectRequest.fromPartial(request),
      metadata,
    );
  }

  ListWhitelists(
    request: DeepPartial<ListLaunchpadWhitelistsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadWhitelistsResponse> {
    return this.rpc.unary(
      LaunchpadQueryListWhitelistsDesc,
      ListLaunchpadWhitelistsRequest.fromPartial(request),
      metadata,
    );
  }

  StreamWhitelist(
    request: DeepPartial<StreamLaunchpadWhitelistRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadWhitelistResponse> {
    return this.rpc.invoke(
      LaunchpadQueryStreamWhitelistDesc,
      StreamLaunchpadWhitelistRequest.fromPartial(request),
      metadata,
    );
  }

  ListUsers(
    request: DeepPartial<ListLaunchpadUsersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadUsersResponse> {
    return this.rpc.unary(LaunchpadQueryListUsersDesc, ListLaunchpadUsersRequest.fromPartial(request), metadata);
  }

  StreamUsers(
    request: DeepPartial<StreamLaunchpadUsersRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadUsersResponse> {
    return this.rpc.invoke(LaunchpadQueryStreamUsersDesc, StreamLaunchpadUsersRequest.fromPartial(request), metadata);
  }

  ListBuys(
    request: DeepPartial<ListLaunchpadBuysRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLaunchpadBuysResponse> {
    return this.rpc.unary(LaunchpadQueryListBuysDesc, ListLaunchpadBuysRequest.fromPartial(request), metadata);
  }

  StreamBuy(
    request: DeepPartial<StreamLaunchpadBuyRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamLaunchpadBuyResponse> {
    return this.rpc.invoke(LaunchpadQueryStreamBuyDesc, StreamLaunchpadBuyRequest.fromPartial(request), metadata);
  }
}

export const LaunchpadQueryDesc = { serviceName: "flux.indexer.campclash.LaunchpadQuery" };

export const LaunchpadQueryListProjectsDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjects",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLaunchpadProjectsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLaunchpadProjectsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryStreamProjectDesc: UnaryMethodDefinitionish = {
  methodName: "StreamProject",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamLaunchpadProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamLaunchpadProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryListWhitelistsDesc: UnaryMethodDefinitionish = {
  methodName: "ListWhitelists",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLaunchpadWhitelistsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLaunchpadWhitelistsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryStreamWhitelistDesc: UnaryMethodDefinitionish = {
  methodName: "StreamWhitelist",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamLaunchpadWhitelistRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamLaunchpadWhitelistResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryListUsersDesc: UnaryMethodDefinitionish = {
  methodName: "ListUsers",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLaunchpadUsersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLaunchpadUsersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryStreamUsersDesc: UnaryMethodDefinitionish = {
  methodName: "StreamUsers",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamLaunchpadUsersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamLaunchpadUsersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryListBuysDesc: UnaryMethodDefinitionish = {
  methodName: "ListBuys",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLaunchpadBuysRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLaunchpadBuysResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LaunchpadQueryStreamBuyDesc: UnaryMethodDefinitionish = {
  methodName: "StreamBuy",
  service: LaunchpadQueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamLaunchpadBuyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamLaunchpadBuyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
