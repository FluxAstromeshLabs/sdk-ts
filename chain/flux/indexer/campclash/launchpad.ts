// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/indexer/campclash/launchpad.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export interface LaunchpadProjectInfo {
  contract_address: string;
  ticker: string;
  name: string;
  logo: string;
  start_time: string;
  duration: string;
  soft_cap: string;
  hard_cap: string;
  total_supply: string;
  quote_denom: string;
  raised_amount: string;
  status: string;
  finalize_result: string;
  minted_amount: string;
  cw20_address: string;
  min_buy: string;
  max_buy: string;
  creator: string;
  description: string;
  website: string;
  end_time: string;
}

export interface LaunchpadWhitelist {
  ticker: string;
  address: string;
  reason: string;
  admin: string;
  height: string;
}

export interface LaunchpadUser {
  ticker: string;
  address: string;
  total_buy_amount: string;
  updated_height: string;
  claimed: boolean;
  claimable_coin: Coin | undefined;
}

export interface LaunchpadBuy {
  ticker: string;
  address: string;
  denom: string;
  amount: string;
  fee: string;
  height: string;
  timestamp: string;
}

function createBaseLaunchpadProjectInfo(): LaunchpadProjectInfo {
  return {
    contract_address: "",
    ticker: "",
    name: "",
    logo: "",
    start_time: "0",
    duration: "0",
    soft_cap: "",
    hard_cap: "",
    total_supply: "",
    quote_denom: "",
    raised_amount: "",
    status: "",
    finalize_result: "",
    minted_amount: "",
    cw20_address: "",
    min_buy: "",
    max_buy: "",
    creator: "",
    description: "",
    website: "",
    end_time: "0",
  };
}

export const LaunchpadProjectInfo = {
  $type: "flux.indexer.campclash.LaunchpadProjectInfo" as const,

  encode(message: LaunchpadProjectInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.logo !== "") {
      writer.uint32(34).string(message.logo);
    }
    if (message.start_time !== "0") {
      writer.uint32(40).uint64(message.start_time);
    }
    if (message.duration !== "0") {
      writer.uint32(48).uint64(message.duration);
    }
    if (message.soft_cap !== "") {
      writer.uint32(58).string(message.soft_cap);
    }
    if (message.hard_cap !== "") {
      writer.uint32(66).string(message.hard_cap);
    }
    if (message.total_supply !== "") {
      writer.uint32(74).string(message.total_supply);
    }
    if (message.quote_denom !== "") {
      writer.uint32(82).string(message.quote_denom);
    }
    if (message.raised_amount !== "") {
      writer.uint32(90).string(message.raised_amount);
    }
    if (message.status !== "") {
      writer.uint32(98).string(message.status);
    }
    if (message.finalize_result !== "") {
      writer.uint32(106).string(message.finalize_result);
    }
    if (message.minted_amount !== "") {
      writer.uint32(114).string(message.minted_amount);
    }
    if (message.cw20_address !== "") {
      writer.uint32(122).string(message.cw20_address);
    }
    if (message.min_buy !== "") {
      writer.uint32(130).string(message.min_buy);
    }
    if (message.max_buy !== "") {
      writer.uint32(138).string(message.max_buy);
    }
    if (message.creator !== "") {
      writer.uint32(146).string(message.creator);
    }
    if (message.description !== "") {
      writer.uint32(154).string(message.description);
    }
    if (message.website !== "") {
      writer.uint32(162).string(message.website);
    }
    if (message.end_time !== "0") {
      writer.uint32(168).uint64(message.end_time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadProjectInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadProjectInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logo = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.start_time = longToString(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.duration = longToString(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.soft_cap = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.hard_cap = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.total_supply = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.quote_denom = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.raised_amount = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.status = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.finalize_result = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.minted_amount = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.cw20_address = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.min_buy = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.max_buy = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.description = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.website = reader.string();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.end_time = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadProjectInfo {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      start_time: isSet(object.start_time) ? globalThis.String(object.start_time) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      soft_cap: isSet(object.soft_cap) ? globalThis.String(object.soft_cap) : "",
      hard_cap: isSet(object.hard_cap) ? globalThis.String(object.hard_cap) : "",
      total_supply: isSet(object.total_supply) ? globalThis.String(object.total_supply) : "",
      quote_denom: isSet(object.quote_denom) ? globalThis.String(object.quote_denom) : "",
      raised_amount: isSet(object.raised_amount) ? globalThis.String(object.raised_amount) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      finalize_result: isSet(object.finalize_result) ? globalThis.String(object.finalize_result) : "",
      minted_amount: isSet(object.minted_amount) ? globalThis.String(object.minted_amount) : "",
      cw20_address: isSet(object.cw20_address) ? globalThis.String(object.cw20_address) : "",
      min_buy: isSet(object.min_buy) ? globalThis.String(object.min_buy) : "",
      max_buy: isSet(object.max_buy) ? globalThis.String(object.max_buy) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      end_time: isSet(object.end_time) ? globalThis.String(object.end_time) : "0",
    };
  },

  toJSON(message: LaunchpadProjectInfo): unknown {
    const obj: any = {};
    if (message.contract_address !== undefined) {
      obj.contract_address = message.contract_address;
    }
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.logo !== undefined) {
      obj.logo = message.logo;
    }
    if (message.start_time !== undefined) {
      obj.start_time = message.start_time;
    }
    if (message.duration !== undefined) {
      obj.duration = message.duration;
    }
    if (message.soft_cap !== undefined) {
      obj.soft_cap = message.soft_cap;
    }
    if (message.hard_cap !== undefined) {
      obj.hard_cap = message.hard_cap;
    }
    if (message.total_supply !== undefined) {
      obj.total_supply = message.total_supply;
    }
    if (message.quote_denom !== undefined) {
      obj.quote_denom = message.quote_denom;
    }
    if (message.raised_amount !== undefined) {
      obj.raised_amount = message.raised_amount;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.finalize_result !== undefined) {
      obj.finalize_result = message.finalize_result;
    }
    if (message.minted_amount !== undefined) {
      obj.minted_amount = message.minted_amount;
    }
    if (message.cw20_address !== undefined) {
      obj.cw20_address = message.cw20_address;
    }
    if (message.min_buy !== undefined) {
      obj.min_buy = message.min_buy;
    }
    if (message.max_buy !== undefined) {
      obj.max_buy = message.max_buy;
    }
    if (message.creator !== undefined) {
      obj.creator = message.creator;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    if (message.end_time !== undefined) {
      obj.end_time = message.end_time;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadProjectInfo>): LaunchpadProjectInfo {
    return LaunchpadProjectInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadProjectInfo>): LaunchpadProjectInfo {
    const message = createBaseLaunchpadProjectInfo();
    message.contract_address = object.contract_address ?? "";
    message.ticker = object.ticker ?? "";
    message.name = object.name ?? "";
    message.logo = object.logo ?? "";
    message.start_time = object.start_time ?? "0";
    message.duration = object.duration ?? "0";
    message.soft_cap = object.soft_cap ?? "";
    message.hard_cap = object.hard_cap ?? "";
    message.total_supply = object.total_supply ?? "";
    message.quote_denom = object.quote_denom ?? "";
    message.raised_amount = object.raised_amount ?? "";
    message.status = object.status ?? "";
    message.finalize_result = object.finalize_result ?? "";
    message.minted_amount = object.minted_amount ?? "";
    message.cw20_address = object.cw20_address ?? "";
    message.min_buy = object.min_buy ?? "";
    message.max_buy = object.max_buy ?? "";
    message.creator = object.creator ?? "";
    message.description = object.description ?? "";
    message.website = object.website ?? "";
    message.end_time = object.end_time ?? "0";
    return message;
  },
};

function createBaseLaunchpadWhitelist(): LaunchpadWhitelist {
  return { ticker: "", address: "", reason: "", admin: "", height: "0" };
}

export const LaunchpadWhitelist = {
  $type: "flux.indexer.campclash.LaunchpadWhitelist" as const,

  encode(message: LaunchpadWhitelist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    if (message.admin !== "") {
      writer.uint32(34).string(message.admin);
    }
    if (message.height !== "0") {
      writer.uint32(40).uint64(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadWhitelist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadWhitelist {
    return {
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
    };
  },

  toJSON(message: LaunchpadWhitelist): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.admin !== undefined) {
      obj.admin = message.admin;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadWhitelist>): LaunchpadWhitelist {
    return LaunchpadWhitelist.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadWhitelist>): LaunchpadWhitelist {
    const message = createBaseLaunchpadWhitelist();
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    message.reason = object.reason ?? "";
    message.admin = object.admin ?? "";
    message.height = object.height ?? "0";
    return message;
  },
};

function createBaseLaunchpadUser(): LaunchpadUser {
  return {
    ticker: "",
    address: "",
    total_buy_amount: "",
    updated_height: "0",
    claimed: false,
    claimable_coin: undefined,
  };
}

export const LaunchpadUser = {
  $type: "flux.indexer.campclash.LaunchpadUser" as const,

  encode(message: LaunchpadUser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.total_buy_amount !== "") {
      writer.uint32(26).string(message.total_buy_amount);
    }
    if (message.updated_height !== "0") {
      writer.uint32(32).uint64(message.updated_height);
    }
    if (message.claimed !== false) {
      writer.uint32(40).bool(message.claimed);
    }
    if (message.claimable_coin !== undefined) {
      Coin.encode(message.claimable_coin, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadUser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.total_buy_amount = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.updated_height = longToString(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.claimed = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.claimable_coin = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadUser {
    return {
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      total_buy_amount: isSet(object.total_buy_amount) ? globalThis.String(object.total_buy_amount) : "",
      updated_height: isSet(object.updated_height) ? globalThis.String(object.updated_height) : "0",
      claimed: isSet(object.claimed) ? globalThis.Boolean(object.claimed) : false,
      claimable_coin: isSet(object.claimable_coin) ? Coin.fromJSON(object.claimable_coin) : undefined,
    };
  },

  toJSON(message: LaunchpadUser): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.total_buy_amount !== undefined) {
      obj.total_buy_amount = message.total_buy_amount;
    }
    if (message.updated_height !== undefined) {
      obj.updated_height = message.updated_height;
    }
    if (message.claimed !== undefined) {
      obj.claimed = message.claimed;
    }
    if (message.claimable_coin !== undefined) {
      obj.claimable_coin = Coin.toJSON(message.claimable_coin);
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadUser>): LaunchpadUser {
    return LaunchpadUser.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadUser>): LaunchpadUser {
    const message = createBaseLaunchpadUser();
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    message.total_buy_amount = object.total_buy_amount ?? "";
    message.updated_height = object.updated_height ?? "0";
    message.claimed = object.claimed ?? false;
    message.claimable_coin = (object.claimable_coin !== undefined && object.claimable_coin !== null)
      ? Coin.fromPartial(object.claimable_coin)
      : undefined;
    return message;
  },
};

function createBaseLaunchpadBuy(): LaunchpadBuy {
  return { ticker: "", address: "", denom: "", amount: "", fee: "", height: "0", timestamp: "0" };
}

export const LaunchpadBuy = {
  $type: "flux.indexer.campclash.LaunchpadBuy" as const,

  encode(message: LaunchpadBuy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticker !== "") {
      writer.uint32(10).string(message.ticker);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.fee !== "") {
      writer.uint32(42).string(message.fee);
    }
    if (message.height !== "0") {
      writer.uint32(48).uint64(message.height);
    }
    if (message.timestamp !== "0") {
      writer.uint32(56).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LaunchpadBuy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadBuy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticker = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fee = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadBuy {
    return {
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      fee: isSet(object.fee) ? globalThis.String(object.fee) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
    };
  },

  toJSON(message: LaunchpadBuy): unknown {
    const obj: any = {};
    if (message.ticker !== undefined) {
      obj.ticker = message.ticker;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.denom !== undefined) {
      obj.denom = message.denom;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    if (message.fee !== undefined) {
      obj.fee = message.fee;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchpadBuy>): LaunchpadBuy {
    return LaunchpadBuy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchpadBuy>): LaunchpadBuy {
    const message = createBaseLaunchpadBuy();
    message.ticker = object.ticker ?? "";
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    message.fee = object.fee ?? "";
    message.height = object.height ?? "0";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
