// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: flux/eventstream/v1beta1/query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
import { Any } from "../../../google/protobuf/any";
import { EventAttribute, ExecTxResult } from "../../../tendermint/abci/types";
import { Block as Block1 } from "../../../tendermint/types/block";
import { BlockID } from "../../../tendermint/types/types";

/** WARNING: always append to bottom or you will mess up indexer logic */
export enum Op {
  /** COSMOS_SET - COSMOS event default op */
  COSMOS_SET = 0,
  /** FNFTUpdateClass - FNFT */
  FNFTUpdateClass = 100,
  FNFTCreate = 101,
  FNFTPurchaseShares = 102,
  FNFTSponsor = 103,
  FNFTUpdateRevenue = 104,
  FNFTISO = 105,
  FNFTDividend = 106,
  FNFTUpdateHolderCount = 107,
  FNFTUpdateProductCount = 108,
  FNFTUpdateHolder = 109,
  FNFTDeleteHolder = 110,
  /**
   * BazaarCreateProduct - BAZAAR
   * product events
   */
  BazaarCreateProduct = 200,
  BazaarPurchaseOffering = 201,
  BazaarVerifyProduct = 202,
  /** EvmDeployContract - EVM */
  EvmDeployContract = 3000,
  EvmExecute = 3001,
  EvmEmitLog = 3002,
  /** SvmExecute - SVM */
  SvmExecute = 4000,
  SvmAccUpdate = 4001,
  SvmAccLinkCreate = 4002,
  /** AstromeshBalanceSet - astromesh */
  AstromeshBalanceSet = 5000,
  AstromeshBalanceDiff = 5001,
  AstromeshMetadataUpdate = 5002,
  /** StrategyDeploy - strategy */
  StrategyDeploy = 6000,
  StrategyUpdate = 6001,
  StrategyTrigger = 6002,
  StrategyEmitEvent = 6003,
  /** WasmEventEmitted - wasm */
  WasmEventEmitted = 7000,
  WasmContractDeployed = 7001,
  WasmContractMigrateCode = 7002,
  WasmContractUpdateAdmin = 7003,
  /** NewTxs - tx */
  NewTxs = 8000,
  NewBlock = 8001,
  /** OracleSimpleUpdate - oracle */
  OracleSimpleUpdate = 9000,
  /** PoolCreated - pool */
  PoolCreated = 10000,
  PoolUpdated = 10001,
  PoolDeposit = 10002,
  PoolWithdraw = 10003,
  UNRECOGNIZED = -1,
}

export function opFromJSON(object: any): Op {
  switch (object) {
    case 0:
    case "COSMOS_SET":
      return Op.COSMOS_SET;
    case 100:
    case "FNFTUpdateClass":
      return Op.FNFTUpdateClass;
    case 101:
    case "FNFTCreate":
      return Op.FNFTCreate;
    case 102:
    case "FNFTPurchaseShares":
      return Op.FNFTPurchaseShares;
    case 103:
    case "FNFTSponsor":
      return Op.FNFTSponsor;
    case 104:
    case "FNFTUpdateRevenue":
      return Op.FNFTUpdateRevenue;
    case 105:
    case "FNFTISO":
      return Op.FNFTISO;
    case 106:
    case "FNFTDividend":
      return Op.FNFTDividend;
    case 107:
    case "FNFTUpdateHolderCount":
      return Op.FNFTUpdateHolderCount;
    case 108:
    case "FNFTUpdateProductCount":
      return Op.FNFTUpdateProductCount;
    case 109:
    case "FNFTUpdateHolder":
      return Op.FNFTUpdateHolder;
    case 110:
    case "FNFTDeleteHolder":
      return Op.FNFTDeleteHolder;
    case 200:
    case "BazaarCreateProduct":
      return Op.BazaarCreateProduct;
    case 201:
    case "BazaarPurchaseOffering":
      return Op.BazaarPurchaseOffering;
    case 202:
    case "BazaarVerifyProduct":
      return Op.BazaarVerifyProduct;
    case 3000:
    case "EvmDeployContract":
      return Op.EvmDeployContract;
    case 3001:
    case "EvmExecute":
      return Op.EvmExecute;
    case 3002:
    case "EvmEmitLog":
      return Op.EvmEmitLog;
    case 4000:
    case "SvmExecute":
      return Op.SvmExecute;
    case 4001:
    case "SvmAccUpdate":
      return Op.SvmAccUpdate;
    case 4002:
    case "SvmAccLinkCreate":
      return Op.SvmAccLinkCreate;
    case 5000:
    case "AstromeshBalanceSet":
      return Op.AstromeshBalanceSet;
    case 5001:
    case "AstromeshBalanceDiff":
      return Op.AstromeshBalanceDiff;
    case 5002:
    case "AstromeshMetadataUpdate":
      return Op.AstromeshMetadataUpdate;
    case 6000:
    case "StrategyDeploy":
      return Op.StrategyDeploy;
    case 6001:
    case "StrategyUpdate":
      return Op.StrategyUpdate;
    case 6002:
    case "StrategyTrigger":
      return Op.StrategyTrigger;
    case 6003:
    case "StrategyEmitEvent":
      return Op.StrategyEmitEvent;
    case 7000:
    case "WasmEventEmitted":
      return Op.WasmEventEmitted;
    case 7001:
    case "WasmContractDeployed":
      return Op.WasmContractDeployed;
    case 7002:
    case "WasmContractMigrateCode":
      return Op.WasmContractMigrateCode;
    case 7003:
    case "WasmContractUpdateAdmin":
      return Op.WasmContractUpdateAdmin;
    case 8000:
    case "NewTxs":
      return Op.NewTxs;
    case 8001:
    case "NewBlock":
      return Op.NewBlock;
    case 9000:
    case "OracleSimpleUpdate":
      return Op.OracleSimpleUpdate;
    case 10000:
    case "PoolCreated":
      return Op.PoolCreated;
    case 10001:
    case "PoolUpdated":
      return Op.PoolUpdated;
    case 10002:
    case "PoolDeposit":
      return Op.PoolDeposit;
    case 10003:
    case "PoolWithdraw":
      return Op.PoolWithdraw;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Op.UNRECOGNIZED;
  }
}

export function opToJSON(object: Op): string {
  switch (object) {
    case Op.COSMOS_SET:
      return "COSMOS_SET";
    case Op.FNFTUpdateClass:
      return "FNFTUpdateClass";
    case Op.FNFTCreate:
      return "FNFTCreate";
    case Op.FNFTPurchaseShares:
      return "FNFTPurchaseShares";
    case Op.FNFTSponsor:
      return "FNFTSponsor";
    case Op.FNFTUpdateRevenue:
      return "FNFTUpdateRevenue";
    case Op.FNFTISO:
      return "FNFTISO";
    case Op.FNFTDividend:
      return "FNFTDividend";
    case Op.FNFTUpdateHolderCount:
      return "FNFTUpdateHolderCount";
    case Op.FNFTUpdateProductCount:
      return "FNFTUpdateProductCount";
    case Op.FNFTUpdateHolder:
      return "FNFTUpdateHolder";
    case Op.FNFTDeleteHolder:
      return "FNFTDeleteHolder";
    case Op.BazaarCreateProduct:
      return "BazaarCreateProduct";
    case Op.BazaarPurchaseOffering:
      return "BazaarPurchaseOffering";
    case Op.BazaarVerifyProduct:
      return "BazaarVerifyProduct";
    case Op.EvmDeployContract:
      return "EvmDeployContract";
    case Op.EvmExecute:
      return "EvmExecute";
    case Op.EvmEmitLog:
      return "EvmEmitLog";
    case Op.SvmExecute:
      return "SvmExecute";
    case Op.SvmAccUpdate:
      return "SvmAccUpdate";
    case Op.SvmAccLinkCreate:
      return "SvmAccLinkCreate";
    case Op.AstromeshBalanceSet:
      return "AstromeshBalanceSet";
    case Op.AstromeshBalanceDiff:
      return "AstromeshBalanceDiff";
    case Op.AstromeshMetadataUpdate:
      return "AstromeshMetadataUpdate";
    case Op.StrategyDeploy:
      return "StrategyDeploy";
    case Op.StrategyUpdate:
      return "StrategyUpdate";
    case Op.StrategyTrigger:
      return "StrategyTrigger";
    case Op.StrategyEmitEvent:
      return "StrategyEmitEvent";
    case Op.WasmEventEmitted:
      return "WasmEventEmitted";
    case Op.WasmContractDeployed:
      return "WasmContractDeployed";
    case Op.WasmContractMigrateCode:
      return "WasmContractMigrateCode";
    case Op.WasmContractUpdateAdmin:
      return "WasmContractUpdateAdmin";
    case Op.NewTxs:
      return "NewTxs";
    case Op.NewBlock:
      return "NewBlock";
    case Op.OracleSimpleUpdate:
      return "OracleSimpleUpdate";
    case Op.PoolCreated:
      return "PoolCreated";
    case Op.PoolUpdated:
      return "PoolUpdated";
    case Op.PoolDeposit:
      return "PoolDeposit";
    case Op.PoolWithdraw:
      return "PoolWithdraw";
    case Op.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EventsRequest {
  height: string;
  modules: string[];
  tm_queries: string[];
}

export interface EventsResponse {
  height: string;
  time: string;
  modules: string[];
  events: ModuleEvents[];
  tm_queries: string[];
  tm_data: string[];
}

export interface ModuleEvents {
  any_events: AnyEvent[];
}

export interface AnyEvent {
  module: string;
  data: Any | undefined;
}

export interface SyncStatus {
  last_block: string;
  last_block_time: string;
  updated_at: string;
  current_version: string;
}

export interface NewTxsEvent {
  op: Op;
  txs: Uint8Array[];
  tx_results: ExecTxResult[];
}

export interface Block {
  block_id: BlockID | undefined;
  block: Block1 | undefined;
}

export interface NewBlockEvent {
  op: Op;
  block: Block | undefined;
}

export interface WasmEvent {
  attributes: EventAttribute[];
}

function createBaseEventsRequest(): EventsRequest {
  return { height: "0", modules: [], tm_queries: [] };
}

export const EventsRequest = {
  $type: "flux.eventstream.v1beta1.EventsRequest" as const,

  encode(message: EventsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    for (const v of message.modules) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.tm_queries) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modules.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tm_queries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      modules: globalThis.Array.isArray(object?.modules) ? object.modules.map((e: any) => globalThis.String(e)) : [],
      tm_queries: globalThis.Array.isArray(object?.tm_queries)
        ? object.tm_queries.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: EventsRequest): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.modules?.length) {
      obj.modules = message.modules;
    }
    if (message.tm_queries?.length) {
      obj.tm_queries = message.tm_queries;
    }
    return obj;
  },

  create(base?: DeepPartial<EventsRequest>): EventsRequest {
    return EventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventsRequest>): EventsRequest {
    const message = createBaseEventsRequest();
    message.height = object.height ?? "0";
    message.modules = object.modules?.map((e) => e) || [];
    message.tm_queries = object.tm_queries?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventsResponse(): EventsResponse {
  return { height: "0", time: "0", modules: [], events: [], tm_queries: [], tm_data: [] };
}

export const EventsResponse = {
  $type: "flux.eventstream.v1beta1.EventsResponse" as const,

  encode(message: EventsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    if (message.time !== "0") {
      writer.uint32(16).uint64(message.time);
    }
    for (const v of message.modules) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.events) {
      ModuleEvents.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.tm_queries) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.tm_data) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.time = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modules.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.events.push(ModuleEvents.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tm_queries.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tm_data.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventsResponse {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      time: isSet(object.time) ? globalThis.String(object.time) : "0",
      modules: globalThis.Array.isArray(object?.modules) ? object.modules.map((e: any) => globalThis.String(e)) : [],
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => ModuleEvents.fromJSON(e)) : [],
      tm_queries: globalThis.Array.isArray(object?.tm_queries)
        ? object.tm_queries.map((e: any) => globalThis.String(e))
        : [],
      tm_data: globalThis.Array.isArray(object?.tm_data) ? object.tm_data.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EventsResponse): unknown {
    const obj: any = {};
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    if (message.modules?.length) {
      obj.modules = message.modules;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => ModuleEvents.toJSON(e));
    }
    if (message.tm_queries?.length) {
      obj.tm_queries = message.tm_queries;
    }
    if (message.tm_data?.length) {
      obj.tm_data = message.tm_data;
    }
    return obj;
  },

  create(base?: DeepPartial<EventsResponse>): EventsResponse {
    return EventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventsResponse>): EventsResponse {
    const message = createBaseEventsResponse();
    message.height = object.height ?? "0";
    message.time = object.time ?? "0";
    message.modules = object.modules?.map((e) => e) || [];
    message.events = object.events?.map((e) => ModuleEvents.fromPartial(e)) || [];
    message.tm_queries = object.tm_queries?.map((e) => e) || [];
    message.tm_data = object.tm_data?.map((e) => e) || [];
    return message;
  },
};

function createBaseModuleEvents(): ModuleEvents {
  return { any_events: [] };
}

export const ModuleEvents = {
  $type: "flux.eventstream.v1beta1.ModuleEvents" as const,

  encode(message: ModuleEvents, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.any_events) {
      AnyEvent.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ModuleEvents {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.any_events.push(AnyEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleEvents {
    return {
      any_events: globalThis.Array.isArray(object?.any_events)
        ? object.any_events.map((e: any) => AnyEvent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ModuleEvents): unknown {
    const obj: any = {};
    if (message.any_events?.length) {
      obj.any_events = message.any_events.map((e) => AnyEvent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ModuleEvents>): ModuleEvents {
    return ModuleEvents.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModuleEvents>): ModuleEvents {
    const message = createBaseModuleEvents();
    message.any_events = object.any_events?.map((e) => AnyEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAnyEvent(): AnyEvent {
  return { module: "", data: undefined };
}

export const AnyEvent = {
  $type: "flux.eventstream.v1beta1.AnyEvent" as const,

  encode(message: AnyEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(18).string(message.module);
    }
    if (message.data !== undefined) {
      Any.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AnyEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.module = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnyEvent {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: AnyEvent): unknown {
    const obj: any = {};
    if (message.module !== undefined) {
      obj.module = message.module;
    }
    if (message.data !== undefined) {
      obj.data = Any.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<AnyEvent>): AnyEvent {
    return AnyEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnyEvent>): AnyEvent {
    const message = createBaseAnyEvent();
    message.module = object.module ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Any.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseSyncStatus(): SyncStatus {
  return { last_block: "0", last_block_time: "0", updated_at: "0", current_version: "" };
}

export const SyncStatus = {
  $type: "flux.eventstream.v1beta1.SyncStatus" as const,

  encode(message: SyncStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.last_block !== "0") {
      writer.uint32(8).uint64(message.last_block);
    }
    if (message.last_block_time !== "0") {
      writer.uint32(16).int64(message.last_block_time);
    }
    if (message.updated_at !== "0") {
      writer.uint32(24).int64(message.updated_at);
    }
    if (message.current_version !== "") {
      writer.uint32(34).string(message.current_version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SyncStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.last_block = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.last_block_time = longToString(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.updated_at = longToString(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.current_version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncStatus {
    return {
      last_block: isSet(object.last_block) ? globalThis.String(object.last_block) : "0",
      last_block_time: isSet(object.last_block_time) ? globalThis.String(object.last_block_time) : "0",
      updated_at: isSet(object.updated_at) ? globalThis.String(object.updated_at) : "0",
      current_version: isSet(object.current_version) ? globalThis.String(object.current_version) : "",
    };
  },

  toJSON(message: SyncStatus): unknown {
    const obj: any = {};
    if (message.last_block !== undefined) {
      obj.last_block = message.last_block;
    }
    if (message.last_block_time !== undefined) {
      obj.last_block_time = message.last_block_time;
    }
    if (message.updated_at !== undefined) {
      obj.updated_at = message.updated_at;
    }
    if (message.current_version !== undefined) {
      obj.current_version = message.current_version;
    }
    return obj;
  },

  create(base?: DeepPartial<SyncStatus>): SyncStatus {
    return SyncStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncStatus>): SyncStatus {
    const message = createBaseSyncStatus();
    message.last_block = object.last_block ?? "0";
    message.last_block_time = object.last_block_time ?? "0";
    message.updated_at = object.updated_at ?? "0";
    message.current_version = object.current_version ?? "";
    return message;
  },
};

function createBaseNewTxsEvent(): NewTxsEvent {
  return { op: 0, txs: [], tx_results: [] };
}

export const NewTxsEvent = {
  $type: "flux.eventstream.v1beta1.NewTxsEvent" as const,

  encode(message: NewTxsEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    for (const v of message.txs) {
      writer.uint32(18).bytes(v!);
    }
    for (const v of message.tx_results) {
      ExecTxResult.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NewTxsEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewTxsEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tx_results.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewTxsEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      tx_results: globalThis.Array.isArray(object?.tx_results)
        ? object.tx_results.map((e: any) => ExecTxResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NewTxsEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.tx_results?.length) {
      obj.tx_results = message.tx_results.map((e) => ExecTxResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<NewTxsEvent>): NewTxsEvent {
    return NewTxsEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewTxsEvent>): NewTxsEvent {
    const message = createBaseNewTxsEvent();
    message.op = object.op ?? 0;
    message.txs = object.txs?.map((e) => e) || [];
    message.tx_results = object.tx_results?.map((e) => ExecTxResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlock(): Block {
  return { block_id: undefined, block: undefined };
}

export const Block = {
  $type: "flux.eventstream.v1beta1.Block" as const,

  encode(message: Block, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.block_id !== undefined) {
      BlockID.encode(message.block_id, writer.uint32(10).fork()).ldelim();
    }
    if (message.block !== undefined) {
      Block1.encode(message.block, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Block {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.block = Block1.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      block_id: isSet(object.block_id) ? BlockID.fromJSON(object.block_id) : undefined,
      block: isSet(object.block) ? Block1.fromJSON(object.block) : undefined,
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.block_id !== undefined) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.block !== undefined) {
      obj.block = Block1.toJSON(message.block);
    }
    return obj;
  },

  create(base?: DeepPartial<Block>): Block {
    return Block.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Block>): Block {
    const message = createBaseBlock();
    message.block_id = (object.block_id !== undefined && object.block_id !== null)
      ? BlockID.fromPartial(object.block_id)
      : undefined;
    message.block = (object.block !== undefined && object.block !== null)
      ? Block1.fromPartial(object.block)
      : undefined;
    return message;
  },
};

function createBaseNewBlockEvent(): NewBlockEvent {
  return { op: 0, block: undefined };
}

export const NewBlockEvent = {
  $type: "flux.eventstream.v1beta1.NewBlockEvent" as const,

  encode(message: NewBlockEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.block !== undefined) {
      Block.encode(message.block, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NewBlockEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewBlockEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.block = Block.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewBlockEvent {
    return {
      op: isSet(object.op) ? opFromJSON(object.op) : 0,
      block: isSet(object.block) ? Block.fromJSON(object.block) : undefined,
    };
  },

  toJSON(message: NewBlockEvent): unknown {
    const obj: any = {};
    if (message.op !== undefined) {
      obj.op = opToJSON(message.op);
    }
    if (message.block !== undefined) {
      obj.block = Block.toJSON(message.block);
    }
    return obj;
  },

  create(base?: DeepPartial<NewBlockEvent>): NewBlockEvent {
    return NewBlockEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewBlockEvent>): NewBlockEvent {
    const message = createBaseNewBlockEvent();
    message.op = object.op ?? 0;
    message.block = (object.block !== undefined && object.block !== null) ? Block.fromPartial(object.block) : undefined;
    return message;
  },
};

function createBaseWasmEvent(): WasmEvent {
  return { attributes: [] };
}

export const WasmEvent = {
  $type: "flux.eventstream.v1beta1.WasmEvent" as const,

  encode(message: WasmEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.attributes) {
      EventAttribute.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WasmEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWasmEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributes.push(EventAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WasmEvent {
    return {
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => EventAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WasmEvent): unknown {
    const obj: any = {};
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => EventAttribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WasmEvent>): WasmEvent {
    return WasmEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WasmEvent>): WasmEvent {
    const message = createBaseWasmEvent();
    message.attributes = object.attributes?.map((e) => EventAttribute.fromPartial(e)) || [];
    return message;
  },
};

export interface Query {
  GetEvents(request: DeepPartial<EventsRequest>, metadata?: grpc.Metadata): Promise<EventsResponse>;
  StreamEvents(request: DeepPartial<EventsRequest>, metadata?: grpc.Metadata): Observable<EventsResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetEvents = this.GetEvents.bind(this);
    this.StreamEvents = this.StreamEvents.bind(this);
  }

  GetEvents(request: DeepPartial<EventsRequest>, metadata?: grpc.Metadata): Promise<EventsResponse> {
    return this.rpc.unary(QueryGetEventsDesc, EventsRequest.fromPartial(request), metadata);
  }

  StreamEvents(request: DeepPartial<EventsRequest>, metadata?: grpc.Metadata): Observable<EventsResponse> {
    return this.rpc.invoke(QueryStreamEventsDesc, EventsRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "flux.eventstream.v1beta1.Query" };

export const QueryGetEventsDesc: UnaryMethodDefinitionish = {
  methodName: "GetEvents",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return EventsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = EventsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryStreamEventsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamEvents",
  service: QueryDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return EventsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = EventsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
